# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    AbortQueuedMigrationsPayloadFields,
    AbortRepositoryMigrationPayloadFields,
    AcceptEnterpriseAdministratorInvitationPayloadFields,
    AcceptEnterpriseMemberInvitationPayloadFields,
    AcceptTopicSuggestionPayloadFields,
    AccessUserNamespaceRepositoryPayloadFields,
    AddAssigneesToAssignablePayloadFields,
    AddCommentPayloadFields,
    AddDiscussionCommentPayloadFields,
    AddDiscussionPollVotePayloadFields,
    AddEnterpriseOrganizationMemberPayloadFields,
    AddEnterpriseSupportEntitlementPayloadFields,
    AddLabelsToLabelablePayloadFields,
    AddProjectCardPayloadFields,
    AddProjectColumnPayloadFields,
    AddProjectV2DraftIssuePayloadFields,
    AddProjectV2ItemByIdPayloadFields,
    AddPullRequestReviewCommentPayloadFields,
    AddPullRequestReviewPayloadFields,
    AddPullRequestReviewThreadPayloadFields,
    AddPullRequestReviewThreadReplyPayloadFields,
    AddReactionPayloadFields,
    AddStarPayloadFields,
    AddSubIssuePayloadFields,
    AddUpvotePayloadFields,
    AddVerifiableDomainPayloadFields,
    ApproveDeploymentsPayloadFields,
    ApproveVerifiableDomainPayloadFields,
    ArchiveProjectV2ItemPayloadFields,
    ArchiveRepositoryPayloadFields,
    CancelEnterpriseAdminInvitationPayloadFields,
    CancelEnterpriseMemberInvitationPayloadFields,
    CancelSponsorshipPayloadFields,
    ChangeUserStatusPayloadFields,
    ClearLabelsFromLabelablePayloadFields,
    ClearProjectV2ItemFieldValuePayloadFields,
    CloneProjectPayloadFields,
    CloneTemplateRepositoryPayloadFields,
    CloseDiscussionPayloadFields,
    CloseIssuePayloadFields,
    ClosePullRequestPayloadFields,
    ConvertProjectCardNoteToIssuePayloadFields,
    ConvertProjectV2DraftIssueItemToIssuePayloadFields,
    ConvertPullRequestToDraftPayloadFields,
    CopyProjectV2PayloadFields,
    CreateAttributionInvitationPayloadFields,
    CreateBranchProtectionRulePayloadFields,
    CreateCheckRunPayloadFields,
    CreateCheckSuitePayloadFields,
    CreateCommitOnBranchPayloadFields,
    CreateDeploymentPayloadFields,
    CreateDeploymentStatusPayloadFields,
    CreateDiscussionPayloadFields,
    CreateEnterpriseOrganizationPayloadFields,
    CreateEnvironmentPayloadFields,
    CreateIpAllowListEntryPayloadFields,
    CreateIssuePayloadFields,
    CreateIssueTypePayloadFields,
    CreateLabelPayloadFields,
    CreateLinkedBranchPayloadFields,
    CreateMigrationSourcePayloadFields,
    CreateProjectPayloadFields,
    CreateProjectV2FieldPayloadFields,
    CreateProjectV2PayloadFields,
    CreateProjectV2StatusUpdatePayloadFields,
    CreatePullRequestPayloadFields,
    CreateRefPayloadFields,
    CreateRepositoryPayloadFields,
    CreateRepositoryRulesetPayloadFields,
    CreateSponsorshipPayloadFields,
    CreateSponsorshipsPayloadFields,
    CreateSponsorsListingPayloadFields,
    CreateSponsorsTierPayloadFields,
    CreateTeamDiscussionCommentPayloadFields,
    CreateTeamDiscussionPayloadFields,
    CreateUserListPayloadFields,
    DeclineTopicSuggestionPayloadFields,
    DeleteBranchProtectionRulePayloadFields,
    DeleteDeploymentPayloadFields,
    DeleteDiscussionCommentPayloadFields,
    DeleteDiscussionPayloadFields,
    DeleteEnvironmentPayloadFields,
    DeleteIpAllowListEntryPayloadFields,
    DeleteIssueCommentPayloadFields,
    DeleteIssuePayloadFields,
    DeleteIssueTypePayloadFields,
    DeleteLabelPayloadFields,
    DeleteLinkedBranchPayloadFields,
    DeletePackageVersionPayloadFields,
    DeleteProjectCardPayloadFields,
    DeleteProjectColumnPayloadFields,
    DeleteProjectPayloadFields,
    DeleteProjectV2FieldPayloadFields,
    DeleteProjectV2ItemPayloadFields,
    DeleteProjectV2PayloadFields,
    DeleteProjectV2StatusUpdatePayloadFields,
    DeleteProjectV2WorkflowPayloadFields,
    DeletePullRequestReviewCommentPayloadFields,
    DeletePullRequestReviewPayloadFields,
    DeleteRefPayloadFields,
    DeleteRepositoryRulesetPayloadFields,
    DeleteTeamDiscussionCommentPayloadFields,
    DeleteTeamDiscussionPayloadFields,
    DeleteUserListPayloadFields,
    DeleteVerifiableDomainPayloadFields,
    DequeuePullRequestPayloadFields,
    DisablePullRequestAutoMergePayloadFields,
    DismissPullRequestReviewPayloadFields,
    DismissRepositoryVulnerabilityAlertPayloadFields,
    EnablePullRequestAutoMergePayloadFields,
    EnqueuePullRequestPayloadFields,
    FollowOrganizationPayloadFields,
    FollowUserPayloadFields,
    GrantEnterpriseOrganizationsMigratorRolePayloadFields,
    GrantMigratorRolePayloadFields,
    ImportProjectPayloadFields,
    InviteEnterpriseAdminPayloadFields,
    InviteEnterpriseMemberPayloadFields,
    LinkProjectV2ToRepositoryPayloadFields,
    LinkProjectV2ToTeamPayloadFields,
    LinkRepositoryToProjectPayloadFields,
    LockLockablePayloadFields,
    MarkDiscussionCommentAsAnswerPayloadFields,
    MarkFileAsViewedPayloadFields,
    MarkProjectV2AsTemplatePayloadFields,
    MarkPullRequestReadyForReviewPayloadFields,
    MergeBranchPayloadFields,
    MergePullRequestPayloadFields,
    MinimizeCommentPayloadFields,
    MoveProjectCardPayloadFields,
    MoveProjectColumnPayloadFields,
    PinEnvironmentPayloadFields,
    PinIssuePayloadFields,
    PublishSponsorsTierPayloadFields,
    RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields,
    RegenerateVerifiableDomainTokenPayloadFields,
    RejectDeploymentsPayloadFields,
    RemoveAssigneesFromAssignablePayloadFields,
    RemoveEnterpriseAdminPayloadFields,
    RemoveEnterpriseIdentityProviderPayloadFields,
    RemoveEnterpriseMemberPayloadFields,
    RemoveEnterpriseOrganizationPayloadFields,
    RemoveEnterpriseSupportEntitlementPayloadFields,
    RemoveLabelsFromLabelablePayloadFields,
    RemoveOutsideCollaboratorPayloadFields,
    RemoveReactionPayloadFields,
    RemoveStarPayloadFields,
    RemoveSubIssuePayloadFields,
    RemoveUpvotePayloadFields,
    ReopenDiscussionPayloadFields,
    ReopenIssuePayloadFields,
    ReopenPullRequestPayloadFields,
    ReorderEnvironmentPayloadFields,
    ReplaceActorsForAssignablePayloadFields,
    ReprioritizeSubIssuePayloadFields,
    RequestReviewsPayloadFields,
    RerequestCheckSuitePayloadFields,
    ResolveReviewThreadPayloadFields,
    RetireSponsorsTierPayloadFields,
    RevertPullRequestPayloadFields,
    RevokeEnterpriseOrganizationsMigratorRolePayloadFields,
    RevokeMigratorRolePayloadFields,
    SetEnterpriseIdentityProviderPayloadFields,
    SetOrganizationInteractionLimitPayloadFields,
    SetRepositoryInteractionLimitPayloadFields,
    SetUserInteractionLimitPayloadFields,
    StartOrganizationMigrationPayloadFields,
    StartRepositoryMigrationPayloadFields,
    SubmitPullRequestReviewPayloadFields,
    TransferEnterpriseOrganizationPayloadFields,
    TransferIssuePayloadFields,
    UnarchiveProjectV2ItemPayloadFields,
    UnarchiveRepositoryPayloadFields,
    UnfollowOrganizationPayloadFields,
    UnfollowUserPayloadFields,
    UnlinkProjectV2FromRepositoryPayloadFields,
    UnlinkProjectV2FromTeamPayloadFields,
    UnlinkRepositoryFromProjectPayloadFields,
    UnlockLockablePayloadFields,
    UnmarkDiscussionCommentAsAnswerPayloadFields,
    UnmarkFileAsViewedPayloadFields,
    UnmarkIssueAsDuplicatePayloadFields,
    UnmarkProjectV2AsTemplatePayloadFields,
    UnminimizeCommentPayloadFields,
    UnpinIssuePayloadFields,
    UnresolveReviewThreadPayloadFields,
    UpdateBranchProtectionRulePayloadFields,
    UpdateCheckRunPayloadFields,
    UpdateCheckSuitePreferencesPayloadFields,
    UpdateDiscussionCommentPayloadFields,
    UpdateDiscussionPayloadFields,
    UpdateEnterpriseAdministratorRolePayloadFields,
    UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields,
    UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields,
    UpdateEnterpriseDeployKeySettingPayloadFields,
    UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields,
    UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields,
    UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields,
    UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields,
    UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields,
    UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields,
    UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields,
    UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields,
    UpdateEnterpriseOrganizationProjectsSettingPayloadFields,
    UpdateEnterpriseOwnerOrganizationRolePayloadFields,
    UpdateEnterpriseProfilePayloadFields,
    UpdateEnterpriseRepositoryProjectsSettingPayloadFields,
    UpdateEnterpriseTeamDiscussionsSettingPayloadFields,
    UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields,
    UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields,
    UpdateEnvironmentPayloadFields,
    UpdateIpAllowListEnabledSettingPayloadFields,
    UpdateIpAllowListEntryPayloadFields,
    UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields,
    UpdateIssueCommentPayloadFields,
    UpdateIssueIssueTypePayloadFields,
    UpdateIssuePayloadFields,
    UpdateIssueTypePayloadFields,
    UpdateLabelPayloadFields,
    UpdateNotificationRestrictionSettingPayloadFields,
    UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields,
    UpdateOrganizationWebCommitSignoffSettingPayloadFields,
    UpdatePatreonSponsorabilityPayloadFields,
    UpdateProjectCardPayloadFields,
    UpdateProjectColumnPayloadFields,
    UpdateProjectPayloadFields,
    UpdateProjectV2CollaboratorsPayloadFields,
    UpdateProjectV2DraftIssuePayloadFields,
    UpdateProjectV2FieldPayloadFields,
    UpdateProjectV2ItemFieldValuePayloadFields,
    UpdateProjectV2ItemPositionPayloadFields,
    UpdateProjectV2PayloadFields,
    UpdateProjectV2StatusUpdatePayloadFields,
    UpdatePullRequestBranchPayloadFields,
    UpdatePullRequestPayloadFields,
    UpdatePullRequestReviewCommentPayloadFields,
    UpdatePullRequestReviewPayloadFields,
    UpdateRefPayloadFields,
    UpdateRefsPayloadFields,
    UpdateRepositoryPayloadFields,
    UpdateRepositoryRulesetPayloadFields,
    UpdateRepositoryWebCommitSignoffSettingPayloadFields,
    UpdateSponsorshipPreferencesPayloadFields,
    UpdateSubscriptionPayloadFields,
    UpdateTeamDiscussionCommentPayloadFields,
    UpdateTeamDiscussionPayloadFields,
    UpdateTeamReviewAssignmentPayloadFields,
    UpdateTeamsRepositoryPayloadFields,
    UpdateTopicsPayloadFields,
    UpdateUserListPayloadFields,
    UpdateUserListsForItemPayloadFields,
    VerifyVerifiableDomainPayloadFields,
)
from .input_types import (
    AbortQueuedMigrationsInput,
    AbortRepositoryMigrationInput,
    AcceptEnterpriseAdministratorInvitationInput,
    AcceptEnterpriseMemberInvitationInput,
    AcceptTopicSuggestionInput,
    AccessUserNamespaceRepositoryInput,
    AddAssigneesToAssignableInput,
    AddCommentInput,
    AddDiscussionCommentInput,
    AddDiscussionPollVoteInput,
    AddEnterpriseOrganizationMemberInput,
    AddEnterpriseSupportEntitlementInput,
    AddLabelsToLabelableInput,
    AddProjectCardInput,
    AddProjectColumnInput,
    AddProjectV2DraftIssueInput,
    AddProjectV2ItemByIdInput,
    AddPullRequestReviewCommentInput,
    AddPullRequestReviewInput,
    AddPullRequestReviewThreadInput,
    AddPullRequestReviewThreadReplyInput,
    AddReactionInput,
    AddStarInput,
    AddSubIssueInput,
    AddUpvoteInput,
    AddVerifiableDomainInput,
    ApproveDeploymentsInput,
    ApproveVerifiableDomainInput,
    ArchiveProjectV2ItemInput,
    ArchiveRepositoryInput,
    CancelEnterpriseAdminInvitationInput,
    CancelEnterpriseMemberInvitationInput,
    CancelSponsorshipInput,
    ChangeUserStatusInput,
    ClearLabelsFromLabelableInput,
    ClearProjectV2ItemFieldValueInput,
    CloneProjectInput,
    CloneTemplateRepositoryInput,
    CloseDiscussionInput,
    CloseIssueInput,
    ClosePullRequestInput,
    ConvertProjectCardNoteToIssueInput,
    ConvertProjectV2DraftIssueItemToIssueInput,
    ConvertPullRequestToDraftInput,
    CopyProjectV2Input,
    CreateAttributionInvitationInput,
    CreateBranchProtectionRuleInput,
    CreateCheckRunInput,
    CreateCheckSuiteInput,
    CreateCommitOnBranchInput,
    CreateDeploymentInput,
    CreateDeploymentStatusInput,
    CreateDiscussionInput,
    CreateEnterpriseOrganizationInput,
    CreateEnvironmentInput,
    CreateIpAllowListEntryInput,
    CreateIssueInput,
    CreateIssueTypeInput,
    CreateLabelInput,
    CreateLinkedBranchInput,
    CreateMigrationSourceInput,
    CreateProjectInput,
    CreateProjectV2FieldInput,
    CreateProjectV2Input,
    CreateProjectV2StatusUpdateInput,
    CreatePullRequestInput,
    CreateRefInput,
    CreateRepositoryInput,
    CreateRepositoryRulesetInput,
    CreateSponsorshipInput,
    CreateSponsorshipsInput,
    CreateSponsorsListingInput,
    CreateSponsorsTierInput,
    CreateTeamDiscussionCommentInput,
    CreateTeamDiscussionInput,
    CreateUserListInput,
    DeclineTopicSuggestionInput,
    DeleteBranchProtectionRuleInput,
    DeleteDeploymentInput,
    DeleteDiscussionCommentInput,
    DeleteDiscussionInput,
    DeleteEnvironmentInput,
    DeleteIpAllowListEntryInput,
    DeleteIssueCommentInput,
    DeleteIssueInput,
    DeleteIssueTypeInput,
    DeleteLabelInput,
    DeleteLinkedBranchInput,
    DeletePackageVersionInput,
    DeleteProjectCardInput,
    DeleteProjectColumnInput,
    DeleteProjectInput,
    DeleteProjectV2FieldInput,
    DeleteProjectV2Input,
    DeleteProjectV2ItemInput,
    DeleteProjectV2StatusUpdateInput,
    DeleteProjectV2WorkflowInput,
    DeletePullRequestReviewCommentInput,
    DeletePullRequestReviewInput,
    DeleteRefInput,
    DeleteRepositoryRulesetInput,
    DeleteTeamDiscussionCommentInput,
    DeleteTeamDiscussionInput,
    DeleteUserListInput,
    DeleteVerifiableDomainInput,
    DequeuePullRequestInput,
    DisablePullRequestAutoMergeInput,
    DismissPullRequestReviewInput,
    DismissRepositoryVulnerabilityAlertInput,
    EnablePullRequestAutoMergeInput,
    EnqueuePullRequestInput,
    FollowOrganizationInput,
    FollowUserInput,
    GrantEnterpriseOrganizationsMigratorRoleInput,
    GrantMigratorRoleInput,
    ImportProjectInput,
    InviteEnterpriseAdminInput,
    InviteEnterpriseMemberInput,
    LinkProjectV2ToRepositoryInput,
    LinkProjectV2ToTeamInput,
    LinkRepositoryToProjectInput,
    LockLockableInput,
    MarkDiscussionCommentAsAnswerInput,
    MarkFileAsViewedInput,
    MarkProjectV2AsTemplateInput,
    MarkPullRequestReadyForReviewInput,
    MergeBranchInput,
    MergePullRequestInput,
    MinimizeCommentInput,
    MoveProjectCardInput,
    MoveProjectColumnInput,
    PinEnvironmentInput,
    PinIssueInput,
    PublishSponsorsTierInput,
    RegenerateEnterpriseIdentityProviderRecoveryCodesInput,
    RegenerateVerifiableDomainTokenInput,
    RejectDeploymentsInput,
    RemoveAssigneesFromAssignableInput,
    RemoveEnterpriseAdminInput,
    RemoveEnterpriseIdentityProviderInput,
    RemoveEnterpriseMemberInput,
    RemoveEnterpriseOrganizationInput,
    RemoveEnterpriseSupportEntitlementInput,
    RemoveLabelsFromLabelableInput,
    RemoveOutsideCollaboratorInput,
    RemoveReactionInput,
    RemoveStarInput,
    RemoveSubIssueInput,
    RemoveUpvoteInput,
    ReopenDiscussionInput,
    ReopenIssueInput,
    ReopenPullRequestInput,
    ReorderEnvironmentInput,
    ReplaceActorsForAssignableInput,
    ReprioritizeSubIssueInput,
    RequestReviewsInput,
    RerequestCheckSuiteInput,
    ResolveReviewThreadInput,
    RetireSponsorsTierInput,
    RevertPullRequestInput,
    RevokeEnterpriseOrganizationsMigratorRoleInput,
    RevokeMigratorRoleInput,
    SetEnterpriseIdentityProviderInput,
    SetOrganizationInteractionLimitInput,
    SetRepositoryInteractionLimitInput,
    SetUserInteractionLimitInput,
    StartOrganizationMigrationInput,
    StartRepositoryMigrationInput,
    SubmitPullRequestReviewInput,
    TransferEnterpriseOrganizationInput,
    TransferIssueInput,
    UnarchiveProjectV2ItemInput,
    UnarchiveRepositoryInput,
    UnfollowOrganizationInput,
    UnfollowUserInput,
    UnlinkProjectV2FromRepositoryInput,
    UnlinkProjectV2FromTeamInput,
    UnlinkRepositoryFromProjectInput,
    UnlockLockableInput,
    UnmarkDiscussionCommentAsAnswerInput,
    UnmarkFileAsViewedInput,
    UnmarkIssueAsDuplicateInput,
    UnmarkProjectV2AsTemplateInput,
    UnminimizeCommentInput,
    UnpinIssueInput,
    UnresolveReviewThreadInput,
    UpdateBranchProtectionRuleInput,
    UpdateCheckRunInput,
    UpdateCheckSuitePreferencesInput,
    UpdateDiscussionCommentInput,
    UpdateDiscussionInput,
    UpdateEnterpriseAdministratorRoleInput,
    UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput,
    UpdateEnterpriseDefaultRepositoryPermissionSettingInput,
    UpdateEnterpriseDeployKeySettingInput,
    UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput,
    UpdateEnterpriseMembersCanCreateRepositoriesSettingInput,
    UpdateEnterpriseMembersCanDeleteIssuesSettingInput,
    UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput,
    UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput,
    UpdateEnterpriseMembersCanMakePurchasesSettingInput,
    UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput,
    UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput,
    UpdateEnterpriseOrganizationProjectsSettingInput,
    UpdateEnterpriseOwnerOrganizationRoleInput,
    UpdateEnterpriseProfileInput,
    UpdateEnterpriseRepositoryProjectsSettingInput,
    UpdateEnterpriseTeamDiscussionsSettingInput,
    UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput,
    UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput,
    UpdateEnvironmentInput,
    UpdateIpAllowListEnabledSettingInput,
    UpdateIpAllowListEntryInput,
    UpdateIpAllowListForInstalledAppsEnabledSettingInput,
    UpdateIssueCommentInput,
    UpdateIssueInput,
    UpdateIssueIssueTypeInput,
    UpdateIssueTypeInput,
    UpdateLabelInput,
    UpdateNotificationRestrictionSettingInput,
    UpdateOrganizationAllowPrivateRepositoryForkingSettingInput,
    UpdateOrganizationWebCommitSignoffSettingInput,
    UpdatePatreonSponsorabilityInput,
    UpdateProjectCardInput,
    UpdateProjectColumnInput,
    UpdateProjectInput,
    UpdateProjectV2CollaboratorsInput,
    UpdateProjectV2DraftIssueInput,
    UpdateProjectV2FieldInput,
    UpdateProjectV2Input,
    UpdateProjectV2ItemFieldValueInput,
    UpdateProjectV2ItemPositionInput,
    UpdateProjectV2StatusUpdateInput,
    UpdatePullRequestBranchInput,
    UpdatePullRequestInput,
    UpdatePullRequestReviewCommentInput,
    UpdatePullRequestReviewInput,
    UpdateRefInput,
    UpdateRefsInput,
    UpdateRepositoryInput,
    UpdateRepositoryRulesetInput,
    UpdateRepositoryWebCommitSignoffSettingInput,
    UpdateSponsorshipPreferencesInput,
    UpdateSubscriptionInput,
    UpdateTeamDiscussionCommentInput,
    UpdateTeamDiscussionInput,
    UpdateTeamReviewAssignmentInput,
    UpdateTeamsRepositoryInput,
    UpdateTopicsInput,
    UpdateUserListInput,
    UpdateUserListsForItemInput,
    VerifyVerifiableDomainInput,
)


class Mutation:
    @classmethod
    def abort_queued_migrations(
        cls, input: AbortQueuedMigrationsInput
    ) -> AbortQueuedMigrationsPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AbortQueuedMigrationsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AbortQueuedMigrationsPayloadFields(
            field_name="abortQueuedMigrations", arguments=cleared_arguments
        )

    @classmethod
    def abort_repository_migration(
        cls, input: AbortRepositoryMigrationInput
    ) -> AbortRepositoryMigrationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AbortRepositoryMigrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AbortRepositoryMigrationPayloadFields(
            field_name="abortRepositoryMigration", arguments=cleared_arguments
        )

    @classmethod
    def accept_enterprise_administrator_invitation(
        cls, input: AcceptEnterpriseAdministratorInvitationInput
    ) -> AcceptEnterpriseAdministratorInvitationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "AcceptEnterpriseAdministratorInvitationInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AcceptEnterpriseAdministratorInvitationPayloadFields(
            field_name="acceptEnterpriseAdministratorInvitation",
            arguments=cleared_arguments,
        )

    @classmethod
    def accept_enterprise_member_invitation(
        cls, input: AcceptEnterpriseMemberInvitationInput
    ) -> AcceptEnterpriseMemberInvitationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AcceptEnterpriseMemberInvitationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AcceptEnterpriseMemberInvitationPayloadFields(
            field_name="acceptEnterpriseMemberInvitation", arguments=cleared_arguments
        )

    @classmethod
    def accept_topic_suggestion(
        cls, input: AcceptTopicSuggestionInput
    ) -> AcceptTopicSuggestionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AcceptTopicSuggestionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AcceptTopicSuggestionPayloadFields(
            field_name="acceptTopicSuggestion", arguments=cleared_arguments
        )

    @classmethod
    def access_user_namespace_repository(
        cls, input: AccessUserNamespaceRepositoryInput
    ) -> AccessUserNamespaceRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AccessUserNamespaceRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AccessUserNamespaceRepositoryPayloadFields(
            field_name="accessUserNamespaceRepository", arguments=cleared_arguments
        )

    @classmethod
    def add_assignees_to_assignable(
        cls, input: AddAssigneesToAssignableInput
    ) -> AddAssigneesToAssignablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddAssigneesToAssignableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddAssigneesToAssignablePayloadFields(
            field_name="addAssigneesToAssignable", arguments=cleared_arguments
        )

    @classmethod
    def add_comment(cls, input: AddCommentInput) -> AddCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddCommentPayloadFields(
            field_name="addComment", arguments=cleared_arguments
        )

    @classmethod
    def add_discussion_comment(
        cls, input: AddDiscussionCommentInput
    ) -> AddDiscussionCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddDiscussionCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddDiscussionCommentPayloadFields(
            field_name="addDiscussionComment", arguments=cleared_arguments
        )

    @classmethod
    def add_discussion_poll_vote(
        cls, input: AddDiscussionPollVoteInput
    ) -> AddDiscussionPollVotePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddDiscussionPollVoteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddDiscussionPollVotePayloadFields(
            field_name="addDiscussionPollVote", arguments=cleared_arguments
        )

    @classmethod
    def add_enterprise_organization_member(
        cls, input: AddEnterpriseOrganizationMemberInput
    ) -> AddEnterpriseOrganizationMemberPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddEnterpriseOrganizationMemberInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddEnterpriseOrganizationMemberPayloadFields(
            field_name="addEnterpriseOrganizationMember", arguments=cleared_arguments
        )

    @classmethod
    def add_enterprise_support_entitlement(
        cls, input: AddEnterpriseSupportEntitlementInput
    ) -> AddEnterpriseSupportEntitlementPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddEnterpriseSupportEntitlementInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddEnterpriseSupportEntitlementPayloadFields(
            field_name="addEnterpriseSupportEntitlement", arguments=cleared_arguments
        )

    @classmethod
    def add_labels_to_labelable(
        cls, input: AddLabelsToLabelableInput
    ) -> AddLabelsToLabelablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddLabelsToLabelableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddLabelsToLabelablePayloadFields(
            field_name="addLabelsToLabelable", arguments=cleared_arguments
        )

    @classmethod
    def add_project_card(
        cls, input: AddProjectCardInput
    ) -> AddProjectCardPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddProjectCardInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddProjectCardPayloadFields(
            field_name="addProjectCard", arguments=cleared_arguments
        )

    @classmethod
    def add_project_column(
        cls, input: AddProjectColumnInput
    ) -> AddProjectColumnPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddProjectColumnInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddProjectColumnPayloadFields(
            field_name="addProjectColumn", arguments=cleared_arguments
        )

    @classmethod
    def add_project_v_2_draft_issue(
        cls, input: AddProjectV2DraftIssueInput
    ) -> AddProjectV2DraftIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddProjectV2DraftIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddProjectV2DraftIssuePayloadFields(
            field_name="addProjectV2DraftIssue", arguments=cleared_arguments
        )

    @classmethod
    def add_project_v_2_item_by_id(
        cls, input: AddProjectV2ItemByIdInput
    ) -> AddProjectV2ItemByIdPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddProjectV2ItemByIdInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddProjectV2ItemByIdPayloadFields(
            field_name="addProjectV2ItemById", arguments=cleared_arguments
        )

    @classmethod
    def add_pull_request_review(
        cls, input: AddPullRequestReviewInput
    ) -> AddPullRequestReviewPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddPullRequestReviewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddPullRequestReviewPayloadFields(
            field_name="addPullRequestReview", arguments=cleared_arguments
        )

    @classmethod
    def add_pull_request_review_comment(
        cls, input: AddPullRequestReviewCommentInput
    ) -> AddPullRequestReviewCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddPullRequestReviewCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddPullRequestReviewCommentPayloadFields(
            field_name="addPullRequestReviewComment", arguments=cleared_arguments
        )

    @classmethod
    def add_pull_request_review_thread(
        cls, input: AddPullRequestReviewThreadInput
    ) -> AddPullRequestReviewThreadPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddPullRequestReviewThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddPullRequestReviewThreadPayloadFields(
            field_name="addPullRequestReviewThread", arguments=cleared_arguments
        )

    @classmethod
    def add_pull_request_review_thread_reply(
        cls, input: AddPullRequestReviewThreadReplyInput
    ) -> AddPullRequestReviewThreadReplyPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddPullRequestReviewThreadReplyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddPullRequestReviewThreadReplyPayloadFields(
            field_name="addPullRequestReviewThreadReply", arguments=cleared_arguments
        )

    @classmethod
    def add_reaction(cls, input: AddReactionInput) -> AddReactionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddReactionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddReactionPayloadFields(
            field_name="addReaction", arguments=cleared_arguments
        )

    @classmethod
    def add_star(cls, input: AddStarInput) -> AddStarPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddStarInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddStarPayloadFields(field_name="addStar", arguments=cleared_arguments)

    @classmethod
    def add_sub_issue(cls, input: AddSubIssueInput) -> AddSubIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddSubIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddSubIssuePayloadFields(
            field_name="addSubIssue", arguments=cleared_arguments
        )

    @classmethod
    def add_upvote(cls, input: AddUpvoteInput) -> AddUpvotePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddUpvoteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddUpvotePayloadFields(
            field_name="addUpvote", arguments=cleared_arguments
        )

    @classmethod
    def add_verifiable_domain(
        cls, input: AddVerifiableDomainInput
    ) -> AddVerifiableDomainPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddVerifiableDomainInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddVerifiableDomainPayloadFields(
            field_name="addVerifiableDomain", arguments=cleared_arguments
        )

    @classmethod
    def approve_deployments(
        cls, input: ApproveDeploymentsInput
    ) -> ApproveDeploymentsPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ApproveDeploymentsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ApproveDeploymentsPayloadFields(
            field_name="approveDeployments", arguments=cleared_arguments
        )

    @classmethod
    def approve_verifiable_domain(
        cls, input: ApproveVerifiableDomainInput
    ) -> ApproveVerifiableDomainPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ApproveVerifiableDomainInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ApproveVerifiableDomainPayloadFields(
            field_name="approveVerifiableDomain", arguments=cleared_arguments
        )

    @classmethod
    def archive_project_v_2_item(
        cls, input: ArchiveProjectV2ItemInput
    ) -> ArchiveProjectV2ItemPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ArchiveProjectV2ItemInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ArchiveProjectV2ItemPayloadFields(
            field_name="archiveProjectV2Item", arguments=cleared_arguments
        )

    @classmethod
    def archive_repository(
        cls, input: ArchiveRepositoryInput
    ) -> ArchiveRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ArchiveRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ArchiveRepositoryPayloadFields(
            field_name="archiveRepository", arguments=cleared_arguments
        )

    @classmethod
    def cancel_enterprise_admin_invitation(
        cls, input: CancelEnterpriseAdminInvitationInput
    ) -> CancelEnterpriseAdminInvitationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CancelEnterpriseAdminInvitationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CancelEnterpriseAdminInvitationPayloadFields(
            field_name="cancelEnterpriseAdminInvitation", arguments=cleared_arguments
        )

    @classmethod
    def cancel_enterprise_member_invitation(
        cls, input: CancelEnterpriseMemberInvitationInput
    ) -> CancelEnterpriseMemberInvitationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CancelEnterpriseMemberInvitationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CancelEnterpriseMemberInvitationPayloadFields(
            field_name="cancelEnterpriseMemberInvitation", arguments=cleared_arguments
        )

    @classmethod
    def cancel_sponsorship(
        cls, input: CancelSponsorshipInput
    ) -> CancelSponsorshipPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CancelSponsorshipInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CancelSponsorshipPayloadFields(
            field_name="cancelSponsorship", arguments=cleared_arguments
        )

    @classmethod
    def change_user_status(
        cls, input: ChangeUserStatusInput
    ) -> ChangeUserStatusPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ChangeUserStatusInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChangeUserStatusPayloadFields(
            field_name="changeUserStatus", arguments=cleared_arguments
        )

    @classmethod
    def clear_labels_from_labelable(
        cls, input: ClearLabelsFromLabelableInput
    ) -> ClearLabelsFromLabelablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ClearLabelsFromLabelableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ClearLabelsFromLabelablePayloadFields(
            field_name="clearLabelsFromLabelable", arguments=cleared_arguments
        )

    @classmethod
    def clear_project_v_2_item_field_value(
        cls, input: ClearProjectV2ItemFieldValueInput
    ) -> ClearProjectV2ItemFieldValuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ClearProjectV2ItemFieldValueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ClearProjectV2ItemFieldValuePayloadFields(
            field_name="clearProjectV2ItemFieldValue", arguments=cleared_arguments
        )

    @classmethod
    def clone_project(cls, input: CloneProjectInput) -> CloneProjectPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CloneProjectInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CloneProjectPayloadFields(
            field_name="cloneProject", arguments=cleared_arguments
        )

    @classmethod
    def clone_template_repository(
        cls, input: CloneTemplateRepositoryInput
    ) -> CloneTemplateRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CloneTemplateRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CloneTemplateRepositoryPayloadFields(
            field_name="cloneTemplateRepository", arguments=cleared_arguments
        )

    @classmethod
    def close_discussion(
        cls, input: CloseDiscussionInput
    ) -> CloseDiscussionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CloseDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CloseDiscussionPayloadFields(
            field_name="closeDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def close_issue(cls, input: CloseIssueInput) -> CloseIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CloseIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CloseIssuePayloadFields(
            field_name="closeIssue", arguments=cleared_arguments
        )

    @classmethod
    def close_pull_request(
        cls, input: ClosePullRequestInput
    ) -> ClosePullRequestPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ClosePullRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ClosePullRequestPayloadFields(
            field_name="closePullRequest", arguments=cleared_arguments
        )

    @classmethod
    def convert_project_card_note_to_issue(
        cls, input: ConvertProjectCardNoteToIssueInput
    ) -> ConvertProjectCardNoteToIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ConvertProjectCardNoteToIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ConvertProjectCardNoteToIssuePayloadFields(
            field_name="convertProjectCardNoteToIssue", arguments=cleared_arguments
        )

    @classmethod
    def convert_project_v_2_draft_issue_item_to_issue(
        cls, input: ConvertProjectV2DraftIssueItemToIssueInput
    ) -> ConvertProjectV2DraftIssueItemToIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "ConvertProjectV2DraftIssueItemToIssueInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ConvertProjectV2DraftIssueItemToIssuePayloadFields(
            field_name="convertProjectV2DraftIssueItemToIssue",
            arguments=cleared_arguments,
        )

    @classmethod
    def convert_pull_request_to_draft(
        cls, input: ConvertPullRequestToDraftInput
    ) -> ConvertPullRequestToDraftPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ConvertPullRequestToDraftInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ConvertPullRequestToDraftPayloadFields(
            field_name="convertPullRequestToDraft", arguments=cleared_arguments
        )

    @classmethod
    def copy_project_v_2(cls, input: CopyProjectV2Input) -> CopyProjectV2PayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CopyProjectV2Input!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CopyProjectV2PayloadFields(
            field_name="copyProjectV2", arguments=cleared_arguments
        )

    @classmethod
    def create_attribution_invitation(
        cls, input: CreateAttributionInvitationInput
    ) -> CreateAttributionInvitationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateAttributionInvitationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateAttributionInvitationPayloadFields(
            field_name="createAttributionInvitation", arguments=cleared_arguments
        )

    @classmethod
    def create_branch_protection_rule(
        cls, input: CreateBranchProtectionRuleInput
    ) -> CreateBranchProtectionRulePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateBranchProtectionRuleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateBranchProtectionRulePayloadFields(
            field_name="createBranchProtectionRule", arguments=cleared_arguments
        )

    @classmethod
    def create_check_run(
        cls, input: CreateCheckRunInput
    ) -> CreateCheckRunPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCheckRunInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCheckRunPayloadFields(
            field_name="createCheckRun", arguments=cleared_arguments
        )

    @classmethod
    def create_check_suite(
        cls, input: CreateCheckSuiteInput
    ) -> CreateCheckSuitePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCheckSuiteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCheckSuitePayloadFields(
            field_name="createCheckSuite", arguments=cleared_arguments
        )

    @classmethod
    def create_commit_on_branch(
        cls, input: CreateCommitOnBranchInput
    ) -> CreateCommitOnBranchPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCommitOnBranchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCommitOnBranchPayloadFields(
            field_name="createCommitOnBranch", arguments=cleared_arguments
        )

    @classmethod
    def create_deployment(
        cls, input: CreateDeploymentInput
    ) -> CreateDeploymentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateDeploymentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateDeploymentPayloadFields(
            field_name="createDeployment", arguments=cleared_arguments
        )

    @classmethod
    def create_deployment_status(
        cls, input: CreateDeploymentStatusInput
    ) -> CreateDeploymentStatusPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateDeploymentStatusInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateDeploymentStatusPayloadFields(
            field_name="createDeploymentStatus", arguments=cleared_arguments
        )

    @classmethod
    def create_discussion(
        cls, input: CreateDiscussionInput
    ) -> CreateDiscussionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateDiscussionPayloadFields(
            field_name="createDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def create_enterprise_organization(
        cls, input: CreateEnterpriseOrganizationInput
    ) -> CreateEnterpriseOrganizationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateEnterpriseOrganizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateEnterpriseOrganizationPayloadFields(
            field_name="createEnterpriseOrganization", arguments=cleared_arguments
        )

    @classmethod
    def create_environment(
        cls, input: CreateEnvironmentInput
    ) -> CreateEnvironmentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateEnvironmentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateEnvironmentPayloadFields(
            field_name="createEnvironment", arguments=cleared_arguments
        )

    @classmethod
    def create_ip_allow_list_entry(
        cls, input: CreateIpAllowListEntryInput
    ) -> CreateIpAllowListEntryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateIpAllowListEntryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateIpAllowListEntryPayloadFields(
            field_name="createIpAllowListEntry", arguments=cleared_arguments
        )

    @classmethod
    def create_issue(cls, input: CreateIssueInput) -> CreateIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateIssuePayloadFields(
            field_name="createIssue", arguments=cleared_arguments
        )

    @classmethod
    def create_issue_type(
        cls, input: CreateIssueTypeInput
    ) -> CreateIssueTypePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateIssueTypeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateIssueTypePayloadFields(
            field_name="createIssueType", arguments=cleared_arguments
        )

    @classmethod
    def create_label(cls, input: CreateLabelInput) -> CreateLabelPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateLabelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateLabelPayloadFields(
            field_name="createLabel", arguments=cleared_arguments
        )

    @classmethod
    def create_linked_branch(
        cls, input: CreateLinkedBranchInput
    ) -> CreateLinkedBranchPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateLinkedBranchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateLinkedBranchPayloadFields(
            field_name="createLinkedBranch", arguments=cleared_arguments
        )

    @classmethod
    def create_migration_source(
        cls, input: CreateMigrationSourceInput
    ) -> CreateMigrationSourcePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateMigrationSourceInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateMigrationSourcePayloadFields(
            field_name="createMigrationSource", arguments=cleared_arguments
        )

    @classmethod
    def create_project(cls, input: CreateProjectInput) -> CreateProjectPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateProjectInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateProjectPayloadFields(
            field_name="createProject", arguments=cleared_arguments
        )

    @classmethod
    def create_project_v_2(
        cls, input: CreateProjectV2Input
    ) -> CreateProjectV2PayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateProjectV2Input!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateProjectV2PayloadFields(
            field_name="createProjectV2", arguments=cleared_arguments
        )

    @classmethod
    def create_project_v_2_field(
        cls, input: CreateProjectV2FieldInput
    ) -> CreateProjectV2FieldPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateProjectV2FieldInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateProjectV2FieldPayloadFields(
            field_name="createProjectV2Field", arguments=cleared_arguments
        )

    @classmethod
    def create_project_v_2_status_update(
        cls, input: CreateProjectV2StatusUpdateInput
    ) -> CreateProjectV2StatusUpdatePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateProjectV2StatusUpdateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateProjectV2StatusUpdatePayloadFields(
            field_name="createProjectV2StatusUpdate", arguments=cleared_arguments
        )

    @classmethod
    def create_pull_request(
        cls, input: CreatePullRequestInput
    ) -> CreatePullRequestPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreatePullRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatePullRequestPayloadFields(
            field_name="createPullRequest", arguments=cleared_arguments
        )

    @classmethod
    def create_ref(cls, input: CreateRefInput) -> CreateRefPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateRefInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateRefPayloadFields(
            field_name="createRef", arguments=cleared_arguments
        )

    @classmethod
    def create_repository(
        cls, input: CreateRepositoryInput
    ) -> CreateRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateRepositoryPayloadFields(
            field_name="createRepository", arguments=cleared_arguments
        )

    @classmethod
    def create_repository_ruleset(
        cls, input: CreateRepositoryRulesetInput
    ) -> CreateRepositoryRulesetPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateRepositoryRulesetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateRepositoryRulesetPayloadFields(
            field_name="createRepositoryRuleset", arguments=cleared_arguments
        )

    @classmethod
    def create_sponsors_listing(
        cls, input: CreateSponsorsListingInput
    ) -> CreateSponsorsListingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateSponsorsListingInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateSponsorsListingPayloadFields(
            field_name="createSponsorsListing", arguments=cleared_arguments
        )

    @classmethod
    def create_sponsors_tier(
        cls, input: CreateSponsorsTierInput
    ) -> CreateSponsorsTierPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateSponsorsTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateSponsorsTierPayloadFields(
            field_name="createSponsorsTier", arguments=cleared_arguments
        )

    @classmethod
    def create_sponsorship(
        cls, input: CreateSponsorshipInput
    ) -> CreateSponsorshipPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateSponsorshipInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateSponsorshipPayloadFields(
            field_name="createSponsorship", arguments=cleared_arguments
        )

    @classmethod
    def create_sponsorships(
        cls, input: CreateSponsorshipsInput
    ) -> CreateSponsorshipsPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateSponsorshipsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateSponsorshipsPayloadFields(
            field_name="createSponsorships", arguments=cleared_arguments
        )

    @classmethod
    def create_team_discussion(
        cls, input: CreateTeamDiscussionInput
    ) -> CreateTeamDiscussionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateTeamDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateTeamDiscussionPayloadFields(
            field_name="createTeamDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def create_team_discussion_comment(
        cls, input: CreateTeamDiscussionCommentInput
    ) -> CreateTeamDiscussionCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateTeamDiscussionCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateTeamDiscussionCommentPayloadFields(
            field_name="createTeamDiscussionComment", arguments=cleared_arguments
        )

    @classmethod
    def create_user_list(
        cls, input: CreateUserListInput
    ) -> CreateUserListPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateUserListInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateUserListPayloadFields(
            field_name="createUserList", arguments=cleared_arguments
        )

    @classmethod
    def decline_topic_suggestion(
        cls, input: DeclineTopicSuggestionInput
    ) -> DeclineTopicSuggestionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeclineTopicSuggestionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeclineTopicSuggestionPayloadFields(
            field_name="declineTopicSuggestion", arguments=cleared_arguments
        )

    @classmethod
    def delete_branch_protection_rule(
        cls, input: DeleteBranchProtectionRuleInput
    ) -> DeleteBranchProtectionRulePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteBranchProtectionRuleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteBranchProtectionRulePayloadFields(
            field_name="deleteBranchProtectionRule", arguments=cleared_arguments
        )

    @classmethod
    def delete_deployment(
        cls, input: DeleteDeploymentInput
    ) -> DeleteDeploymentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteDeploymentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteDeploymentPayloadFields(
            field_name="deleteDeployment", arguments=cleared_arguments
        )

    @classmethod
    def delete_discussion(
        cls, input: DeleteDiscussionInput
    ) -> DeleteDiscussionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteDiscussionPayloadFields(
            field_name="deleteDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def delete_discussion_comment(
        cls, input: DeleteDiscussionCommentInput
    ) -> DeleteDiscussionCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteDiscussionCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteDiscussionCommentPayloadFields(
            field_name="deleteDiscussionComment", arguments=cleared_arguments
        )

    @classmethod
    def delete_environment(
        cls, input: DeleteEnvironmentInput
    ) -> DeleteEnvironmentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteEnvironmentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteEnvironmentPayloadFields(
            field_name="deleteEnvironment", arguments=cleared_arguments
        )

    @classmethod
    def delete_ip_allow_list_entry(
        cls, input: DeleteIpAllowListEntryInput
    ) -> DeleteIpAllowListEntryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteIpAllowListEntryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteIpAllowListEntryPayloadFields(
            field_name="deleteIpAllowListEntry", arguments=cleared_arguments
        )

    @classmethod
    def delete_issue(cls, input: DeleteIssueInput) -> DeleteIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteIssuePayloadFields(
            field_name="deleteIssue", arguments=cleared_arguments
        )

    @classmethod
    def delete_issue_comment(
        cls, input: DeleteIssueCommentInput
    ) -> DeleteIssueCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteIssueCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteIssueCommentPayloadFields(
            field_name="deleteIssueComment", arguments=cleared_arguments
        )

    @classmethod
    def delete_issue_type(
        cls, input: DeleteIssueTypeInput
    ) -> DeleteIssueTypePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteIssueTypeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteIssueTypePayloadFields(
            field_name="deleteIssueType", arguments=cleared_arguments
        )

    @classmethod
    def delete_label(cls, input: DeleteLabelInput) -> DeleteLabelPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteLabelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteLabelPayloadFields(
            field_name="deleteLabel", arguments=cleared_arguments
        )

    @classmethod
    def delete_linked_branch(
        cls, input: DeleteLinkedBranchInput
    ) -> DeleteLinkedBranchPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteLinkedBranchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteLinkedBranchPayloadFields(
            field_name="deleteLinkedBranch", arguments=cleared_arguments
        )

    @classmethod
    def delete_package_version(
        cls, input: DeletePackageVersionInput
    ) -> DeletePackageVersionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeletePackageVersionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletePackageVersionPayloadFields(
            field_name="deletePackageVersion", arguments=cleared_arguments
        )

    @classmethod
    def delete_project(cls, input: DeleteProjectInput) -> DeleteProjectPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteProjectInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectPayloadFields(
            field_name="deleteProject", arguments=cleared_arguments
        )

    @classmethod
    def delete_project_card(
        cls, input: DeleteProjectCardInput
    ) -> DeleteProjectCardPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteProjectCardInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectCardPayloadFields(
            field_name="deleteProjectCard", arguments=cleared_arguments
        )

    @classmethod
    def delete_project_column(
        cls, input: DeleteProjectColumnInput
    ) -> DeleteProjectColumnPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteProjectColumnInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectColumnPayloadFields(
            field_name="deleteProjectColumn", arguments=cleared_arguments
        )

    @classmethod
    def delete_project_v_2(
        cls, input: DeleteProjectV2Input
    ) -> DeleteProjectV2PayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteProjectV2Input!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectV2PayloadFields(
            field_name="deleteProjectV2", arguments=cleared_arguments
        )

    @classmethod
    def delete_project_v_2_field(
        cls, input: DeleteProjectV2FieldInput
    ) -> DeleteProjectV2FieldPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteProjectV2FieldInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectV2FieldPayloadFields(
            field_name="deleteProjectV2Field", arguments=cleared_arguments
        )

    @classmethod
    def delete_project_v_2_item(
        cls, input: DeleteProjectV2ItemInput
    ) -> DeleteProjectV2ItemPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteProjectV2ItemInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectV2ItemPayloadFields(
            field_name="deleteProjectV2Item", arguments=cleared_arguments
        )

    @classmethod
    def delete_project_v_2_status_update(
        cls, input: DeleteProjectV2StatusUpdateInput
    ) -> DeleteProjectV2StatusUpdatePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteProjectV2StatusUpdateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectV2StatusUpdatePayloadFields(
            field_name="deleteProjectV2StatusUpdate", arguments=cleared_arguments
        )

    @classmethod
    def delete_project_v_2_workflow(
        cls, input: DeleteProjectV2WorkflowInput
    ) -> DeleteProjectV2WorkflowPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteProjectV2WorkflowInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectV2WorkflowPayloadFields(
            field_name="deleteProjectV2Workflow", arguments=cleared_arguments
        )

    @classmethod
    def delete_pull_request_review(
        cls, input: DeletePullRequestReviewInput
    ) -> DeletePullRequestReviewPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeletePullRequestReviewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletePullRequestReviewPayloadFields(
            field_name="deletePullRequestReview", arguments=cleared_arguments
        )

    @classmethod
    def delete_pull_request_review_comment(
        cls, input: DeletePullRequestReviewCommentInput
    ) -> DeletePullRequestReviewCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeletePullRequestReviewCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeletePullRequestReviewCommentPayloadFields(
            field_name="deletePullRequestReviewComment", arguments=cleared_arguments
        )

    @classmethod
    def delete_ref(cls, input: DeleteRefInput) -> DeleteRefPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteRefInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteRefPayloadFields(
            field_name="deleteRef", arguments=cleared_arguments
        )

    @classmethod
    def delete_repository_ruleset(
        cls, input: DeleteRepositoryRulesetInput
    ) -> DeleteRepositoryRulesetPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteRepositoryRulesetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteRepositoryRulesetPayloadFields(
            field_name="deleteRepositoryRuleset", arguments=cleared_arguments
        )

    @classmethod
    def delete_team_discussion(
        cls, input: DeleteTeamDiscussionInput
    ) -> DeleteTeamDiscussionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteTeamDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteTeamDiscussionPayloadFields(
            field_name="deleteTeamDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def delete_team_discussion_comment(
        cls, input: DeleteTeamDiscussionCommentInput
    ) -> DeleteTeamDiscussionCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteTeamDiscussionCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteTeamDiscussionCommentPayloadFields(
            field_name="deleteTeamDiscussionComment", arguments=cleared_arguments
        )

    @classmethod
    def delete_user_list(
        cls, input: DeleteUserListInput
    ) -> DeleteUserListPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteUserListInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteUserListPayloadFields(
            field_name="deleteUserList", arguments=cleared_arguments
        )

    @classmethod
    def delete_verifiable_domain(
        cls, input: DeleteVerifiableDomainInput
    ) -> DeleteVerifiableDomainPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteVerifiableDomainInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteVerifiableDomainPayloadFields(
            field_name="deleteVerifiableDomain", arguments=cleared_arguments
        )

    @classmethod
    def dequeue_pull_request(
        cls, input: DequeuePullRequestInput
    ) -> DequeuePullRequestPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DequeuePullRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DequeuePullRequestPayloadFields(
            field_name="dequeuePullRequest", arguments=cleared_arguments
        )

    @classmethod
    def disable_pull_request_auto_merge(
        cls, input: DisablePullRequestAutoMergeInput
    ) -> DisablePullRequestAutoMergePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DisablePullRequestAutoMergeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DisablePullRequestAutoMergePayloadFields(
            field_name="disablePullRequestAutoMerge", arguments=cleared_arguments
        )

    @classmethod
    def dismiss_pull_request_review(
        cls, input: DismissPullRequestReviewInput
    ) -> DismissPullRequestReviewPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DismissPullRequestReviewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DismissPullRequestReviewPayloadFields(
            field_name="dismissPullRequestReview", arguments=cleared_arguments
        )

    @classmethod
    def dismiss_repository_vulnerability_alert(
        cls, input: DismissRepositoryVulnerabilityAlertInput
    ) -> DismissRepositoryVulnerabilityAlertPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "DismissRepositoryVulnerabilityAlertInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DismissRepositoryVulnerabilityAlertPayloadFields(
            field_name="dismissRepositoryVulnerabilityAlert",
            arguments=cleared_arguments,
        )

    @classmethod
    def enable_pull_request_auto_merge(
        cls, input: EnablePullRequestAutoMergeInput
    ) -> EnablePullRequestAutoMergePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "EnablePullRequestAutoMergeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnablePullRequestAutoMergePayloadFields(
            field_name="enablePullRequestAutoMerge", arguments=cleared_arguments
        )

    @classmethod
    def enqueue_pull_request(
        cls, input: EnqueuePullRequestInput
    ) -> EnqueuePullRequestPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "EnqueuePullRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnqueuePullRequestPayloadFields(
            field_name="enqueuePullRequest", arguments=cleared_arguments
        )

    @classmethod
    def follow_organization(
        cls, input: FollowOrganizationInput
    ) -> FollowOrganizationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "FollowOrganizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FollowOrganizationPayloadFields(
            field_name="followOrganization", arguments=cleared_arguments
        )

    @classmethod
    def follow_user(cls, input: FollowUserInput) -> FollowUserPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "FollowUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FollowUserPayloadFields(
            field_name="followUser", arguments=cleared_arguments
        )

    @classmethod
    def grant_enterprise_organizations_migrator_role(
        cls, input: GrantEnterpriseOrganizationsMigratorRoleInput
    ) -> GrantEnterpriseOrganizationsMigratorRolePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "GrantEnterpriseOrganizationsMigratorRoleInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GrantEnterpriseOrganizationsMigratorRolePayloadFields(
            field_name="grantEnterpriseOrganizationsMigratorRole",
            arguments=cleared_arguments,
        )

    @classmethod
    def grant_migrator_role(
        cls, input: GrantMigratorRoleInput
    ) -> GrantMigratorRolePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "GrantMigratorRoleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GrantMigratorRolePayloadFields(
            field_name="grantMigratorRole", arguments=cleared_arguments
        )

    @classmethod
    def import_project(cls, input: ImportProjectInput) -> ImportProjectPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ImportProjectInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ImportProjectPayloadFields(
            field_name="importProject", arguments=cleared_arguments
        )

    @classmethod
    def invite_enterprise_admin(
        cls, input: InviteEnterpriseAdminInput
    ) -> InviteEnterpriseAdminPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "InviteEnterpriseAdminInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InviteEnterpriseAdminPayloadFields(
            field_name="inviteEnterpriseAdmin", arguments=cleared_arguments
        )

    @classmethod
    def invite_enterprise_member(
        cls, input: InviteEnterpriseMemberInput
    ) -> InviteEnterpriseMemberPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "InviteEnterpriseMemberInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InviteEnterpriseMemberPayloadFields(
            field_name="inviteEnterpriseMember", arguments=cleared_arguments
        )

    @classmethod
    def link_project_v_2_to_repository(
        cls, input: LinkProjectV2ToRepositoryInput
    ) -> LinkProjectV2ToRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "LinkProjectV2ToRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LinkProjectV2ToRepositoryPayloadFields(
            field_name="linkProjectV2ToRepository", arguments=cleared_arguments
        )

    @classmethod
    def link_project_v_2_to_team(
        cls, input: LinkProjectV2ToTeamInput
    ) -> LinkProjectV2ToTeamPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "LinkProjectV2ToTeamInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LinkProjectV2ToTeamPayloadFields(
            field_name="linkProjectV2ToTeam", arguments=cleared_arguments
        )

    @classmethod
    def link_repository_to_project(
        cls, input: LinkRepositoryToProjectInput
    ) -> LinkRepositoryToProjectPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "LinkRepositoryToProjectInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LinkRepositoryToProjectPayloadFields(
            field_name="linkRepositoryToProject", arguments=cleared_arguments
        )

    @classmethod
    def lock_lockable(cls, input: LockLockableInput) -> LockLockablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "LockLockableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LockLockablePayloadFields(
            field_name="lockLockable", arguments=cleared_arguments
        )

    @classmethod
    def mark_discussion_comment_as_answer(
        cls, input: MarkDiscussionCommentAsAnswerInput
    ) -> MarkDiscussionCommentAsAnswerPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MarkDiscussionCommentAsAnswerInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarkDiscussionCommentAsAnswerPayloadFields(
            field_name="markDiscussionCommentAsAnswer", arguments=cleared_arguments
        )

    @classmethod
    def mark_file_as_viewed(
        cls, input: MarkFileAsViewedInput
    ) -> MarkFileAsViewedPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MarkFileAsViewedInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarkFileAsViewedPayloadFields(
            field_name="markFileAsViewed", arguments=cleared_arguments
        )

    @classmethod
    def mark_project_v_2_as_template(
        cls, input: MarkProjectV2AsTemplateInput
    ) -> MarkProjectV2AsTemplatePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MarkProjectV2AsTemplateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarkProjectV2AsTemplatePayloadFields(
            field_name="markProjectV2AsTemplate", arguments=cleared_arguments
        )

    @classmethod
    def mark_pull_request_ready_for_review(
        cls, input: MarkPullRequestReadyForReviewInput
    ) -> MarkPullRequestReadyForReviewPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MarkPullRequestReadyForReviewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarkPullRequestReadyForReviewPayloadFields(
            field_name="markPullRequestReadyForReview", arguments=cleared_arguments
        )

    @classmethod
    def merge_branch(cls, input: MergeBranchInput) -> MergeBranchPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MergeBranchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MergeBranchPayloadFields(
            field_name="mergeBranch", arguments=cleared_arguments
        )

    @classmethod
    def merge_pull_request(
        cls, input: MergePullRequestInput
    ) -> MergePullRequestPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MergePullRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MergePullRequestPayloadFields(
            field_name="mergePullRequest", arguments=cleared_arguments
        )

    @classmethod
    def minimize_comment(
        cls, input: MinimizeCommentInput
    ) -> MinimizeCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MinimizeCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MinimizeCommentPayloadFields(
            field_name="minimizeComment", arguments=cleared_arguments
        )

    @classmethod
    def move_project_card(
        cls, input: MoveProjectCardInput
    ) -> MoveProjectCardPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MoveProjectCardInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MoveProjectCardPayloadFields(
            field_name="moveProjectCard", arguments=cleared_arguments
        )

    @classmethod
    def move_project_column(
        cls, input: MoveProjectColumnInput
    ) -> MoveProjectColumnPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MoveProjectColumnInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MoveProjectColumnPayloadFields(
            field_name="moveProjectColumn", arguments=cleared_arguments
        )

    @classmethod
    def pin_environment(cls, input: PinEnvironmentInput) -> PinEnvironmentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PinEnvironmentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinEnvironmentPayloadFields(
            field_name="pinEnvironment", arguments=cleared_arguments
        )

    @classmethod
    def pin_issue(cls, input: PinIssueInput) -> PinIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PinIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinIssuePayloadFields(field_name="pinIssue", arguments=cleared_arguments)

    @classmethod
    def publish_sponsors_tier(
        cls, input: PublishSponsorsTierInput
    ) -> PublishSponsorsTierPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PublishSponsorsTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishSponsorsTierPayloadFields(
            field_name="publishSponsorsTier", arguments=cleared_arguments
        )

    @classmethod
    def regenerate_enterprise_identity_provider_recovery_codes(
        cls, input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput
    ) -> RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "RegenerateEnterpriseIdentityProviderRecoveryCodesInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields(
            field_name="regenerateEnterpriseIdentityProviderRecoveryCodes",
            arguments=cleared_arguments,
        )

    @classmethod
    def regenerate_verifiable_domain_token(
        cls, input: RegenerateVerifiableDomainTokenInput
    ) -> RegenerateVerifiableDomainTokenPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RegenerateVerifiableDomainTokenInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RegenerateVerifiableDomainTokenPayloadFields(
            field_name="regenerateVerifiableDomainToken", arguments=cleared_arguments
        )

    @classmethod
    def reject_deployments(
        cls, input: RejectDeploymentsInput
    ) -> RejectDeploymentsPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RejectDeploymentsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RejectDeploymentsPayloadFields(
            field_name="rejectDeployments", arguments=cleared_arguments
        )

    @classmethod
    def remove_assignees_from_assignable(
        cls, input: RemoveAssigneesFromAssignableInput
    ) -> RemoveAssigneesFromAssignablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveAssigneesFromAssignableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveAssigneesFromAssignablePayloadFields(
            field_name="removeAssigneesFromAssignable", arguments=cleared_arguments
        )

    @classmethod
    def remove_enterprise_admin(
        cls, input: RemoveEnterpriseAdminInput
    ) -> RemoveEnterpriseAdminPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveEnterpriseAdminInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveEnterpriseAdminPayloadFields(
            field_name="removeEnterpriseAdmin", arguments=cleared_arguments
        )

    @classmethod
    def remove_enterprise_identity_provider(
        cls, input: RemoveEnterpriseIdentityProviderInput
    ) -> RemoveEnterpriseIdentityProviderPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveEnterpriseIdentityProviderInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveEnterpriseIdentityProviderPayloadFields(
            field_name="removeEnterpriseIdentityProvider", arguments=cleared_arguments
        )

    @classmethod
    def remove_enterprise_member(
        cls, input: RemoveEnterpriseMemberInput
    ) -> RemoveEnterpriseMemberPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveEnterpriseMemberInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveEnterpriseMemberPayloadFields(
            field_name="removeEnterpriseMember", arguments=cleared_arguments
        )

    @classmethod
    def remove_enterprise_organization(
        cls, input: RemoveEnterpriseOrganizationInput
    ) -> RemoveEnterpriseOrganizationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveEnterpriseOrganizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveEnterpriseOrganizationPayloadFields(
            field_name="removeEnterpriseOrganization", arguments=cleared_arguments
        )

    @classmethod
    def remove_enterprise_support_entitlement(
        cls, input: RemoveEnterpriseSupportEntitlementInput
    ) -> RemoveEnterpriseSupportEntitlementPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "RemoveEnterpriseSupportEntitlementInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveEnterpriseSupportEntitlementPayloadFields(
            field_name="removeEnterpriseSupportEntitlement", arguments=cleared_arguments
        )

    @classmethod
    def remove_labels_from_labelable(
        cls, input: RemoveLabelsFromLabelableInput
    ) -> RemoveLabelsFromLabelablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveLabelsFromLabelableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveLabelsFromLabelablePayloadFields(
            field_name="removeLabelsFromLabelable", arguments=cleared_arguments
        )

    @classmethod
    def remove_outside_collaborator(
        cls, input: RemoveOutsideCollaboratorInput
    ) -> RemoveOutsideCollaboratorPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveOutsideCollaboratorInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveOutsideCollaboratorPayloadFields(
            field_name="removeOutsideCollaborator", arguments=cleared_arguments
        )

    @classmethod
    def remove_reaction(cls, input: RemoveReactionInput) -> RemoveReactionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveReactionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveReactionPayloadFields(
            field_name="removeReaction", arguments=cleared_arguments
        )

    @classmethod
    def remove_star(cls, input: RemoveStarInput) -> RemoveStarPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveStarInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveStarPayloadFields(
            field_name="removeStar", arguments=cleared_arguments
        )

    @classmethod
    def remove_sub_issue(
        cls, input: RemoveSubIssueInput
    ) -> RemoveSubIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveSubIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveSubIssuePayloadFields(
            field_name="removeSubIssue", arguments=cleared_arguments
        )

    @classmethod
    def remove_upvote(cls, input: RemoveUpvoteInput) -> RemoveUpvotePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveUpvoteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveUpvotePayloadFields(
            field_name="removeUpvote", arguments=cleared_arguments
        )

    @classmethod
    def reopen_discussion(
        cls, input: ReopenDiscussionInput
    ) -> ReopenDiscussionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReopenDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReopenDiscussionPayloadFields(
            field_name="reopenDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def reopen_issue(cls, input: ReopenIssueInput) -> ReopenIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReopenIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReopenIssuePayloadFields(
            field_name="reopenIssue", arguments=cleared_arguments
        )

    @classmethod
    def reopen_pull_request(
        cls, input: ReopenPullRequestInput
    ) -> ReopenPullRequestPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReopenPullRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReopenPullRequestPayloadFields(
            field_name="reopenPullRequest", arguments=cleared_arguments
        )

    @classmethod
    def reorder_environment(
        cls, input: ReorderEnvironmentInput
    ) -> ReorderEnvironmentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReorderEnvironmentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReorderEnvironmentPayloadFields(
            field_name="reorderEnvironment", arguments=cleared_arguments
        )

    @classmethod
    def replace_actors_for_assignable(
        cls, input: ReplaceActorsForAssignableInput
    ) -> ReplaceActorsForAssignablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReplaceActorsForAssignableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReplaceActorsForAssignablePayloadFields(
            field_name="replaceActorsForAssignable", arguments=cleared_arguments
        )

    @classmethod
    def reprioritize_sub_issue(
        cls, input: ReprioritizeSubIssueInput
    ) -> ReprioritizeSubIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReprioritizeSubIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReprioritizeSubIssuePayloadFields(
            field_name="reprioritizeSubIssue", arguments=cleared_arguments
        )

    @classmethod
    def request_reviews(cls, input: RequestReviewsInput) -> RequestReviewsPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RequestReviewsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RequestReviewsPayloadFields(
            field_name="requestReviews", arguments=cleared_arguments
        )

    @classmethod
    def rerequest_check_suite(
        cls, input: RerequestCheckSuiteInput
    ) -> RerequestCheckSuitePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RerequestCheckSuiteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RerequestCheckSuitePayloadFields(
            field_name="rerequestCheckSuite", arguments=cleared_arguments
        )

    @classmethod
    def resolve_review_thread(
        cls, input: ResolveReviewThreadInput
    ) -> ResolveReviewThreadPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ResolveReviewThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ResolveReviewThreadPayloadFields(
            field_name="resolveReviewThread", arguments=cleared_arguments
        )

    @classmethod
    def retire_sponsors_tier(
        cls, input: RetireSponsorsTierInput
    ) -> RetireSponsorsTierPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RetireSponsorsTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RetireSponsorsTierPayloadFields(
            field_name="retireSponsorsTier", arguments=cleared_arguments
        )

    @classmethod
    def revert_pull_request(
        cls, input: RevertPullRequestInput
    ) -> RevertPullRequestPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RevertPullRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RevertPullRequestPayloadFields(
            field_name="revertPullRequest", arguments=cleared_arguments
        )

    @classmethod
    def revoke_enterprise_organizations_migrator_role(
        cls, input: RevokeEnterpriseOrganizationsMigratorRoleInput
    ) -> RevokeEnterpriseOrganizationsMigratorRolePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "RevokeEnterpriseOrganizationsMigratorRoleInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RevokeEnterpriseOrganizationsMigratorRolePayloadFields(
            field_name="revokeEnterpriseOrganizationsMigratorRole",
            arguments=cleared_arguments,
        )

    @classmethod
    def revoke_migrator_role(
        cls, input: RevokeMigratorRoleInput
    ) -> RevokeMigratorRolePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RevokeMigratorRoleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RevokeMigratorRolePayloadFields(
            field_name="revokeMigratorRole", arguments=cleared_arguments
        )

    @classmethod
    def set_enterprise_identity_provider(
        cls, input: SetEnterpriseIdentityProviderInput
    ) -> SetEnterpriseIdentityProviderPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SetEnterpriseIdentityProviderInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetEnterpriseIdentityProviderPayloadFields(
            field_name="setEnterpriseIdentityProvider", arguments=cleared_arguments
        )

    @classmethod
    def set_organization_interaction_limit(
        cls, input: SetOrganizationInteractionLimitInput
    ) -> SetOrganizationInteractionLimitPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SetOrganizationInteractionLimitInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetOrganizationInteractionLimitPayloadFields(
            field_name="setOrganizationInteractionLimit", arguments=cleared_arguments
        )

    @classmethod
    def set_repository_interaction_limit(
        cls, input: SetRepositoryInteractionLimitInput
    ) -> SetRepositoryInteractionLimitPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SetRepositoryInteractionLimitInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetRepositoryInteractionLimitPayloadFields(
            field_name="setRepositoryInteractionLimit", arguments=cleared_arguments
        )

    @classmethod
    def set_user_interaction_limit(
        cls, input: SetUserInteractionLimitInput
    ) -> SetUserInteractionLimitPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SetUserInteractionLimitInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetUserInteractionLimitPayloadFields(
            field_name="setUserInteractionLimit", arguments=cleared_arguments
        )

    @classmethod
    def start_organization_migration(
        cls, input: StartOrganizationMigrationInput
    ) -> StartOrganizationMigrationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "StartOrganizationMigrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StartOrganizationMigrationPayloadFields(
            field_name="startOrganizationMigration", arguments=cleared_arguments
        )

    @classmethod
    def start_repository_migration(
        cls, input: StartRepositoryMigrationInput
    ) -> StartRepositoryMigrationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "StartRepositoryMigrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StartRepositoryMigrationPayloadFields(
            field_name="startRepositoryMigration", arguments=cleared_arguments
        )

    @classmethod
    def submit_pull_request_review(
        cls, input: SubmitPullRequestReviewInput
    ) -> SubmitPullRequestReviewPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SubmitPullRequestReviewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SubmitPullRequestReviewPayloadFields(
            field_name="submitPullRequestReview", arguments=cleared_arguments
        )

    @classmethod
    def transfer_enterprise_organization(
        cls, input: TransferEnterpriseOrganizationInput
    ) -> TransferEnterpriseOrganizationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "TransferEnterpriseOrganizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TransferEnterpriseOrganizationPayloadFields(
            field_name="transferEnterpriseOrganization", arguments=cleared_arguments
        )

    @classmethod
    def transfer_issue(cls, input: TransferIssueInput) -> TransferIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "TransferIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TransferIssuePayloadFields(
            field_name="transferIssue", arguments=cleared_arguments
        )

    @classmethod
    def unarchive_project_v_2_item(
        cls, input: UnarchiveProjectV2ItemInput
    ) -> UnarchiveProjectV2ItemPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnarchiveProjectV2ItemInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnarchiveProjectV2ItemPayloadFields(
            field_name="unarchiveProjectV2Item", arguments=cleared_arguments
        )

    @classmethod
    def unarchive_repository(
        cls, input: UnarchiveRepositoryInput
    ) -> UnarchiveRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnarchiveRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnarchiveRepositoryPayloadFields(
            field_name="unarchiveRepository", arguments=cleared_arguments
        )

    @classmethod
    def unfollow_organization(
        cls, input: UnfollowOrganizationInput
    ) -> UnfollowOrganizationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnfollowOrganizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnfollowOrganizationPayloadFields(
            field_name="unfollowOrganization", arguments=cleared_arguments
        )

    @classmethod
    def unfollow_user(cls, input: UnfollowUserInput) -> UnfollowUserPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnfollowUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnfollowUserPayloadFields(
            field_name="unfollowUser", arguments=cleared_arguments
        )

    @classmethod
    def unlink_project_v_2_from_repository(
        cls, input: UnlinkProjectV2FromRepositoryInput
    ) -> UnlinkProjectV2FromRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnlinkProjectV2FromRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnlinkProjectV2FromRepositoryPayloadFields(
            field_name="unlinkProjectV2FromRepository", arguments=cleared_arguments
        )

    @classmethod
    def unlink_project_v_2_from_team(
        cls, input: UnlinkProjectV2FromTeamInput
    ) -> UnlinkProjectV2FromTeamPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnlinkProjectV2FromTeamInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnlinkProjectV2FromTeamPayloadFields(
            field_name="unlinkProjectV2FromTeam", arguments=cleared_arguments
        )

    @classmethod
    def unlink_repository_from_project(
        cls, input: UnlinkRepositoryFromProjectInput
    ) -> UnlinkRepositoryFromProjectPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnlinkRepositoryFromProjectInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnlinkRepositoryFromProjectPayloadFields(
            field_name="unlinkRepositoryFromProject", arguments=cleared_arguments
        )

    @classmethod
    def unlock_lockable(cls, input: UnlockLockableInput) -> UnlockLockablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnlockLockableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnlockLockablePayloadFields(
            field_name="unlockLockable", arguments=cleared_arguments
        )

    @classmethod
    def unmark_discussion_comment_as_answer(
        cls, input: UnmarkDiscussionCommentAsAnswerInput
    ) -> UnmarkDiscussionCommentAsAnswerPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnmarkDiscussionCommentAsAnswerInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnmarkDiscussionCommentAsAnswerPayloadFields(
            field_name="unmarkDiscussionCommentAsAnswer", arguments=cleared_arguments
        )

    @classmethod
    def unmark_file_as_viewed(
        cls, input: UnmarkFileAsViewedInput
    ) -> UnmarkFileAsViewedPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnmarkFileAsViewedInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnmarkFileAsViewedPayloadFields(
            field_name="unmarkFileAsViewed", arguments=cleared_arguments
        )

    @classmethod
    def unmark_issue_as_duplicate(
        cls, input: UnmarkIssueAsDuplicateInput
    ) -> UnmarkIssueAsDuplicatePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnmarkIssueAsDuplicateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnmarkIssueAsDuplicatePayloadFields(
            field_name="unmarkIssueAsDuplicate", arguments=cleared_arguments
        )

    @classmethod
    def unmark_project_v_2_as_template(
        cls, input: UnmarkProjectV2AsTemplateInput
    ) -> UnmarkProjectV2AsTemplatePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnmarkProjectV2AsTemplateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnmarkProjectV2AsTemplatePayloadFields(
            field_name="unmarkProjectV2AsTemplate", arguments=cleared_arguments
        )

    @classmethod
    def unminimize_comment(
        cls, input: UnminimizeCommentInput
    ) -> UnminimizeCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnminimizeCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnminimizeCommentPayloadFields(
            field_name="unminimizeComment", arguments=cleared_arguments
        )

    @classmethod
    def unpin_issue(cls, input: UnpinIssueInput) -> UnpinIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnpinIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnpinIssuePayloadFields(
            field_name="unpinIssue", arguments=cleared_arguments
        )

    @classmethod
    def unresolve_review_thread(
        cls, input: UnresolveReviewThreadInput
    ) -> UnresolveReviewThreadPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnresolveReviewThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnresolveReviewThreadPayloadFields(
            field_name="unresolveReviewThread", arguments=cleared_arguments
        )

    @classmethod
    def update_branch_protection_rule(
        cls, input: UpdateBranchProtectionRuleInput
    ) -> UpdateBranchProtectionRulePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateBranchProtectionRuleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateBranchProtectionRulePayloadFields(
            field_name="updateBranchProtectionRule", arguments=cleared_arguments
        )

    @classmethod
    def update_check_run(
        cls, input: UpdateCheckRunInput
    ) -> UpdateCheckRunPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateCheckRunInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateCheckRunPayloadFields(
            field_name="updateCheckRun", arguments=cleared_arguments
        )

    @classmethod
    def update_check_suite_preferences(
        cls, input: UpdateCheckSuitePreferencesInput
    ) -> UpdateCheckSuitePreferencesPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateCheckSuitePreferencesInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateCheckSuitePreferencesPayloadFields(
            field_name="updateCheckSuitePreferences", arguments=cleared_arguments
        )

    @classmethod
    def update_discussion(
        cls, input: UpdateDiscussionInput
    ) -> UpdateDiscussionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateDiscussionPayloadFields(
            field_name="updateDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def update_discussion_comment(
        cls, input: UpdateDiscussionCommentInput
    ) -> UpdateDiscussionCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateDiscussionCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateDiscussionCommentPayloadFields(
            field_name="updateDiscussionComment", arguments=cleared_arguments
        )

    @classmethod
    def update_enterprise_administrator_role(
        cls, input: UpdateEnterpriseAdministratorRoleInput
    ) -> UpdateEnterpriseAdministratorRolePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateEnterpriseAdministratorRoleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseAdministratorRolePayloadFields(
            field_name="updateEnterpriseAdministratorRole", arguments=cleared_arguments
        )

    @classmethod
    def update_enterprise_allow_private_repository_forking_setting(
        cls, input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
    ) -> UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields(
            field_name="updateEnterpriseAllowPrivateRepositoryForkingSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_default_repository_permission_setting(
        cls, input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput
    ) -> UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseDefaultRepositoryPermissionSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields(
            field_name="updateEnterpriseDefaultRepositoryPermissionSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_deploy_key_setting(
        cls, input: UpdateEnterpriseDeployKeySettingInput
    ) -> UpdateEnterpriseDeployKeySettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateEnterpriseDeployKeySettingInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseDeployKeySettingPayloadFields(
            field_name="updateEnterpriseDeployKeySetting", arguments=cleared_arguments
        )

    @classmethod
    def update_enterprise_members_can_change_repository_visibility_setting(
        cls, input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
    ) -> UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields(
            field_name="updateEnterpriseMembersCanChangeRepositoryVisibilitySetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_members_can_create_repositories_setting(
        cls, input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput
    ) -> UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields(
            field_name="updateEnterpriseMembersCanCreateRepositoriesSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_members_can_delete_issues_setting(
        cls, input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput
    ) -> UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseMembersCanDeleteIssuesSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields(
            field_name="updateEnterpriseMembersCanDeleteIssuesSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_members_can_delete_repositories_setting(
        cls, input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput
    ) -> UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields(
            field_name="updateEnterpriseMembersCanDeleteRepositoriesSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_members_can_invite_collaborators_setting(
        cls, input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
    ) -> UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields(
            field_name="updateEnterpriseMembersCanInviteCollaboratorsSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_members_can_make_purchases_setting(
        cls, input: UpdateEnterpriseMembersCanMakePurchasesSettingInput
    ) -> UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseMembersCanMakePurchasesSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields(
            field_name="updateEnterpriseMembersCanMakePurchasesSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_members_can_update_protected_branches_setting(
        cls, input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
    ) -> UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields(
            field_name="updateEnterpriseMembersCanUpdateProtectedBranchesSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_members_can_view_dependency_insights_setting(
        cls, input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
    ) -> UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields(
            field_name="updateEnterpriseMembersCanViewDependencyInsightsSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_organization_projects_setting(
        cls, input: UpdateEnterpriseOrganizationProjectsSettingInput
    ) -> UpdateEnterpriseOrganizationProjectsSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseOrganizationProjectsSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseOrganizationProjectsSettingPayloadFields(
            field_name="updateEnterpriseOrganizationProjectsSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_owner_organization_role(
        cls, input: UpdateEnterpriseOwnerOrganizationRoleInput
    ) -> UpdateEnterpriseOwnerOrganizationRolePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseOwnerOrganizationRoleInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseOwnerOrganizationRolePayloadFields(
            field_name="updateEnterpriseOwnerOrganizationRole",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_profile(
        cls, input: UpdateEnterpriseProfileInput
    ) -> UpdateEnterpriseProfilePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateEnterpriseProfileInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseProfilePayloadFields(
            field_name="updateEnterpriseProfile", arguments=cleared_arguments
        )

    @classmethod
    def update_enterprise_repository_projects_setting(
        cls, input: UpdateEnterpriseRepositoryProjectsSettingInput
    ) -> UpdateEnterpriseRepositoryProjectsSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseRepositoryProjectsSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseRepositoryProjectsSettingPayloadFields(
            field_name="updateEnterpriseRepositoryProjectsSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_team_discussions_setting(
        cls, input: UpdateEnterpriseTeamDiscussionsSettingInput
    ) -> UpdateEnterpriseTeamDiscussionsSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseTeamDiscussionsSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseTeamDiscussionsSettingPayloadFields(
            field_name="updateEnterpriseTeamDiscussionsSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_two_factor_authentication_disallowed_methods_setting(
        cls, input: UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput
    ) -> UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields(
            field_name="updateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_enterprise_two_factor_authentication_required_setting(
        cls, input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
    ) -> UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields(
            field_name="updateEnterpriseTwoFactorAuthenticationRequiredSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_environment(
        cls, input: UpdateEnvironmentInput
    ) -> UpdateEnvironmentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateEnvironmentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateEnvironmentPayloadFields(
            field_name="updateEnvironment", arguments=cleared_arguments
        )

    @classmethod
    def update_ip_allow_list_enabled_setting(
        cls, input: UpdateIpAllowListEnabledSettingInput
    ) -> UpdateIpAllowListEnabledSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateIpAllowListEnabledSettingInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateIpAllowListEnabledSettingPayloadFields(
            field_name="updateIpAllowListEnabledSetting", arguments=cleared_arguments
        )

    @classmethod
    def update_ip_allow_list_entry(
        cls, input: UpdateIpAllowListEntryInput
    ) -> UpdateIpAllowListEntryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateIpAllowListEntryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateIpAllowListEntryPayloadFields(
            field_name="updateIpAllowListEntry", arguments=cleared_arguments
        )

    @classmethod
    def update_ip_allow_list_for_installed_apps_enabled_setting(
        cls, input: UpdateIpAllowListForInstalledAppsEnabledSettingInput
    ) -> UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateIpAllowListForInstalledAppsEnabledSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields(
            field_name="updateIpAllowListForInstalledAppsEnabledSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_issue(cls, input: UpdateIssueInput) -> UpdateIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateIssuePayloadFields(
            field_name="updateIssue", arguments=cleared_arguments
        )

    @classmethod
    def update_issue_comment(
        cls, input: UpdateIssueCommentInput
    ) -> UpdateIssueCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateIssueCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateIssueCommentPayloadFields(
            field_name="updateIssueComment", arguments=cleared_arguments
        )

    @classmethod
    def update_issue_issue_type(
        cls, input: UpdateIssueIssueTypeInput
    ) -> UpdateIssueIssueTypePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateIssueIssueTypeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateIssueIssueTypePayloadFields(
            field_name="updateIssueIssueType", arguments=cleared_arguments
        )

    @classmethod
    def update_issue_type(
        cls, input: UpdateIssueTypeInput
    ) -> UpdateIssueTypePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateIssueTypeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateIssueTypePayloadFields(
            field_name="updateIssueType", arguments=cleared_arguments
        )

    @classmethod
    def update_label(cls, input: UpdateLabelInput) -> UpdateLabelPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateLabelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateLabelPayloadFields(
            field_name="updateLabel", arguments=cleared_arguments
        )

    @classmethod
    def update_notification_restriction_setting(
        cls, input: UpdateNotificationRestrictionSettingInput
    ) -> UpdateNotificationRestrictionSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateNotificationRestrictionSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateNotificationRestrictionSettingPayloadFields(
            field_name="updateNotificationRestrictionSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_organization_allow_private_repository_forking_setting(
        cls, input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput
    ) -> UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateOrganizationAllowPrivateRepositoryForkingSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields(
            field_name="updateOrganizationAllowPrivateRepositoryForkingSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_organization_web_commit_signoff_setting(
        cls, input: UpdateOrganizationWebCommitSignoffSettingInput
    ) -> UpdateOrganizationWebCommitSignoffSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateOrganizationWebCommitSignoffSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateOrganizationWebCommitSignoffSettingPayloadFields(
            field_name="updateOrganizationWebCommitSignoffSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_patreon_sponsorability(
        cls, input: UpdatePatreonSponsorabilityInput
    ) -> UpdatePatreonSponsorabilityPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdatePatreonSponsorabilityInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdatePatreonSponsorabilityPayloadFields(
            field_name="updatePatreonSponsorability", arguments=cleared_arguments
        )

    @classmethod
    def update_project(cls, input: UpdateProjectInput) -> UpdateProjectPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectPayloadFields(
            field_name="updateProject", arguments=cleared_arguments
        )

    @classmethod
    def update_project_card(
        cls, input: UpdateProjectCardInput
    ) -> UpdateProjectCardPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectCardInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectCardPayloadFields(
            field_name="updateProjectCard", arguments=cleared_arguments
        )

    @classmethod
    def update_project_column(
        cls, input: UpdateProjectColumnInput
    ) -> UpdateProjectColumnPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectColumnInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectColumnPayloadFields(
            field_name="updateProjectColumn", arguments=cleared_arguments
        )

    @classmethod
    def update_project_v_2(
        cls, input: UpdateProjectV2Input
    ) -> UpdateProjectV2PayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectV2Input!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectV2PayloadFields(
            field_name="updateProjectV2", arguments=cleared_arguments
        )

    @classmethod
    def update_project_v_2_collaborators(
        cls, input: UpdateProjectV2CollaboratorsInput
    ) -> UpdateProjectV2CollaboratorsPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectV2CollaboratorsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectV2CollaboratorsPayloadFields(
            field_name="updateProjectV2Collaborators", arguments=cleared_arguments
        )

    @classmethod
    def update_project_v_2_draft_issue(
        cls, input: UpdateProjectV2DraftIssueInput
    ) -> UpdateProjectV2DraftIssuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectV2DraftIssueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectV2DraftIssuePayloadFields(
            field_name="updateProjectV2DraftIssue", arguments=cleared_arguments
        )

    @classmethod
    def update_project_v_2_field(
        cls, input: UpdateProjectV2FieldInput
    ) -> UpdateProjectV2FieldPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectV2FieldInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectV2FieldPayloadFields(
            field_name="updateProjectV2Field", arguments=cleared_arguments
        )

    @classmethod
    def update_project_v_2_item_field_value(
        cls, input: UpdateProjectV2ItemFieldValueInput
    ) -> UpdateProjectV2ItemFieldValuePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectV2ItemFieldValueInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectV2ItemFieldValuePayloadFields(
            field_name="updateProjectV2ItemFieldValue", arguments=cleared_arguments
        )

    @classmethod
    def update_project_v_2_item_position(
        cls, input: UpdateProjectV2ItemPositionInput
    ) -> UpdateProjectV2ItemPositionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectV2ItemPositionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectV2ItemPositionPayloadFields(
            field_name="updateProjectV2ItemPosition", arguments=cleared_arguments
        )

    @classmethod
    def update_project_v_2_status_update(
        cls, input: UpdateProjectV2StatusUpdateInput
    ) -> UpdateProjectV2StatusUpdatePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateProjectV2StatusUpdateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateProjectV2StatusUpdatePayloadFields(
            field_name="updateProjectV2StatusUpdate", arguments=cleared_arguments
        )

    @classmethod
    def update_pull_request(
        cls, input: UpdatePullRequestInput
    ) -> UpdatePullRequestPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdatePullRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdatePullRequestPayloadFields(
            field_name="updatePullRequest", arguments=cleared_arguments
        )

    @classmethod
    def update_pull_request_branch(
        cls, input: UpdatePullRequestBranchInput
    ) -> UpdatePullRequestBranchPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdatePullRequestBranchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdatePullRequestBranchPayloadFields(
            field_name="updatePullRequestBranch", arguments=cleared_arguments
        )

    @classmethod
    def update_pull_request_review(
        cls, input: UpdatePullRequestReviewInput
    ) -> UpdatePullRequestReviewPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdatePullRequestReviewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdatePullRequestReviewPayloadFields(
            field_name="updatePullRequestReview", arguments=cleared_arguments
        )

    @classmethod
    def update_pull_request_review_comment(
        cls, input: UpdatePullRequestReviewCommentInput
    ) -> UpdatePullRequestReviewCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdatePullRequestReviewCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdatePullRequestReviewCommentPayloadFields(
            field_name="updatePullRequestReviewComment", arguments=cleared_arguments
        )

    @classmethod
    def update_ref(cls, input: UpdateRefInput) -> UpdateRefPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateRefInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateRefPayloadFields(
            field_name="updateRef", arguments=cleared_arguments
        )

    @classmethod
    def update_refs(cls, input: UpdateRefsInput) -> UpdateRefsPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateRefsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateRefsPayloadFields(
            field_name="updateRefs", arguments=cleared_arguments
        )

    @classmethod
    def update_repository(
        cls, input: UpdateRepositoryInput
    ) -> UpdateRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateRepositoryPayloadFields(
            field_name="updateRepository", arguments=cleared_arguments
        )

    @classmethod
    def update_repository_ruleset(
        cls, input: UpdateRepositoryRulesetInput
    ) -> UpdateRepositoryRulesetPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateRepositoryRulesetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateRepositoryRulesetPayloadFields(
            field_name="updateRepositoryRuleset", arguments=cleared_arguments
        )

    @classmethod
    def update_repository_web_commit_signoff_setting(
        cls, input: UpdateRepositoryWebCommitSignoffSettingInput
    ) -> UpdateRepositoryWebCommitSignoffSettingPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "UpdateRepositoryWebCommitSignoffSettingInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateRepositoryWebCommitSignoffSettingPayloadFields(
            field_name="updateRepositoryWebCommitSignoffSetting",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_sponsorship_preferences(
        cls, input: UpdateSponsorshipPreferencesInput
    ) -> UpdateSponsorshipPreferencesPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateSponsorshipPreferencesInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateSponsorshipPreferencesPayloadFields(
            field_name="updateSponsorshipPreferences", arguments=cleared_arguments
        )

    @classmethod
    def update_subscription(
        cls, input: UpdateSubscriptionInput
    ) -> UpdateSubscriptionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateSubscriptionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateSubscriptionPayloadFields(
            field_name="updateSubscription", arguments=cleared_arguments
        )

    @classmethod
    def update_team_discussion(
        cls, input: UpdateTeamDiscussionInput
    ) -> UpdateTeamDiscussionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateTeamDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateTeamDiscussionPayloadFields(
            field_name="updateTeamDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def update_team_discussion_comment(
        cls, input: UpdateTeamDiscussionCommentInput
    ) -> UpdateTeamDiscussionCommentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateTeamDiscussionCommentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateTeamDiscussionCommentPayloadFields(
            field_name="updateTeamDiscussionComment", arguments=cleared_arguments
        )

    @classmethod
    def update_team_review_assignment(
        cls, input: UpdateTeamReviewAssignmentInput
    ) -> UpdateTeamReviewAssignmentPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateTeamReviewAssignmentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateTeamReviewAssignmentPayloadFields(
            field_name="updateTeamReviewAssignment", arguments=cleared_arguments
        )

    @classmethod
    def update_teams_repository(
        cls, input: UpdateTeamsRepositoryInput
    ) -> UpdateTeamsRepositoryPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateTeamsRepositoryInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateTeamsRepositoryPayloadFields(
            field_name="updateTeamsRepository", arguments=cleared_arguments
        )

    @classmethod
    def update_topics(cls, input: UpdateTopicsInput) -> UpdateTopicsPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateTopicsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateTopicsPayloadFields(
            field_name="updateTopics", arguments=cleared_arguments
        )

    @classmethod
    def update_user_list(
        cls, input: UpdateUserListInput
    ) -> UpdateUserListPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateUserListInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateUserListPayloadFields(
            field_name="updateUserList", arguments=cleared_arguments
        )

    @classmethod
    def update_user_lists_for_item(
        cls, input: UpdateUserListsForItemInput
    ) -> UpdateUserListsForItemPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateUserListsForItemInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateUserListsForItemPayloadFields(
            field_name="updateUserListsForItem", arguments=cleared_arguments
        )

    @classmethod
    def verify_verifiable_domain(
        cls, input: VerifyVerifiableDomainInput
    ) -> VerifyVerifiableDomainPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "VerifyVerifiableDomainInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VerifyVerifiableDomainPayloadFields(
            field_name="verifyVerifiableDomain", arguments=cleared_arguments
        )
