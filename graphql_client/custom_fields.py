# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from . import (
    CollaboratorAffiliation,
    DefaultRepositoryPermissionField,
    DependencyGraphEcosystem,
    DiscussionState,
    EnterpriseAdministratorRole,
    EnterpriseMembershipType,
    EnterpriseUserAccountMembershipRole,
    EnterpriseUserDeployment,
    EnvironmentPinnedFilterField,
    GistPrivacy,
    IdentityProviderConfigurationState,
    IssueState,
    IssueTimelineItemsItemType,
    MigrationState,
    MilestoneState,
    OrderDirection,
    OrganizationInvitationSource,
    OrganizationMembersCanCreateRepositoriesSettingValue,
    PackageType,
    PinnableItemType,
    ProjectCardArchivedState,
    ProjectState,
    ProjectV2PermissionLevel,
    PullRequestMergeMethod,
    PullRequestReviewState,
    PullRequestState,
    PullRequestTimelineItemsItemType,
    ReactionContent,
    RepositoryAffiliation,
    RepositoryContributionType,
    RepositoryPrivacy,
    RepositoryRulesetTarget,
    RepositoryRuleType,
    RepositorySuggestedActorFilter,
    RepositoryVisibility,
    RepositoryVulnerabilityAlertDependencyScope,
    RepositoryVulnerabilityAlertState,
    RoleInOrganization,
    SearchType,
    SecurityAdvisoryClassification,
    SecurityAdvisoryEcosystem,
    SecurityAdvisorySeverity,
    SponsorsActivityAction,
    SponsorsActivityPeriod,
    SponsorsListingFeaturedItemFeatureableType,
    TeamMemberRole,
    TeamMembershipType,
    TeamNotificationSetting,
    TeamPrivacy,
    TeamRole,
    TrackedIssueStates,
    TwoFactorCredentialSecurityType,
)
from .base_operation import GraphQLField
from .custom_typing_fields import (
    AbortQueuedMigrationsPayloadGraphQLField,
    AbortRepositoryMigrationPayloadGraphQLField,
    AcceptEnterpriseAdministratorInvitationPayloadGraphQLField,
    AcceptEnterpriseMemberInvitationPayloadGraphQLField,
    AcceptTopicSuggestionPayloadGraphQLField,
    AccessUserNamespaceRepositoryPayloadGraphQLField,
    ActorConnectionGraphQLField,
    ActorEdgeGraphQLField,
    ActorGraphQLField,
    ActorLocationGraphQLField,
    AddAssigneesToAssignablePayloadGraphQLField,
    AddCommentPayloadGraphQLField,
    AddDiscussionCommentPayloadGraphQLField,
    AddDiscussionPollVotePayloadGraphQLField,
    AddedToMergeQueueEventGraphQLField,
    AddedToProjectEventGraphQLField,
    AddEnterpriseOrganizationMemberPayloadGraphQLField,
    AddEnterpriseSupportEntitlementPayloadGraphQLField,
    AddLabelsToLabelablePayloadGraphQLField,
    AddProjectCardPayloadGraphQLField,
    AddProjectColumnPayloadGraphQLField,
    AddProjectV2DraftIssuePayloadGraphQLField,
    AddProjectV2ItemByIdPayloadGraphQLField,
    AddPullRequestReviewCommentPayloadGraphQLField,
    AddPullRequestReviewPayloadGraphQLField,
    AddPullRequestReviewThreadPayloadGraphQLField,
    AddPullRequestReviewThreadReplyPayloadGraphQLField,
    AddReactionPayloadGraphQLField,
    AddStarPayloadGraphQLField,
    AddSubIssuePayloadGraphQLField,
    AddUpvotePayloadGraphQLField,
    AddVerifiableDomainPayloadGraphQLField,
    AnnouncementBannerGraphQLField,
    AppGraphQLField,
    ApproveDeploymentsPayloadGraphQLField,
    ApproveVerifiableDomainPayloadGraphQLField,
    ArchiveProjectV2ItemPayloadGraphQLField,
    ArchiveRepositoryPayloadGraphQLField,
    AssignableGraphQLField,
    AssignedEventGraphQLField,
    AssigneeConnectionGraphQLField,
    AssigneeEdgeGraphQLField,
    AssigneeUnion,
    AuditEntryActorUnion,
    AuditEntryGraphQLField,
    AutomaticBaseChangeFailedEventGraphQLField,
    AutomaticBaseChangeSucceededEventGraphQLField,
    AutoMergeDisabledEventGraphQLField,
    AutoMergeEnabledEventGraphQLField,
    AutoMergeRequestGraphQLField,
    AutoRebaseEnabledEventGraphQLField,
    AutoSquashEnabledEventGraphQLField,
    BaseRefChangedEventGraphQLField,
    BaseRefDeletedEventGraphQLField,
    BaseRefForcePushedEventGraphQLField,
    BlameGraphQLField,
    BlameRangeGraphQLField,
    BotGraphQLField,
    BranchActorAllowanceActorUnion,
    BranchNamePatternParametersGraphQLField,
    BranchProtectionRuleConflictConnectionGraphQLField,
    BranchProtectionRuleConflictEdgeGraphQLField,
    BranchProtectionRuleConflictGraphQLField,
    BranchProtectionRuleConnectionGraphQLField,
    BranchProtectionRuleEdgeGraphQLField,
    BranchProtectionRuleGraphQLField,
    BypassActorUnion,
    BypassForcePushAllowanceConnectionGraphQLField,
    BypassForcePushAllowanceEdgeGraphQLField,
    BypassForcePushAllowanceGraphQLField,
    BypassPullRequestAllowanceConnectionGraphQLField,
    BypassPullRequestAllowanceEdgeGraphQLField,
    BypassPullRequestAllowanceGraphQLField,
    CancelEnterpriseAdminInvitationPayloadGraphQLField,
    CancelEnterpriseMemberInvitationPayloadGraphQLField,
    CancelSponsorshipPayloadGraphQLField,
    ChangeUserStatusPayloadGraphQLField,
    CheckAnnotationConnectionGraphQLField,
    CheckAnnotationEdgeGraphQLField,
    CheckAnnotationGraphQLField,
    CheckAnnotationPositionGraphQLField,
    CheckAnnotationSpanGraphQLField,
    CheckRunConnectionGraphQLField,
    CheckRunEdgeGraphQLField,
    CheckRunGraphQLField,
    CheckRunStateCountGraphQLField,
    CheckStepConnectionGraphQLField,
    CheckStepEdgeGraphQLField,
    CheckStepGraphQLField,
    CheckSuiteConnectionGraphQLField,
    CheckSuiteEdgeGraphQLField,
    CheckSuiteGraphQLField,
    ClaimableUnion,
    ClearLabelsFromLabelablePayloadGraphQLField,
    ClearProjectV2ItemFieldValuePayloadGraphQLField,
    CloneProjectPayloadGraphQLField,
    CloneTemplateRepositoryPayloadGraphQLField,
    ClosableGraphQLField,
    ClosedEventGraphQLField,
    CloseDiscussionPayloadGraphQLField,
    CloseIssuePayloadGraphQLField,
    ClosePullRequestPayloadGraphQLField,
    CloserUnion,
    CodeOfConductGraphQLField,
    CodeScanningParametersGraphQLField,
    CodeScanningToolGraphQLField,
    CommentDeletedEventGraphQLField,
    CommentGraphQLField,
    CommitAuthorEmailPatternParametersGraphQLField,
    CommitCommentConnectionGraphQLField,
    CommitCommentEdgeGraphQLField,
    CommitCommentGraphQLField,
    CommitCommentThreadGraphQLField,
    CommitConnectionGraphQLField,
    CommitContributionsByRepositoryGraphQLField,
    CommitEdgeGraphQLField,
    CommitGraphQLField,
    CommitHistoryConnectionGraphQLField,
    CommitMessagePatternParametersGraphQLField,
    CommitterEmailPatternParametersGraphQLField,
    ComparisonCommitConnectionGraphQLField,
    ComparisonGraphQLField,
    ConnectedEventGraphQLField,
    ContributingGuidelinesGraphQLField,
    ContributionCalendarDayGraphQLField,
    ContributionCalendarGraphQLField,
    ContributionCalendarMonthGraphQLField,
    ContributionCalendarWeekGraphQLField,
    ContributionGraphQLField,
    ContributionsCollectionGraphQLField,
    ConvertedNoteToIssueEventGraphQLField,
    ConvertedToDiscussionEventGraphQLField,
    ConvertProjectCardNoteToIssuePayloadGraphQLField,
    ConvertProjectV2DraftIssueItemToIssuePayloadGraphQLField,
    ConvertPullRequestToDraftPayloadGraphQLField,
    ConvertToDraftEventGraphQLField,
    CopilotEndpointsGraphQLField,
    CopyProjectV2PayloadGraphQLField,
    CreateAttributionInvitationPayloadGraphQLField,
    CreateBranchProtectionRulePayloadGraphQLField,
    CreateCheckRunPayloadGraphQLField,
    CreateCheckSuitePayloadGraphQLField,
    CreateCommitOnBranchPayloadGraphQLField,
    CreatedCommitContributionConnectionGraphQLField,
    CreatedCommitContributionEdgeGraphQLField,
    CreatedCommitContributionGraphQLField,
    CreateDeploymentPayloadGraphQLField,
    CreateDeploymentStatusPayloadGraphQLField,
    CreateDiscussionPayloadGraphQLField,
    CreatedIssueContributionConnectionGraphQLField,
    CreatedIssueContributionEdgeGraphQLField,
    CreatedIssueContributionGraphQLField,
    CreatedIssueOrRestrictedContributionUnion,
    CreatedPullRequestContributionConnectionGraphQLField,
    CreatedPullRequestContributionEdgeGraphQLField,
    CreatedPullRequestContributionGraphQLField,
    CreatedPullRequestOrRestrictedContributionUnion,
    CreatedPullRequestReviewContributionConnectionGraphQLField,
    CreatedPullRequestReviewContributionEdgeGraphQLField,
    CreatedPullRequestReviewContributionGraphQLField,
    CreatedRepositoryContributionConnectionGraphQLField,
    CreatedRepositoryContributionEdgeGraphQLField,
    CreatedRepositoryContributionGraphQLField,
    CreatedRepositoryOrRestrictedContributionUnion,
    CreateEnterpriseOrganizationPayloadGraphQLField,
    CreateEnvironmentPayloadGraphQLField,
    CreateIpAllowListEntryPayloadGraphQLField,
    CreateIssuePayloadGraphQLField,
    CreateIssueTypePayloadGraphQLField,
    CreateLabelPayloadGraphQLField,
    CreateLinkedBranchPayloadGraphQLField,
    CreateMigrationSourcePayloadGraphQLField,
    CreateProjectPayloadGraphQLField,
    CreateProjectV2FieldPayloadGraphQLField,
    CreateProjectV2PayloadGraphQLField,
    CreateProjectV2StatusUpdatePayloadGraphQLField,
    CreatePullRequestPayloadGraphQLField,
    CreateRefPayloadGraphQLField,
    CreateRepositoryPayloadGraphQLField,
    CreateRepositoryRulesetPayloadGraphQLField,
    CreateSponsorshipPayloadGraphQLField,
    CreateSponsorshipsPayloadGraphQLField,
    CreateSponsorsListingPayloadGraphQLField,
    CreateSponsorsTierPayloadGraphQLField,
    CreateTeamDiscussionCommentPayloadGraphQLField,
    CreateTeamDiscussionPayloadGraphQLField,
    CreateUserListPayloadGraphQLField,
    CrossReferencedEventGraphQLField,
    CVSSGraphQLField,
    CvssSeveritiesGraphQLField,
    CWEConnectionGraphQLField,
    CWEEdgeGraphQLField,
    CWEGraphQLField,
    DeclineTopicSuggestionPayloadGraphQLField,
    DeletableGraphQLField,
    DeleteBranchProtectionRulePayloadGraphQLField,
    DeleteDeploymentPayloadGraphQLField,
    DeleteDiscussionCommentPayloadGraphQLField,
    DeleteDiscussionPayloadGraphQLField,
    DeleteEnvironmentPayloadGraphQLField,
    DeleteIpAllowListEntryPayloadGraphQLField,
    DeleteIssueCommentPayloadGraphQLField,
    DeleteIssuePayloadGraphQLField,
    DeleteIssueTypePayloadGraphQLField,
    DeleteLabelPayloadGraphQLField,
    DeleteLinkedBranchPayloadGraphQLField,
    DeletePackageVersionPayloadGraphQLField,
    DeleteProjectCardPayloadGraphQLField,
    DeleteProjectColumnPayloadGraphQLField,
    DeleteProjectPayloadGraphQLField,
    DeleteProjectV2FieldPayloadGraphQLField,
    DeleteProjectV2ItemPayloadGraphQLField,
    DeleteProjectV2PayloadGraphQLField,
    DeleteProjectV2StatusUpdatePayloadGraphQLField,
    DeleteProjectV2WorkflowPayloadGraphQLField,
    DeletePullRequestReviewCommentPayloadGraphQLField,
    DeletePullRequestReviewPayloadGraphQLField,
    DeleteRefPayloadGraphQLField,
    DeleteRepositoryRulesetPayloadGraphQLField,
    DeleteTeamDiscussionCommentPayloadGraphQLField,
    DeleteTeamDiscussionPayloadGraphQLField,
    DeleteUserListPayloadGraphQLField,
    DeleteVerifiableDomainPayloadGraphQLField,
    DemilestonedEventGraphQLField,
    DependabotUpdateErrorGraphQLField,
    DependabotUpdateGraphQLField,
    DependencyGraphDependencyConnectionGraphQLField,
    DependencyGraphDependencyEdgeGraphQLField,
    DependencyGraphDependencyGraphQLField,
    DependencyGraphManifestConnectionGraphQLField,
    DependencyGraphManifestEdgeGraphQLField,
    DependencyGraphManifestGraphQLField,
    DeployedEventGraphQLField,
    DeployKeyConnectionGraphQLField,
    DeployKeyEdgeGraphQLField,
    DeployKeyGraphQLField,
    DeploymentConnectionGraphQLField,
    DeploymentEdgeGraphQLField,
    DeploymentEnvironmentChangedEventGraphQLField,
    DeploymentGraphQLField,
    DeploymentProtectionRuleConnectionGraphQLField,
    DeploymentProtectionRuleEdgeGraphQLField,
    DeploymentProtectionRuleGraphQLField,
    DeploymentRequestConnectionGraphQLField,
    DeploymentRequestEdgeGraphQLField,
    DeploymentRequestGraphQLField,
    DeploymentReviewConnectionGraphQLField,
    DeploymentReviewEdgeGraphQLField,
    DeploymentReviewerConnectionGraphQLField,
    DeploymentReviewerEdgeGraphQLField,
    DeploymentReviewerUnion,
    DeploymentReviewGraphQLField,
    DeploymentStatusConnectionGraphQLField,
    DeploymentStatusEdgeGraphQLField,
    DeploymentStatusGraphQLField,
    DequeuePullRequestPayloadGraphQLField,
    DisablePullRequestAutoMergePayloadGraphQLField,
    DisconnectedEventGraphQLField,
    DiscussionCategoryConnectionGraphQLField,
    DiscussionCategoryEdgeGraphQLField,
    DiscussionCategoryGraphQLField,
    DiscussionCommentConnectionGraphQLField,
    DiscussionCommentEdgeGraphQLField,
    DiscussionCommentGraphQLField,
    DiscussionConnectionGraphQLField,
    DiscussionEdgeGraphQLField,
    DiscussionGraphQLField,
    DiscussionPollGraphQLField,
    DiscussionPollOptionConnectionGraphQLField,
    DiscussionPollOptionEdgeGraphQLField,
    DiscussionPollOptionGraphQLField,
    DismissPullRequestReviewPayloadGraphQLField,
    DismissRepositoryVulnerabilityAlertPayloadGraphQLField,
    DraftIssueGraphQLField,
    EnablePullRequestAutoMergePayloadGraphQLField,
    EnqueuePullRequestPayloadGraphQLField,
    EnterpriseAdministratorConnectionGraphQLField,
    EnterpriseAdministratorEdgeGraphQLField,
    EnterpriseAdministratorInvitationConnectionGraphQLField,
    EnterpriseAdministratorInvitationEdgeGraphQLField,
    EnterpriseAdministratorInvitationGraphQLField,
    EnterpriseAuditEntryDataGraphQLField,
    EnterpriseBillingInfoGraphQLField,
    EnterpriseConnectionGraphQLField,
    EnterpriseEdgeGraphQLField,
    EnterpriseFailedInvitationConnectionGraphQLField,
    EnterpriseFailedInvitationEdgeGraphQLField,
    EnterpriseGraphQLField,
    EnterpriseIdentityProviderGraphQLField,
    EnterpriseMemberConnectionGraphQLField,
    EnterpriseMemberEdgeGraphQLField,
    EnterpriseMemberInvitationConnectionGraphQLField,
    EnterpriseMemberInvitationEdgeGraphQLField,
    EnterpriseMemberInvitationGraphQLField,
    EnterpriseMemberUnion,
    EnterpriseOrganizationMembershipConnectionGraphQLField,
    EnterpriseOrganizationMembershipEdgeGraphQLField,
    EnterpriseOutsideCollaboratorConnectionGraphQLField,
    EnterpriseOutsideCollaboratorEdgeGraphQLField,
    EnterpriseOwnerInfoGraphQLField,
    EnterprisePendingMemberInvitationConnectionGraphQLField,
    EnterprisePendingMemberInvitationEdgeGraphQLField,
    EnterpriseRepositoryInfoConnectionGraphQLField,
    EnterpriseRepositoryInfoEdgeGraphQLField,
    EnterpriseRepositoryInfoGraphQLField,
    EnterpriseServerInstallationConnectionGraphQLField,
    EnterpriseServerInstallationEdgeGraphQLField,
    EnterpriseServerInstallationGraphQLField,
    EnterpriseServerInstallationMembershipConnectionGraphQLField,
    EnterpriseServerInstallationMembershipEdgeGraphQLField,
    EnterpriseServerUserAccountConnectionGraphQLField,
    EnterpriseServerUserAccountEdgeGraphQLField,
    EnterpriseServerUserAccountEmailConnectionGraphQLField,
    EnterpriseServerUserAccountEmailEdgeGraphQLField,
    EnterpriseServerUserAccountEmailGraphQLField,
    EnterpriseServerUserAccountGraphQLField,
    EnterpriseServerUserAccountsUploadConnectionGraphQLField,
    EnterpriseServerUserAccountsUploadEdgeGraphQLField,
    EnterpriseServerUserAccountsUploadGraphQLField,
    EnterpriseUserAccountGraphQLField,
    EnvironmentConnectionGraphQLField,
    EnvironmentEdgeGraphQLField,
    EnvironmentGraphQLField,
    EPSSGraphQLField,
    ExternalIdentityAttributeGraphQLField,
    ExternalIdentityConnectionGraphQLField,
    ExternalIdentityEdgeGraphQLField,
    ExternalIdentityGraphQLField,
    ExternalIdentitySamlAttributesGraphQLField,
    ExternalIdentityScimAttributesGraphQLField,
    FileExtensionRestrictionParametersGraphQLField,
    FilePathRestrictionParametersGraphQLField,
    FollowerConnectionGraphQLField,
    FollowingConnectionGraphQLField,
    FollowOrganizationPayloadGraphQLField,
    FollowUserPayloadGraphQLField,
    FundingLinkGraphQLField,
    GistCommentConnectionGraphQLField,
    GistCommentEdgeGraphQLField,
    GistCommentGraphQLField,
    GistConnectionGraphQLField,
    GistEdgeGraphQLField,
    GistFileGraphQLField,
    GistGraphQLField,
    GitActorConnectionGraphQLField,
    GitActorEdgeGraphQLField,
    GitActorGraphQLField,
    GitHubMetadataGraphQLField,
    GitObjectGraphQLField,
    GrantEnterpriseOrganizationsMigratorRolePayloadGraphQLField,
    GrantMigratorRolePayloadGraphQLField,
    HeadRefDeletedEventGraphQLField,
    HeadRefForcePushedEventGraphQLField,
    HeadRefRestoredEventGraphQLField,
    HovercardGraphQLField,
    ImportProjectPayloadGraphQLField,
    InviteEnterpriseAdminPayloadGraphQLField,
    InviteEnterpriseMemberPayloadGraphQLField,
    IpAllowListEntryConnectionGraphQLField,
    IpAllowListEntryEdgeGraphQLField,
    IpAllowListEntryGraphQLField,
    IpAllowListOwnerUnion,
    IssueCommentConnectionGraphQLField,
    IssueCommentEdgeGraphQLField,
    IssueCommentGraphQLField,
    IssueConnectionGraphQLField,
    IssueContributionsByRepositoryGraphQLField,
    IssueEdgeGraphQLField,
    IssueGraphQLField,
    IssueOrPullRequestUnion,
    IssueTemplateGraphQLField,
    IssueTimelineConnectionGraphQLField,
    IssueTimelineItemEdgeGraphQLField,
    IssueTimelineItemsConnectionGraphQLField,
    IssueTimelineItemsEdgeGraphQLField,
    IssueTimelineItemsUnion,
    IssueTimelineItemUnion,
    IssueTypeAddedEventGraphQLField,
    IssueTypeChangedEventGraphQLField,
    IssueTypeConnectionGraphQLField,
    IssueTypeEdgeGraphQLField,
    IssueTypeGraphQLField,
    IssueTypeRemovedEventGraphQLField,
    JoinedGitHubContributionGraphQLField,
    LabelableGraphQLField,
    LabelConnectionGraphQLField,
    LabeledEventGraphQLField,
    LabelEdgeGraphQLField,
    LabelGraphQLField,
    LanguageConnectionGraphQLField,
    LanguageEdgeGraphQLField,
    LanguageGraphQLField,
    LicenseGraphQLField,
    LicenseRuleGraphQLField,
    LinkedBranchConnectionGraphQLField,
    LinkedBranchEdgeGraphQLField,
    LinkedBranchGraphQLField,
    LinkProjectV2ToRepositoryPayloadGraphQLField,
    LinkProjectV2ToTeamPayloadGraphQLField,
    LinkRepositoryToProjectPayloadGraphQLField,
    LockableGraphQLField,
    LockedEventGraphQLField,
    LockLockablePayloadGraphQLField,
    MannequinConnectionGraphQLField,
    MannequinEdgeGraphQLField,
    MannequinGraphQLField,
    MarkDiscussionCommentAsAnswerPayloadGraphQLField,
    MarkedAsDuplicateEventGraphQLField,
    MarketplaceCategoryGraphQLField,
    MarketplaceListingConnectionGraphQLField,
    MarketplaceListingEdgeGraphQLField,
    MarketplaceListingGraphQLField,
    MarkFileAsViewedPayloadGraphQLField,
    MarkProjectV2AsTemplatePayloadGraphQLField,
    MarkPullRequestReadyForReviewPayloadGraphQLField,
    MaxFilePathLengthParametersGraphQLField,
    MaxFileSizeParametersGraphQLField,
    MembersCanDeleteReposClearAuditEntryGraphQLField,
    MembersCanDeleteReposDisableAuditEntryGraphQLField,
    MembersCanDeleteReposEnableAuditEntryGraphQLField,
    MemberStatusableGraphQLField,
    MentionedEventGraphQLField,
    MergeBranchPayloadGraphQLField,
    MergedEventGraphQLField,
    MergePullRequestPayloadGraphQLField,
    MergeQueueConfigurationGraphQLField,
    MergeQueueEntryConnectionGraphQLField,
    MergeQueueEntryEdgeGraphQLField,
    MergeQueueEntryGraphQLField,
    MergeQueueGraphQLField,
    MergeQueueParametersGraphQLField,
    MigrationGraphQLField,
    MigrationSourceGraphQLField,
    MilestoneConnectionGraphQLField,
    MilestonedEventGraphQLField,
    MilestoneEdgeGraphQLField,
    MilestoneGraphQLField,
    MilestoneItemUnion,
    MinimizableGraphQLField,
    MinimizeCommentPayloadGraphQLField,
    MovedColumnsInProjectEventGraphQLField,
    MoveProjectCardPayloadGraphQLField,
    MoveProjectColumnPayloadGraphQLField,
    NodeGraphQLField,
    OauthApplicationAuditEntryDataGraphQLField,
    OauthApplicationCreateAuditEntryGraphQLField,
    OIDCProviderGraphQLField,
    OrgAddBillingManagerAuditEntryGraphQLField,
    OrgAddMemberAuditEntryGraphQLField,
    OrganizationAuditEntryConnectionGraphQLField,
    OrganizationAuditEntryDataGraphQLField,
    OrganizationAuditEntryEdgeGraphQLField,
    OrganizationAuditEntryUnion,
    OrganizationConnectionGraphQLField,
    OrganizationEdgeGraphQLField,
    OrganizationEnterpriseOwnerConnectionGraphQLField,
    OrganizationEnterpriseOwnerEdgeGraphQLField,
    OrganizationGraphQLField,
    OrganizationIdentityProviderGraphQLField,
    OrganizationInvitationConnectionGraphQLField,
    OrganizationInvitationEdgeGraphQLField,
    OrganizationInvitationGraphQLField,
    OrganizationMemberConnectionGraphQLField,
    OrganizationMemberEdgeGraphQLField,
    OrganizationMigrationGraphQLField,
    OrgBlockUserAuditEntryGraphQLField,
    OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField,
    OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField,
    OrgCreateAuditEntryGraphQLField,
    OrgDisableOauthAppRestrictionsAuditEntryGraphQLField,
    OrgDisableSamlAuditEntryGraphQLField,
    OrgDisableTwoFactorRequirementAuditEntryGraphQLField,
    OrgEnableOauthAppRestrictionsAuditEntryGraphQLField,
    OrgEnableSamlAuditEntryGraphQLField,
    OrgEnableTwoFactorRequirementAuditEntryGraphQLField,
    OrgInviteMemberAuditEntryGraphQLField,
    OrgInviteToBusinessAuditEntryGraphQLField,
    OrgOauthAppAccessApprovedAuditEntryGraphQLField,
    OrgOauthAppAccessBlockedAuditEntryGraphQLField,
    OrgOauthAppAccessDeniedAuditEntryGraphQLField,
    OrgOauthAppAccessRequestedAuditEntryGraphQLField,
    OrgOauthAppAccessUnblockedAuditEntryGraphQLField,
    OrgRemoveBillingManagerAuditEntryGraphQLField,
    OrgRemoveMemberAuditEntryGraphQLField,
    OrgRemoveOutsideCollaboratorAuditEntryGraphQLField,
    OrgRestoreMemberAuditEntryGraphQLField,
    OrgRestoreMemberAuditEntryMembershipUnion,
    OrgRestoreMemberMembershipOrganizationAuditEntryDataGraphQLField,
    OrgRestoreMemberMembershipRepositoryAuditEntryDataGraphQLField,
    OrgRestoreMemberMembershipTeamAuditEntryDataGraphQLField,
    OrgUnblockUserAuditEntryGraphQLField,
    OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField,
    OrgUpdateMemberAuditEntryGraphQLField,
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField,
    OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField,
    PackageConnectionGraphQLField,
    PackageEdgeGraphQLField,
    PackageFileConnectionGraphQLField,
    PackageFileEdgeGraphQLField,
    PackageFileGraphQLField,
    PackageGraphQLField,
    PackageOwnerGraphQLField,
    PackageStatisticsGraphQLField,
    PackageVersionConnectionGraphQLField,
    PackageVersionEdgeGraphQLField,
    PackageVersionGraphQLField,
    PackageVersionStatisticsGraphQLField,
    PageInfoGraphQLField,
    ParentIssueAddedEventGraphQLField,
    ParentIssueRemovedEventGraphQLField,
    PermissionGranterUnion,
    PermissionSourceGraphQLField,
    PinEnvironmentPayloadGraphQLField,
    PinIssuePayloadGraphQLField,
    PinnableItemConnectionGraphQLField,
    PinnableItemEdgeGraphQLField,
    PinnableItemUnion,
    PinnedDiscussionConnectionGraphQLField,
    PinnedDiscussionEdgeGraphQLField,
    PinnedDiscussionGraphQLField,
    PinnedEnvironmentConnectionGraphQLField,
    PinnedEnvironmentEdgeGraphQLField,
    PinnedEnvironmentGraphQLField,
    PinnedEventGraphQLField,
    PinnedIssueConnectionGraphQLField,
    PinnedIssueEdgeGraphQLField,
    PinnedIssueGraphQLField,
    PrivateRepositoryForkingDisableAuditEntryGraphQLField,
    PrivateRepositoryForkingEnableAuditEntryGraphQLField,
    ProfileItemShowcaseGraphQLField,
    ProfileOwnerGraphQLField,
    ProjectCardConnectionGraphQLField,
    ProjectCardEdgeGraphQLField,
    ProjectCardGraphQLField,
    ProjectCardItemUnion,
    ProjectColumnConnectionGraphQLField,
    ProjectColumnEdgeGraphQLField,
    ProjectColumnGraphQLField,
    ProjectConnectionGraphQLField,
    ProjectEdgeGraphQLField,
    ProjectGraphQLField,
    ProjectOwnerGraphQLField,
    ProjectProgressGraphQLField,
    ProjectV2ActorConnectionGraphQLField,
    ProjectV2ActorEdgeGraphQLField,
    ProjectV2ActorUnion,
    ProjectV2ConnectionGraphQLField,
    ProjectV2EdgeGraphQLField,
    ProjectV2FieldCommonGraphQLField,
    ProjectV2FieldConfigurationConnectionGraphQLField,
    ProjectV2FieldConfigurationEdgeGraphQLField,
    ProjectV2FieldConfigurationUnion,
    ProjectV2FieldConnectionGraphQLField,
    ProjectV2FieldEdgeGraphQLField,
    ProjectV2FieldGraphQLField,
    ProjectV2GraphQLField,
    ProjectV2ItemConnectionGraphQLField,
    ProjectV2ItemContentUnion,
    ProjectV2ItemEdgeGraphQLField,
    ProjectV2ItemFieldDateValueGraphQLField,
    ProjectV2ItemFieldIterationValueGraphQLField,
    ProjectV2ItemFieldLabelValueGraphQLField,
    ProjectV2ItemFieldMilestoneValueGraphQLField,
    ProjectV2ItemFieldNumberValueGraphQLField,
    ProjectV2ItemFieldPullRequestValueGraphQLField,
    ProjectV2ItemFieldRepositoryValueGraphQLField,
    ProjectV2ItemFieldReviewerValueGraphQLField,
    ProjectV2ItemFieldSingleSelectValueGraphQLField,
    ProjectV2ItemFieldTextValueGraphQLField,
    ProjectV2ItemFieldUserValueGraphQLField,
    ProjectV2ItemFieldValueCommonGraphQLField,
    ProjectV2ItemFieldValueConnectionGraphQLField,
    ProjectV2ItemFieldValueEdgeGraphQLField,
    ProjectV2ItemFieldValueUnion,
    ProjectV2ItemGraphQLField,
    ProjectV2IterationFieldConfigurationGraphQLField,
    ProjectV2IterationFieldGraphQLField,
    ProjectV2IterationFieldIterationGraphQLField,
    ProjectV2OwnerGraphQLField,
    ProjectV2RecentGraphQLField,
    ProjectV2SingleSelectFieldGraphQLField,
    ProjectV2SingleSelectFieldOptionGraphQLField,
    ProjectV2SortByConnectionGraphQLField,
    ProjectV2SortByEdgeGraphQLField,
    ProjectV2SortByFieldConnectionGraphQLField,
    ProjectV2SortByFieldEdgeGraphQLField,
    ProjectV2SortByFieldGraphQLField,
    ProjectV2SortByGraphQLField,
    ProjectV2StatusUpdateConnectionGraphQLField,
    ProjectV2StatusUpdateEdgeGraphQLField,
    ProjectV2StatusUpdateGraphQLField,
    ProjectV2ViewConnectionGraphQLField,
    ProjectV2ViewEdgeGraphQLField,
    ProjectV2ViewGraphQLField,
    ProjectV2WorkflowConnectionGraphQLField,
    ProjectV2WorkflowEdgeGraphQLField,
    ProjectV2WorkflowGraphQLField,
    PropertyTargetDefinitionGraphQLField,
    PublicKeyConnectionGraphQLField,
    PublicKeyEdgeGraphQLField,
    PublicKeyGraphQLField,
    PublishSponsorsTierPayloadGraphQLField,
    PullRequestChangedFileConnectionGraphQLField,
    PullRequestChangedFileEdgeGraphQLField,
    PullRequestChangedFileGraphQLField,
    PullRequestCommitCommentThreadGraphQLField,
    PullRequestCommitConnectionGraphQLField,
    PullRequestCommitEdgeGraphQLField,
    PullRequestCommitGraphQLField,
    PullRequestConnectionGraphQLField,
    PullRequestContributionsByRepositoryGraphQLField,
    PullRequestEdgeGraphQLField,
    PullRequestGraphQLField,
    PullRequestParametersGraphQLField,
    PullRequestReviewCommentConnectionGraphQLField,
    PullRequestReviewCommentEdgeGraphQLField,
    PullRequestReviewCommentGraphQLField,
    PullRequestReviewConnectionGraphQLField,
    PullRequestReviewContributionsByRepositoryGraphQLField,
    PullRequestReviewEdgeGraphQLField,
    PullRequestReviewGraphQLField,
    PullRequestReviewThreadConnectionGraphQLField,
    PullRequestReviewThreadEdgeGraphQLField,
    PullRequestReviewThreadGraphQLField,
    PullRequestRevisionMarkerGraphQLField,
    PullRequestTemplateGraphQLField,
    PullRequestTimelineConnectionGraphQLField,
    PullRequestTimelineItemEdgeGraphQLField,
    PullRequestTimelineItemsConnectionGraphQLField,
    PullRequestTimelineItemsEdgeGraphQLField,
    PullRequestTimelineItemsUnion,
    PullRequestTimelineItemUnion,
    PushAllowanceActorUnion,
    PushAllowanceConnectionGraphQLField,
    PushAllowanceEdgeGraphQLField,
    PushAllowanceGraphQLField,
    PushGraphQLField,
    QueryGraphQLField,
    RateLimitGraphQLField,
    ReactableGraphQLField,
    ReactingUserConnectionGraphQLField,
    ReactingUserEdgeGraphQLField,
    ReactionConnectionGraphQLField,
    ReactionEdgeGraphQLField,
    ReactionGraphQLField,
    ReactionGroupGraphQLField,
    ReactorConnectionGraphQLField,
    ReactorEdgeGraphQLField,
    ReactorUnion,
    ReadyForReviewEventGraphQLField,
    RefConnectionGraphQLField,
    RefEdgeGraphQLField,
    ReferencedEventGraphQLField,
    ReferencedSubjectUnion,
    RefGraphQLField,
    RefNameConditionTargetGraphQLField,
    RefUpdateRuleGraphQLField,
    RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadGraphQLField,
    RegenerateVerifiableDomainTokenPayloadGraphQLField,
    RejectDeploymentsPayloadGraphQLField,
    ReleaseAssetConnectionGraphQLField,
    ReleaseAssetEdgeGraphQLField,
    ReleaseAssetGraphQLField,
    ReleaseConnectionGraphQLField,
    ReleaseEdgeGraphQLField,
    ReleaseGraphQLField,
    RemoveAssigneesFromAssignablePayloadGraphQLField,
    RemovedFromMergeQueueEventGraphQLField,
    RemovedFromProjectEventGraphQLField,
    RemoveEnterpriseAdminPayloadGraphQLField,
    RemoveEnterpriseIdentityProviderPayloadGraphQLField,
    RemoveEnterpriseMemberPayloadGraphQLField,
    RemoveEnterpriseOrganizationPayloadGraphQLField,
    RemoveEnterpriseSupportEntitlementPayloadGraphQLField,
    RemoveLabelsFromLabelablePayloadGraphQLField,
    RemoveOutsideCollaboratorPayloadGraphQLField,
    RemoveReactionPayloadGraphQLField,
    RemoveStarPayloadGraphQLField,
    RemoveSubIssuePayloadGraphQLField,
    RemoveUpvotePayloadGraphQLField,
    RenamedTitleEventGraphQLField,
    RenamedTitleSubjectUnion,
    ReopenDiscussionPayloadGraphQLField,
    ReopenedEventGraphQLField,
    ReopenIssuePayloadGraphQLField,
    ReopenPullRequestPayloadGraphQLField,
    ReorderEnvironmentPayloadGraphQLField,
    ReplaceActorsForAssignablePayloadGraphQLField,
    RepoAccessAuditEntryGraphQLField,
    RepoAddMemberAuditEntryGraphQLField,
    RepoAddTopicAuditEntryGraphQLField,
    RepoArchivedAuditEntryGraphQLField,
    RepoChangeMergeSettingAuditEntryGraphQLField,
    RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField,
    RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField,
    RepoConfigDisableContributorsOnlyAuditEntryGraphQLField,
    RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField,
    RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField,
    RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField,
    RepoConfigEnableContributorsOnlyAuditEntryGraphQLField,
    RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField,
    RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField,
    RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField,
    RepoCreateAuditEntryGraphQLField,
    RepoDestroyAuditEntryGraphQLField,
    RepoRemoveMemberAuditEntryGraphQLField,
    RepoRemoveTopicAuditEntryGraphQLField,
    RepositoryAuditEntryDataGraphQLField,
    RepositoryCodeownersErrorGraphQLField,
    RepositoryCodeownersGraphQLField,
    RepositoryCollaboratorConnectionGraphQLField,
    RepositoryCollaboratorEdgeGraphQLField,
    RepositoryConnectionGraphQLField,
    RepositoryContactLinkGraphQLField,
    RepositoryDiscussionAuthorGraphQLField,
    RepositoryDiscussionCommentAuthorGraphQLField,
    RepositoryEdgeGraphQLField,
    RepositoryGraphQLField,
    RepositoryIdConditionTargetGraphQLField,
    RepositoryInfoGraphQLField,
    RepositoryInteractionAbilityGraphQLField,
    RepositoryInvitationConnectionGraphQLField,
    RepositoryInvitationEdgeGraphQLField,
    RepositoryInvitationGraphQLField,
    RepositoryMigrationConnectionGraphQLField,
    RepositoryMigrationEdgeGraphQLField,
    RepositoryMigrationGraphQLField,
    RepositoryNameConditionTargetGraphQLField,
    RepositoryNodeGraphQLField,
    RepositoryOwnerGraphQLField,
    RepositoryPlanFeaturesGraphQLField,
    RepositoryPropertyConditionTargetGraphQLField,
    RepositoryRuleConditionsGraphQLField,
    RepositoryRuleConnectionGraphQLField,
    RepositoryRuleEdgeGraphQLField,
    RepositoryRuleGraphQLField,
    RepositoryRulesetBypassActorConnectionGraphQLField,
    RepositoryRulesetBypassActorEdgeGraphQLField,
    RepositoryRulesetBypassActorGraphQLField,
    RepositoryRulesetConnectionGraphQLField,
    RepositoryRulesetEdgeGraphQLField,
    RepositoryRulesetGraphQLField,
    RepositoryTopicConnectionGraphQLField,
    RepositoryTopicEdgeGraphQLField,
    RepositoryTopicGraphQLField,
    RepositoryVisibilityChangeDisableAuditEntryGraphQLField,
    RepositoryVisibilityChangeEnableAuditEntryGraphQLField,
    RepositoryVulnerabilityAlertConnectionGraphQLField,
    RepositoryVulnerabilityAlertEdgeGraphQLField,
    RepositoryVulnerabilityAlertGraphQLField,
    ReprioritizeSubIssuePayloadGraphQLField,
    RequestedReviewerConnectionGraphQLField,
    RequestedReviewerEdgeGraphQLField,
    RequestedReviewerUnion,
    RequestReviewsPayloadGraphQLField,
    RequirableByPullRequestGraphQLField,
    RequiredDeploymentsParametersGraphQLField,
    RequiredStatusCheckDescriptionGraphQLField,
    RequiredStatusChecksParametersGraphQLField,
    RerequestCheckSuitePayloadGraphQLField,
    ResolveReviewThreadPayloadGraphQLField,
    RestrictedContributionGraphQLField,
    RetireSponsorsTierPayloadGraphQLField,
    RevertPullRequestPayloadGraphQLField,
    ReviewDismissalAllowanceActorUnion,
    ReviewDismissalAllowanceConnectionGraphQLField,
    ReviewDismissalAllowanceEdgeGraphQLField,
    ReviewDismissalAllowanceGraphQLField,
    ReviewDismissedEventGraphQLField,
    ReviewRequestConnectionGraphQLField,
    ReviewRequestedEventGraphQLField,
    ReviewRequestEdgeGraphQLField,
    ReviewRequestGraphQLField,
    ReviewRequestRemovedEventGraphQLField,
    RevokeEnterpriseOrganizationsMigratorRolePayloadGraphQLField,
    RevokeMigratorRolePayloadGraphQLField,
    RuleParametersUnion,
    RuleSourceUnion,
    SavedReplyConnectionGraphQLField,
    SavedReplyEdgeGraphQLField,
    SavedReplyGraphQLField,
    SearchResultItemConnectionGraphQLField,
    SearchResultItemEdgeGraphQLField,
    SearchResultItemUnion,
    SecurityAdvisoryConnectionGraphQLField,
    SecurityAdvisoryEdgeGraphQLField,
    SecurityAdvisoryGraphQLField,
    SecurityAdvisoryIdentifierGraphQLField,
    SecurityAdvisoryPackageGraphQLField,
    SecurityAdvisoryPackageVersionGraphQLField,
    SecurityAdvisoryReferenceGraphQLField,
    SecurityVulnerabilityConnectionGraphQLField,
    SecurityVulnerabilityEdgeGraphQLField,
    SecurityVulnerabilityGraphQLField,
    SetEnterpriseIdentityProviderPayloadGraphQLField,
    SetOrganizationInteractionLimitPayloadGraphQLField,
    SetRepositoryInteractionLimitPayloadGraphQLField,
    SetUserInteractionLimitPayloadGraphQLField,
    SocialAccountConnectionGraphQLField,
    SocialAccountEdgeGraphQLField,
    SocialAccountGraphQLField,
    SponsorableGraphQLField,
    SponsorableItemConnectionGraphQLField,
    SponsorableItemEdgeGraphQLField,
    SponsorableItemUnion,
    SponsorAndLifetimeValueConnectionGraphQLField,
    SponsorAndLifetimeValueEdgeGraphQLField,
    SponsorAndLifetimeValueGraphQLField,
    SponsorConnectionGraphQLField,
    SponsorEdgeGraphQLField,
    SponsorsActivityConnectionGraphQLField,
    SponsorsActivityEdgeGraphQLField,
    SponsorsActivityGraphQLField,
    SponsorsGoalGraphQLField,
    SponsorshipConnectionGraphQLField,
    SponsorshipEdgeGraphQLField,
    SponsorshipGraphQLField,
    SponsorshipNewsletterConnectionGraphQLField,
    SponsorshipNewsletterEdgeGraphQLField,
    SponsorshipNewsletterGraphQLField,
    SponsorsListingFeatureableItemUnion,
    SponsorsListingFeaturedItemGraphQLField,
    SponsorsListingGraphQLField,
    SponsorsTierAdminInfoGraphQLField,
    SponsorsTierConnectionGraphQLField,
    SponsorsTierEdgeGraphQLField,
    SponsorsTierGraphQLField,
    SponsorUnion,
    StargazerConnectionGraphQLField,
    StargazerEdgeGraphQLField,
    StarrableGraphQLField,
    StarredRepositoryConnectionGraphQLField,
    StarredRepositoryEdgeGraphQLField,
    StartOrganizationMigrationPayloadGraphQLField,
    StartRepositoryMigrationPayloadGraphQLField,
    StatusCheckConfigurationGraphQLField,
    StatusCheckRollupContextConnectionGraphQLField,
    StatusCheckRollupContextEdgeGraphQLField,
    StatusCheckRollupContextUnion,
    StatusCheckRollupGraphQLField,
    StatusContextGraphQLField,
    StatusContextStateCountGraphQLField,
    StatusGraphQLField,
    StripeConnectAccountGraphQLField,
    SubIssueAddedEventGraphQLField,
    SubIssueRemovedEventGraphQLField,
    SubIssuesSummaryGraphQLField,
    SubmitPullRequestReviewPayloadGraphQLField,
    SubmoduleConnectionGraphQLField,
    SubmoduleEdgeGraphQLField,
    SubmoduleGraphQLField,
    SubscribableGraphQLField,
    SubscribableThreadGraphQLField,
    SubscribedEventGraphQLField,
    SuggestedReviewerGraphQLField,
    TagNamePatternParametersGraphQLField,
    TeamAddMemberAuditEntryGraphQLField,
    TeamAddRepositoryAuditEntryGraphQLField,
    TeamAuditEntryDataGraphQLField,
    TeamChangeParentTeamAuditEntryGraphQLField,
    TeamConnectionGraphQLField,
    TeamDiscussionCommentConnectionGraphQLField,
    TeamDiscussionCommentEdgeGraphQLField,
    TeamDiscussionCommentGraphQLField,
    TeamDiscussionConnectionGraphQLField,
    TeamDiscussionEdgeGraphQLField,
    TeamDiscussionGraphQLField,
    TeamEdgeGraphQLField,
    TeamGraphQLField,
    TeamMemberConnectionGraphQLField,
    TeamMemberEdgeGraphQLField,
    TeamRemoveMemberAuditEntryGraphQLField,
    TeamRemoveRepositoryAuditEntryGraphQLField,
    TeamRepositoryConnectionGraphQLField,
    TeamRepositoryEdgeGraphQLField,
    TextMatchGraphQLField,
    TextMatchHighlightGraphQLField,
    TopicAuditEntryDataGraphQLField,
    TopicGraphQLField,
    TransferEnterpriseOrganizationPayloadGraphQLField,
    TransferIssuePayloadGraphQLField,
    TransferredEventGraphQLField,
    TreeEntryGraphQLField,
    TreeGraphQLField,
    UnarchiveProjectV2ItemPayloadGraphQLField,
    UnarchiveRepositoryPayloadGraphQLField,
    UnassignedEventGraphQLField,
    UnfollowOrganizationPayloadGraphQLField,
    UnfollowUserPayloadGraphQLField,
    UniformResourceLocatableGraphQLField,
    UnlabeledEventGraphQLField,
    UnlinkProjectV2FromRepositoryPayloadGraphQLField,
    UnlinkProjectV2FromTeamPayloadGraphQLField,
    UnlinkRepositoryFromProjectPayloadGraphQLField,
    UnlockedEventGraphQLField,
    UnlockLockablePayloadGraphQLField,
    UnmarkDiscussionCommentAsAnswerPayloadGraphQLField,
    UnmarkedAsDuplicateEventGraphQLField,
    UnmarkFileAsViewedPayloadGraphQLField,
    UnmarkIssueAsDuplicatePayloadGraphQLField,
    UnmarkProjectV2AsTemplatePayloadGraphQLField,
    UnminimizeCommentPayloadGraphQLField,
    UnpinIssuePayloadGraphQLField,
    UnpinnedEventGraphQLField,
    UnresolveReviewThreadPayloadGraphQLField,
    UnsubscribedEventGraphQLField,
    UpdatableCommentGraphQLField,
    UpdatableGraphQLField,
    UpdateBranchProtectionRulePayloadGraphQLField,
    UpdateCheckRunPayloadGraphQLField,
    UpdateCheckSuitePreferencesPayloadGraphQLField,
    UpdateDiscussionCommentPayloadGraphQLField,
    UpdateDiscussionPayloadGraphQLField,
    UpdateEnterpriseAdministratorRolePayloadGraphQLField,
    UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadGraphQLField,
    UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadGraphQLField,
    UpdateEnterpriseDeployKeySettingPayloadGraphQLField,
    UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadGraphQLField,
    UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadGraphQLField,
    UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadGraphQLField,
    UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadGraphQLField,
    UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadGraphQLField,
    UpdateEnterpriseMembersCanMakePurchasesSettingPayloadGraphQLField,
    UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadGraphQLField,
    UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadGraphQLField,
    UpdateEnterpriseOrganizationProjectsSettingPayloadGraphQLField,
    UpdateEnterpriseOwnerOrganizationRolePayloadGraphQLField,
    UpdateEnterpriseProfilePayloadGraphQLField,
    UpdateEnterpriseRepositoryProjectsSettingPayloadGraphQLField,
    UpdateEnterpriseTeamDiscussionsSettingPayloadGraphQLField,
    UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadGraphQLField,
    UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadGraphQLField,
    UpdateEnvironmentPayloadGraphQLField,
    UpdateIpAllowListEnabledSettingPayloadGraphQLField,
    UpdateIpAllowListEntryPayloadGraphQLField,
    UpdateIpAllowListForInstalledAppsEnabledSettingPayloadGraphQLField,
    UpdateIssueCommentPayloadGraphQLField,
    UpdateIssueIssueTypePayloadGraphQLField,
    UpdateIssuePayloadGraphQLField,
    UpdateIssueTypePayloadGraphQLField,
    UpdateLabelPayloadGraphQLField,
    UpdateNotificationRestrictionSettingPayloadGraphQLField,
    UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadGraphQLField,
    UpdateOrganizationWebCommitSignoffSettingPayloadGraphQLField,
    UpdateParametersGraphQLField,
    UpdatePatreonSponsorabilityPayloadGraphQLField,
    UpdateProjectCardPayloadGraphQLField,
    UpdateProjectColumnPayloadGraphQLField,
    UpdateProjectPayloadGraphQLField,
    UpdateProjectV2CollaboratorsPayloadGraphQLField,
    UpdateProjectV2DraftIssuePayloadGraphQLField,
    UpdateProjectV2FieldPayloadGraphQLField,
    UpdateProjectV2ItemFieldValuePayloadGraphQLField,
    UpdateProjectV2ItemPositionPayloadGraphQLField,
    UpdateProjectV2PayloadGraphQLField,
    UpdateProjectV2StatusUpdatePayloadGraphQLField,
    UpdatePullRequestBranchPayloadGraphQLField,
    UpdatePullRequestPayloadGraphQLField,
    UpdatePullRequestReviewCommentPayloadGraphQLField,
    UpdatePullRequestReviewPayloadGraphQLField,
    UpdateRefPayloadGraphQLField,
    UpdateRefsPayloadGraphQLField,
    UpdateRepositoryPayloadGraphQLField,
    UpdateRepositoryRulesetPayloadGraphQLField,
    UpdateRepositoryWebCommitSignoffSettingPayloadGraphQLField,
    UpdateSponsorshipPreferencesPayloadGraphQLField,
    UpdateSubscriptionPayloadGraphQLField,
    UpdateTeamDiscussionCommentPayloadGraphQLField,
    UpdateTeamDiscussionPayloadGraphQLField,
    UpdateTeamReviewAssignmentPayloadGraphQLField,
    UpdateTeamsRepositoryPayloadGraphQLField,
    UpdateTopicsPayloadGraphQLField,
    UpdateUserListPayloadGraphQLField,
    UpdateUserListsForItemPayloadGraphQLField,
    UserBlockedEventGraphQLField,
    UserConnectionGraphQLField,
    UserContentEditConnectionGraphQLField,
    UserContentEditEdgeGraphQLField,
    UserContentEditGraphQLField,
    UserEdgeGraphQLField,
    UserEmailMetadataGraphQLField,
    UserGraphQLField,
    UserListConnectionGraphQLField,
    UserListEdgeGraphQLField,
    UserListGraphQLField,
    UserListItemsConnectionGraphQLField,
    UserListItemsEdgeGraphQLField,
    UserListItemsUnion,
    UserListSuggestionGraphQLField,
    UserNamespaceRepositoryConnectionGraphQLField,
    UserNamespaceRepositoryEdgeGraphQLField,
    UserNamespaceRepositoryGraphQLField,
    UserStatusConnectionGraphQLField,
    UserStatusEdgeGraphQLField,
    UserStatusGraphQLField,
    VerifiableDomainConnectionGraphQLField,
    VerifiableDomainEdgeGraphQLField,
    VerifiableDomainGraphQLField,
    VerifiableDomainOwnerUnion,
    VerifyVerifiableDomainPayloadGraphQLField,
    VotableGraphQLField,
    WorkflowFileReferenceGraphQLField,
    WorkflowGraphQLField,
    WorkflowRunConnectionGraphQLField,
    WorkflowRunEdgeGraphQLField,
    WorkflowRunFileGraphQLField,
    WorkflowRunGraphQLField,
    WorkflowsParametersGraphQLField,
)
from .input_types import (
    AuditLogOrder,
    CheckRunFilter,
    CheckSuiteFilter,
    CommitAuthor,
    CommitContributionOrder,
    ContributionOrder,
    DeploymentOrder,
    DiscussionOrder,
    DiscussionPollOptionOrder,
    EnterpriseAdministratorInvitationOrder,
    EnterpriseMemberInvitationOrder,
    EnterpriseMemberOrder,
    EnterpriseOrder,
    EnterpriseServerInstallationOrder,
    EnterpriseServerUserAccountEmailOrder,
    EnterpriseServerUserAccountOrder,
    EnterpriseServerUserAccountsUploadOrder,
    Environments,
    GistOrder,
    IpAllowListEntryOrder,
    IssueCommentOrder,
    IssueFilters,
    IssueOrder,
    IssueTypeOrder,
    LabelOrder,
    LanguageOrder,
    MannequinOrder,
    MilestoneOrder,
    OrganizationOrder,
    OrgEnterpriseOwnerOrder,
    PackageFileOrder,
    PackageOrder,
    PackageVersionOrder,
    PinnedEnvironmentOrder,
    ProjectOrder,
    ProjectV2FieldOrder,
    ProjectV2Filters,
    ProjectV2ItemFieldValueOrder,
    ProjectV2ItemOrder,
    ProjectV2Order,
    ProjectV2StatusOrder,
    ProjectV2ViewOrder,
    ProjectV2WorkflowOrder,
    PullRequestOrder,
    ReactionOrder,
    RefOrder,
    ReleaseOrder,
    RepositoryInvitationOrder,
    RepositoryMigrationOrder,
    RepositoryOrder,
    RepositoryRuleOrder,
    SavedReplyOrder,
    SecurityAdvisoryIdentifierFilter,
    SecurityAdvisoryOrder,
    SecurityVulnerabilityOrder,
    SponsorableOrder,
    SponsorAndLifetimeValueOrder,
    SponsorOrder,
    SponsorsActivityOrder,
    SponsorshipNewsletterOrder,
    SponsorshipOrder,
    SponsorsTierOrder,
    StarOrder,
    TeamDiscussionCommentOrder,
    TeamDiscussionOrder,
    TeamMemberOrder,
    TeamOrder,
    TeamRepositoryOrder,
    UserStatusOrder,
    VerifiableDomainOrder,
    WorkflowRunOrder,
)


class AbortQueuedMigrationsPayloadFields(GraphQLField):
    client_mutation_id: "AbortQueuedMigrationsPayloadGraphQLField" = (
        AbortQueuedMigrationsPayloadGraphQLField("clientMutationId")
    )
    success: "AbortQueuedMigrationsPayloadGraphQLField" = (
        AbortQueuedMigrationsPayloadGraphQLField("success")
    )

    def fields(
        self, *subfields: AbortQueuedMigrationsPayloadGraphQLField
    ) -> "AbortQueuedMigrationsPayloadFields":
        """Subfields should come from the AbortQueuedMigrationsPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AbortQueuedMigrationsPayloadFields":
        self._alias = alias
        return self


class AbortRepositoryMigrationPayloadFields(GraphQLField):
    client_mutation_id: "AbortRepositoryMigrationPayloadGraphQLField" = (
        AbortRepositoryMigrationPayloadGraphQLField("clientMutationId")
    )
    success: "AbortRepositoryMigrationPayloadGraphQLField" = (
        AbortRepositoryMigrationPayloadGraphQLField("success")
    )

    def fields(
        self, *subfields: AbortRepositoryMigrationPayloadGraphQLField
    ) -> "AbortRepositoryMigrationPayloadFields":
        """Subfields should come from the AbortRepositoryMigrationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AbortRepositoryMigrationPayloadFields":
        self._alias = alias
        return self


class AcceptEnterpriseAdministratorInvitationPayloadFields(GraphQLField):
    client_mutation_id: "AcceptEnterpriseAdministratorInvitationPayloadGraphQLField" = (
        AcceptEnterpriseAdministratorInvitationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def invitation(cls) -> "EnterpriseAdministratorInvitationFields":
        return EnterpriseAdministratorInvitationFields("invitation")

    message: "AcceptEnterpriseAdministratorInvitationPayloadGraphQLField" = (
        AcceptEnterpriseAdministratorInvitationPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            AcceptEnterpriseAdministratorInvitationPayloadGraphQLField,
            "EnterpriseAdministratorInvitationFields",
        ]
    ) -> "AcceptEnterpriseAdministratorInvitationPayloadFields":
        """Subfields should come from the AcceptEnterpriseAdministratorInvitationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "AcceptEnterpriseAdministratorInvitationPayloadFields":
        self._alias = alias
        return self


class AcceptEnterpriseMemberInvitationPayloadFields(GraphQLField):
    client_mutation_id: "AcceptEnterpriseMemberInvitationPayloadGraphQLField" = (
        AcceptEnterpriseMemberInvitationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def invitation(cls) -> "EnterpriseMemberInvitationFields":
        return EnterpriseMemberInvitationFields("invitation")

    message: "AcceptEnterpriseMemberInvitationPayloadGraphQLField" = (
        AcceptEnterpriseMemberInvitationPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            AcceptEnterpriseMemberInvitationPayloadGraphQLField,
            "EnterpriseMemberInvitationFields",
        ]
    ) -> "AcceptEnterpriseMemberInvitationPayloadFields":
        """Subfields should come from the AcceptEnterpriseMemberInvitationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AcceptEnterpriseMemberInvitationPayloadFields":
        self._alias = alias
        return self


class AcceptTopicSuggestionPayloadFields(GraphQLField):
    client_mutation_id: "AcceptTopicSuggestionPayloadGraphQLField" = (
        AcceptTopicSuggestionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def topic(cls) -> "TopicFields":
        return TopicFields("topic")

    def fields(
        self, *subfields: Union[AcceptTopicSuggestionPayloadGraphQLField, "TopicFields"]
    ) -> "AcceptTopicSuggestionPayloadFields":
        """Subfields should come from the AcceptTopicSuggestionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AcceptTopicSuggestionPayloadFields":
        self._alias = alias
        return self


class AccessUserNamespaceRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "AccessUserNamespaceRepositoryPayloadGraphQLField" = (
        AccessUserNamespaceRepositoryPayloadGraphQLField("clientMutationId")
    )
    expires_at: "AccessUserNamespaceRepositoryPayloadGraphQLField" = (
        AccessUserNamespaceRepositoryPayloadGraphQLField("expiresAt")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            AccessUserNamespaceRepositoryPayloadGraphQLField, "RepositoryFields"
        ]
    ) -> "AccessUserNamespaceRepositoryPayloadFields":
        """Subfields should come from the AccessUserNamespaceRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AccessUserNamespaceRepositoryPayloadFields":
        self._alias = alias
        return self


class ActorInterface(GraphQLField):
    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "ActorGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ActorGraphQLField("avatar_url", arguments=cleared_arguments)

    login: "ActorGraphQLField" = ActorGraphQLField("login")
    resource_path: "ActorGraphQLField" = ActorGraphQLField("resourcePath")
    url: "ActorGraphQLField" = ActorGraphQLField("url")

    def fields(self, *subfields: ActorGraphQLField) -> "ActorInterface":
        """Subfields should come from the ActorInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ActorInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ActorInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ActorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ActorEdgeFields":
        return ActorEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ActorInterface":
        return ActorInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ActorConnectionGraphQLField" = ActorConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ActorConnectionGraphQLField,
            "ActorEdgeFields",
            "ActorInterface",
            "PageInfoFields",
        ]
    ) -> "ActorConnectionFields":
        """Subfields should come from the ActorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ActorConnectionFields":
        self._alias = alias
        return self


class ActorEdgeFields(GraphQLField):
    cursor: "ActorEdgeGraphQLField" = ActorEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ActorInterface":
        return ActorInterface("node")

    def fields(
        self, *subfields: Union[ActorEdgeGraphQLField, "ActorInterface"]
    ) -> "ActorEdgeFields":
        """Subfields should come from the ActorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ActorEdgeFields":
        self._alias = alias
        return self


class ActorLocationFields(GraphQLField):
    city: "ActorLocationGraphQLField" = ActorLocationGraphQLField("city")
    country: "ActorLocationGraphQLField" = ActorLocationGraphQLField("country")
    country_code: "ActorLocationGraphQLField" = ActorLocationGraphQLField("countryCode")
    region: "ActorLocationGraphQLField" = ActorLocationGraphQLField("region")
    region_code: "ActorLocationGraphQLField" = ActorLocationGraphQLField("regionCode")

    def fields(self, *subfields: ActorLocationGraphQLField) -> "ActorLocationFields":
        """Subfields should come from the ActorLocationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ActorLocationFields":
        self._alias = alias
        return self


class AddAssigneesToAssignablePayloadFields(GraphQLField):
    @classmethod
    def assignable(cls) -> "AssignableInterface":
        return AssignableInterface("assignable")

    client_mutation_id: "AddAssigneesToAssignablePayloadGraphQLField" = (
        AddAssigneesToAssignablePayloadGraphQLField("clientMutationId")
    )

    def fields(
        self,
        *subfields: Union[
            AddAssigneesToAssignablePayloadGraphQLField, "AssignableInterface"
        ]
    ) -> "AddAssigneesToAssignablePayloadFields":
        """Subfields should come from the AddAssigneesToAssignablePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddAssigneesToAssignablePayloadFields":
        self._alias = alias
        return self


class AddCommentPayloadFields(GraphQLField):
    client_mutation_id: "AddCommentPayloadGraphQLField" = AddCommentPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def comment_edge(cls) -> "IssueCommentEdgeFields":
        return IssueCommentEdgeFields("comment_edge")

    @classmethod
    def subject(cls) -> "NodeInterface":
        return NodeInterface("subject")

    @classmethod
    def timeline_edge(cls) -> "IssueTimelineItemEdgeFields":
        return IssueTimelineItemEdgeFields("timeline_edge")

    def fields(
        self,
        *subfields: Union[
            AddCommentPayloadGraphQLField,
            "IssueCommentEdgeFields",
            "IssueTimelineItemEdgeFields",
            "NodeInterface",
        ]
    ) -> "AddCommentPayloadFields":
        """Subfields should come from the AddCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddCommentPayloadFields":
        self._alias = alias
        return self


class AddDiscussionCommentPayloadFields(GraphQLField):
    client_mutation_id: "AddDiscussionCommentPayloadGraphQLField" = (
        AddDiscussionCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def comment(cls) -> "DiscussionCommentFields":
        return DiscussionCommentFields("comment")

    def fields(
        self,
        *subfields: Union[
            AddDiscussionCommentPayloadGraphQLField, "DiscussionCommentFields"
        ]
    ) -> "AddDiscussionCommentPayloadFields":
        """Subfields should come from the AddDiscussionCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddDiscussionCommentPayloadFields":
        self._alias = alias
        return self


class AddDiscussionPollVotePayloadFields(GraphQLField):
    client_mutation_id: "AddDiscussionPollVotePayloadGraphQLField" = (
        AddDiscussionPollVotePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def poll_option(cls) -> "DiscussionPollOptionFields":
        return DiscussionPollOptionFields("poll_option")

    def fields(
        self,
        *subfields: Union[
            AddDiscussionPollVotePayloadGraphQLField, "DiscussionPollOptionFields"
        ]
    ) -> "AddDiscussionPollVotePayloadFields":
        """Subfields should come from the AddDiscussionPollVotePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddDiscussionPollVotePayloadFields":
        self._alias = alias
        return self


class AddEnterpriseOrganizationMemberPayloadFields(GraphQLField):
    client_mutation_id: "AddEnterpriseOrganizationMemberPayloadGraphQLField" = (
        AddEnterpriseOrganizationMemberPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def users(cls) -> "UserFields":
        return UserFields("users")

    def fields(
        self,
        *subfields: Union[
            AddEnterpriseOrganizationMemberPayloadGraphQLField, "UserFields"
        ]
    ) -> "AddEnterpriseOrganizationMemberPayloadFields":
        """Subfields should come from the AddEnterpriseOrganizationMemberPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddEnterpriseOrganizationMemberPayloadFields":
        self._alias = alias
        return self


class AddEnterpriseSupportEntitlementPayloadFields(GraphQLField):
    client_mutation_id: "AddEnterpriseSupportEntitlementPayloadGraphQLField" = (
        AddEnterpriseSupportEntitlementPayloadGraphQLField("clientMutationId")
    )
    message: "AddEnterpriseSupportEntitlementPayloadGraphQLField" = (
        AddEnterpriseSupportEntitlementPayloadGraphQLField("message")
    )

    def fields(
        self, *subfields: AddEnterpriseSupportEntitlementPayloadGraphQLField
    ) -> "AddEnterpriseSupportEntitlementPayloadFields":
        """Subfields should come from the AddEnterpriseSupportEntitlementPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddEnterpriseSupportEntitlementPayloadFields":
        self._alias = alias
        return self


class AddLabelsToLabelablePayloadFields(GraphQLField):
    client_mutation_id: "AddLabelsToLabelablePayloadGraphQLField" = (
        AddLabelsToLabelablePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def labelable(cls) -> "LabelableInterface":
        return LabelableInterface("labelable")

    def fields(
        self,
        *subfields: Union[AddLabelsToLabelablePayloadGraphQLField, "LabelableInterface"]
    ) -> "AddLabelsToLabelablePayloadFields":
        """Subfields should come from the AddLabelsToLabelablePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddLabelsToLabelablePayloadFields":
        self._alias = alias
        return self


class AddProjectCardPayloadFields(GraphQLField):
    @classmethod
    def card_edge(cls) -> "ProjectCardEdgeFields":
        return ProjectCardEdgeFields("card_edge")

    client_mutation_id: "AddProjectCardPayloadGraphQLField" = (
        AddProjectCardPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_column(cls) -> "ProjectColumnFields":
        return ProjectColumnFields("project_column")

    def fields(
        self,
        *subfields: Union[
            AddProjectCardPayloadGraphQLField,
            "ProjectCardEdgeFields",
            "ProjectColumnFields",
        ]
    ) -> "AddProjectCardPayloadFields":
        """Subfields should come from the AddProjectCardPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddProjectCardPayloadFields":
        self._alias = alias
        return self


class AddProjectColumnPayloadFields(GraphQLField):
    client_mutation_id: "AddProjectColumnPayloadGraphQLField" = (
        AddProjectColumnPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def column_edge(cls) -> "ProjectColumnEdgeFields":
        return ProjectColumnEdgeFields("column_edge")

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    def fields(
        self,
        *subfields: Union[
            AddProjectColumnPayloadGraphQLField,
            "ProjectColumnEdgeFields",
            "ProjectFields",
        ]
    ) -> "AddProjectColumnPayloadFields":
        """Subfields should come from the AddProjectColumnPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddProjectColumnPayloadFields":
        self._alias = alias
        return self


class AddProjectV2DraftIssuePayloadFields(GraphQLField):
    client_mutation_id: "AddProjectV2DraftIssuePayloadGraphQLField" = (
        AddProjectV2DraftIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("project_item")

    def fields(
        self,
        *subfields: Union[
            AddProjectV2DraftIssuePayloadGraphQLField, "ProjectV2ItemFields"
        ]
    ) -> "AddProjectV2DraftIssuePayloadFields":
        """Subfields should come from the AddProjectV2DraftIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddProjectV2DraftIssuePayloadFields":
        self._alias = alias
        return self


class AddProjectV2ItemByIdPayloadFields(GraphQLField):
    client_mutation_id: "AddProjectV2ItemByIdPayloadGraphQLField" = (
        AddProjectV2ItemByIdPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    def fields(
        self,
        *subfields: Union[
            AddProjectV2ItemByIdPayloadGraphQLField, "ProjectV2ItemFields"
        ]
    ) -> "AddProjectV2ItemByIdPayloadFields":
        """Subfields should come from the AddProjectV2ItemByIdPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddProjectV2ItemByIdPayloadFields":
        self._alias = alias
        return self


class AddPullRequestReviewCommentPayloadFields(GraphQLField):
    client_mutation_id: "AddPullRequestReviewCommentPayloadGraphQLField" = (
        AddPullRequestReviewCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def comment(cls) -> "PullRequestReviewCommentFields":
        return PullRequestReviewCommentFields("comment")

    @classmethod
    def comment_edge(cls) -> "PullRequestReviewCommentEdgeFields":
        return PullRequestReviewCommentEdgeFields("comment_edge")

    def fields(
        self,
        *subfields: Union[
            AddPullRequestReviewCommentPayloadGraphQLField,
            "PullRequestReviewCommentEdgeFields",
            "PullRequestReviewCommentFields",
        ]
    ) -> "AddPullRequestReviewCommentPayloadFields":
        """Subfields should come from the AddPullRequestReviewCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddPullRequestReviewCommentPayloadFields":
        self._alias = alias
        return self


class AddPullRequestReviewPayloadFields(GraphQLField):
    client_mutation_id: "AddPullRequestReviewPayloadGraphQLField" = (
        AddPullRequestReviewPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("pull_request_review")

    @classmethod
    def review_edge(cls) -> "PullRequestReviewEdgeFields":
        return PullRequestReviewEdgeFields("review_edge")

    def fields(
        self,
        *subfields: Union[
            AddPullRequestReviewPayloadGraphQLField,
            "PullRequestReviewEdgeFields",
            "PullRequestReviewFields",
        ]
    ) -> "AddPullRequestReviewPayloadFields":
        """Subfields should come from the AddPullRequestReviewPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddPullRequestReviewPayloadFields":
        self._alias = alias
        return self


class AddPullRequestReviewThreadPayloadFields(GraphQLField):
    client_mutation_id: "AddPullRequestReviewThreadPayloadGraphQLField" = (
        AddPullRequestReviewThreadPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def thread(cls) -> "PullRequestReviewThreadFields":
        return PullRequestReviewThreadFields("thread")

    def fields(
        self,
        *subfields: Union[
            AddPullRequestReviewThreadPayloadGraphQLField,
            "PullRequestReviewThreadFields",
        ]
    ) -> "AddPullRequestReviewThreadPayloadFields":
        """Subfields should come from the AddPullRequestReviewThreadPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddPullRequestReviewThreadPayloadFields":
        self._alias = alias
        return self


class AddPullRequestReviewThreadReplyPayloadFields(GraphQLField):
    client_mutation_id: "AddPullRequestReviewThreadReplyPayloadGraphQLField" = (
        AddPullRequestReviewThreadReplyPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def comment(cls) -> "PullRequestReviewCommentFields":
        return PullRequestReviewCommentFields("comment")

    def fields(
        self,
        *subfields: Union[
            AddPullRequestReviewThreadReplyPayloadGraphQLField,
            "PullRequestReviewCommentFields",
        ]
    ) -> "AddPullRequestReviewThreadReplyPayloadFields":
        """Subfields should come from the AddPullRequestReviewThreadReplyPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddPullRequestReviewThreadReplyPayloadFields":
        self._alias = alias
        return self


class AddReactionPayloadFields(GraphQLField):
    client_mutation_id: "AddReactionPayloadGraphQLField" = (
        AddReactionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def reaction(cls) -> "ReactionFields":
        return ReactionFields("reaction")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def subject(cls) -> "ReactableInterface":
        return ReactableInterface("subject")

    def fields(
        self,
        *subfields: Union[
            AddReactionPayloadGraphQLField,
            "ReactableInterface",
            "ReactionFields",
            "ReactionGroupFields",
        ]
    ) -> "AddReactionPayloadFields":
        """Subfields should come from the AddReactionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddReactionPayloadFields":
        self._alias = alias
        return self


class AddStarPayloadFields(GraphQLField):
    client_mutation_id: "AddStarPayloadGraphQLField" = AddStarPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def starrable(cls) -> "StarrableInterface":
        return StarrableInterface("starrable")

    def fields(
        self, *subfields: Union[AddStarPayloadGraphQLField, "StarrableInterface"]
    ) -> "AddStarPayloadFields":
        """Subfields should come from the AddStarPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddStarPayloadFields":
        self._alias = alias
        return self


class AddSubIssuePayloadFields(GraphQLField):
    client_mutation_id: "AddSubIssuePayloadGraphQLField" = (
        AddSubIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    @classmethod
    def sub_issue(cls) -> "IssueFields":
        return IssueFields("sub_issue")

    def fields(
        self, *subfields: Union[AddSubIssuePayloadGraphQLField, "IssueFields"]
    ) -> "AddSubIssuePayloadFields":
        """Subfields should come from the AddSubIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddSubIssuePayloadFields":
        self._alias = alias
        return self


class AddUpvotePayloadFields(GraphQLField):
    client_mutation_id: "AddUpvotePayloadGraphQLField" = AddUpvotePayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def subject(cls) -> "VotableInterface":
        return VotableInterface("subject")

    def fields(
        self, *subfields: Union[AddUpvotePayloadGraphQLField, "VotableInterface"]
    ) -> "AddUpvotePayloadFields":
        """Subfields should come from the AddUpvotePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddUpvotePayloadFields":
        self._alias = alias
        return self


class AddVerifiableDomainPayloadFields(GraphQLField):
    client_mutation_id: "AddVerifiableDomainPayloadGraphQLField" = (
        AddVerifiableDomainPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def domain(cls) -> "VerifiableDomainFields":
        return VerifiableDomainFields("domain")

    def fields(
        self,
        *subfields: Union[
            AddVerifiableDomainPayloadGraphQLField, "VerifiableDomainFields"
        ]
    ) -> "AddVerifiableDomainPayloadFields":
        """Subfields should come from the AddVerifiableDomainPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddVerifiableDomainPayloadFields":
        self._alias = alias
        return self


class AddedToMergeQueueEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "AddedToMergeQueueEventGraphQLField" = (
        AddedToMergeQueueEventGraphQLField("createdAt")
    )

    @classmethod
    def enqueuer(cls) -> "UserFields":
        return UserFields("enqueuer")

    id: "AddedToMergeQueueEventGraphQLField" = AddedToMergeQueueEventGraphQLField("id")

    @classmethod
    def merge_queue(cls) -> "MergeQueueFields":
        return MergeQueueFields("merge_queue")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            AddedToMergeQueueEventGraphQLField,
            "ActorInterface",
            "MergeQueueFields",
            "PullRequestFields",
            "UserFields",
        ]
    ) -> "AddedToMergeQueueEventFields":
        """Subfields should come from the AddedToMergeQueueEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddedToMergeQueueEventFields":
        self._alias = alias
        return self


class AddedToProjectEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "AddedToProjectEventGraphQLField" = AddedToProjectEventGraphQLField(
        "createdAt"
    )
    database_id: "AddedToProjectEventGraphQLField" = AddedToProjectEventGraphQLField(
        "databaseId"
    )
    id: "AddedToProjectEventGraphQLField" = AddedToProjectEventGraphQLField("id")

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def project_card(cls) -> "ProjectCardFields":
        return ProjectCardFields("project_card")

    project_column_name: "AddedToProjectEventGraphQLField" = (
        AddedToProjectEventGraphQLField("projectColumnName")
    )

    def fields(
        self,
        *subfields: Union[
            AddedToProjectEventGraphQLField,
            "ActorInterface",
            "ProjectCardFields",
            "ProjectFields",
        ]
    ) -> "AddedToProjectEventFields":
        """Subfields should come from the AddedToProjectEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddedToProjectEventFields":
        self._alias = alias
        return self


class AnnouncementBannerFields(GraphQLField):
    created_at: "AnnouncementBannerGraphQLField" = AnnouncementBannerGraphQLField(
        "createdAt"
    )
    expires_at: "AnnouncementBannerGraphQLField" = AnnouncementBannerGraphQLField(
        "expiresAt"
    )
    is_user_dismissible: "AnnouncementBannerGraphQLField" = (
        AnnouncementBannerGraphQLField("isUserDismissible")
    )
    message: "AnnouncementBannerGraphQLField" = AnnouncementBannerGraphQLField(
        "message"
    )

    def fields(
        self, *subfields: AnnouncementBannerGraphQLField
    ) -> "AnnouncementBannerFields":
        """Subfields should come from the AnnouncementBannerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AnnouncementBannerFields":
        self._alias = alias
        return self


class AppFields(GraphQLField):
    client_id: "AppGraphQLField" = AppGraphQLField("clientId")
    created_at: "AppGraphQLField" = AppGraphQLField("createdAt")
    database_id: "AppGraphQLField" = AppGraphQLField("databaseId")
    description: "AppGraphQLField" = AppGraphQLField("description")
    id: "AppGraphQLField" = AppGraphQLField("id")

    @classmethod
    def ip_allow_list_entries(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IpAllowListEntryOrder] = None
    ) -> "IpAllowListEntryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IpAllowListEntryOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IpAllowListEntryConnectionFields(
            "ip_allow_list_entries", arguments=cleared_arguments
        )

    logo_background_color: "AppGraphQLField" = AppGraphQLField("logoBackgroundColor")

    @classmethod
    def logo_url(cls, *, size: Optional[int] = None) -> "AppGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AppGraphQLField("logo_url", arguments=cleared_arguments)

    name: "AppGraphQLField" = AppGraphQLField("name")
    slug: "AppGraphQLField" = AppGraphQLField("slug")
    updated_at: "AppGraphQLField" = AppGraphQLField("updatedAt")
    url: "AppGraphQLField" = AppGraphQLField("url")

    def fields(
        self, *subfields: Union[AppGraphQLField, "IpAllowListEntryConnectionFields"]
    ) -> "AppFields":
        """Subfields should come from the AppFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AppFields":
        self._alias = alias
        return self


class ApproveDeploymentsPayloadFields(GraphQLField):
    client_mutation_id: "ApproveDeploymentsPayloadGraphQLField" = (
        ApproveDeploymentsPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def deployments(cls) -> "DeploymentFields":
        return DeploymentFields("deployments")

    def fields(
        self,
        *subfields: Union[ApproveDeploymentsPayloadGraphQLField, "DeploymentFields"]
    ) -> "ApproveDeploymentsPayloadFields":
        """Subfields should come from the ApproveDeploymentsPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ApproveDeploymentsPayloadFields":
        self._alias = alias
        return self


class ApproveVerifiableDomainPayloadFields(GraphQLField):
    client_mutation_id: "ApproveVerifiableDomainPayloadGraphQLField" = (
        ApproveVerifiableDomainPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def domain(cls) -> "VerifiableDomainFields":
        return VerifiableDomainFields("domain")

    def fields(
        self,
        *subfields: Union[
            ApproveVerifiableDomainPayloadGraphQLField, "VerifiableDomainFields"
        ]
    ) -> "ApproveVerifiableDomainPayloadFields":
        """Subfields should come from the ApproveVerifiableDomainPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ApproveVerifiableDomainPayloadFields":
        self._alias = alias
        return self


class ArchiveProjectV2ItemPayloadFields(GraphQLField):
    client_mutation_id: "ArchiveProjectV2ItemPayloadGraphQLField" = (
        ArchiveProjectV2ItemPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    def fields(
        self,
        *subfields: Union[
            ArchiveProjectV2ItemPayloadGraphQLField, "ProjectV2ItemFields"
        ]
    ) -> "ArchiveProjectV2ItemPayloadFields":
        """Subfields should come from the ArchiveProjectV2ItemPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ArchiveProjectV2ItemPayloadFields":
        self._alias = alias
        return self


class ArchiveRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "ArchiveRepositoryPayloadGraphQLField" = (
        ArchiveRepositoryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[ArchiveRepositoryPayloadGraphQLField, "RepositoryFields"]
    ) -> "ArchiveRepositoryPayloadFields":
        """Subfields should come from the ArchiveRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ArchiveRepositoryPayloadFields":
        self._alias = alias
        return self


class AssignableInterface(GraphQLField):
    @classmethod
    def assigned_actors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "AssigneeConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AssigneeConnectionFields("assigned_actors", arguments=cleared_arguments)

    @classmethod
    def assignees(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("assignees", arguments=cleared_arguments)

    @classmethod
    def suggested_actors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        query: Optional[str] = None
    ) -> "AssigneeConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AssigneeConnectionFields("suggested_actors", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            AssignableGraphQLField, "AssigneeConnectionFields", "UserConnectionFields"
        ]
    ) -> "AssignableInterface":
        """Subfields should come from the AssignableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssignableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "AssignableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class AssignedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def assignable(cls) -> "AssignableInterface":
        return AssignableInterface("assignable")

    assignee: "AssigneeUnion" = AssigneeUnion("assignee")
    created_at: "AssignedEventGraphQLField" = AssignedEventGraphQLField("createdAt")
    id: "AssignedEventGraphQLField" = AssignedEventGraphQLField("id")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            AssignedEventGraphQLField,
            "ActorInterface",
            "AssignableInterface",
            "AssigneeUnion",
            "UserFields",
        ]
    ) -> "AssignedEventFields":
        """Subfields should come from the AssignedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssignedEventFields":
        self._alias = alias
        return self


class AssigneeConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "AssigneeEdgeFields":
        return AssigneeEdgeFields("edges")

    nodes: "AssigneeUnion" = AssigneeUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "AssigneeConnectionGraphQLField" = AssigneeConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            AssigneeConnectionGraphQLField,
            "AssigneeEdgeFields",
            "AssigneeUnion",
            "PageInfoFields",
        ]
    ) -> "AssigneeConnectionFields":
        """Subfields should come from the AssigneeConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssigneeConnectionFields":
        self._alias = alias
        return self


class AssigneeEdgeFields(GraphQLField):
    cursor: "AssigneeEdgeGraphQLField" = AssigneeEdgeGraphQLField("cursor")
    node: "AssigneeUnion" = AssigneeUnion("node")

    def fields(
        self, *subfields: Union[AssigneeEdgeGraphQLField, "AssigneeUnion"]
    ) -> "AssigneeEdgeFields":
        """Subfields should come from the AssigneeEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssigneeEdgeFields":
        self._alias = alias
        return self


class AuditEntryInterface(GraphQLField):
    action: "AuditEntryGraphQLField" = AuditEntryGraphQLField("action")
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "AuditEntryGraphQLField" = AuditEntryGraphQLField("actorIp")

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "AuditEntryGraphQLField" = AuditEntryGraphQLField("actorLogin")
    actor_resource_path: "AuditEntryGraphQLField" = AuditEntryGraphQLField(
        "actorResourcePath"
    )
    actor_url: "AuditEntryGraphQLField" = AuditEntryGraphQLField("actorUrl")
    created_at: "AuditEntryGraphQLField" = AuditEntryGraphQLField("createdAt")
    operation_type: "AuditEntryGraphQLField" = AuditEntryGraphQLField("operationType")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "AuditEntryGraphQLField" = AuditEntryGraphQLField("userLogin")
    user_resource_path: "AuditEntryGraphQLField" = AuditEntryGraphQLField(
        "userResourcePath"
    )
    user_url: "AuditEntryGraphQLField" = AuditEntryGraphQLField("userUrl")

    def fields(
        self,
        *subfields: Union[
            AuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "UserFields",
        ]
    ) -> "AuditEntryInterface":
        """Subfields should come from the AuditEntryInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AuditEntryInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "AuditEntryInterface":
        self._inline_fragments[type_name] = subfields
        return self


class AutoMergeDisabledEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "AutoMergeDisabledEventGraphQLField" = (
        AutoMergeDisabledEventGraphQLField("createdAt")
    )

    @classmethod
    def disabler(cls) -> "UserFields":
        return UserFields("disabler")

    id: "AutoMergeDisabledEventGraphQLField" = AutoMergeDisabledEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    reason: "AutoMergeDisabledEventGraphQLField" = AutoMergeDisabledEventGraphQLField(
        "reason"
    )
    reason_code: "AutoMergeDisabledEventGraphQLField" = (
        AutoMergeDisabledEventGraphQLField("reasonCode")
    )

    def fields(
        self,
        *subfields: Union[
            AutoMergeDisabledEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
            "UserFields",
        ]
    ) -> "AutoMergeDisabledEventFields":
        """Subfields should come from the AutoMergeDisabledEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoMergeDisabledEventFields":
        self._alias = alias
        return self


class AutoMergeEnabledEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "AutoMergeEnabledEventGraphQLField" = AutoMergeEnabledEventGraphQLField(
        "createdAt"
    )

    @classmethod
    def enabler(cls) -> "UserFields":
        return UserFields("enabler")

    id: "AutoMergeEnabledEventGraphQLField" = AutoMergeEnabledEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            AutoMergeEnabledEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
            "UserFields",
        ]
    ) -> "AutoMergeEnabledEventFields":
        """Subfields should come from the AutoMergeEnabledEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoMergeEnabledEventFields":
        self._alias = alias
        return self


class AutoMergeRequestFields(GraphQLField):
    author_email: "AutoMergeRequestGraphQLField" = AutoMergeRequestGraphQLField(
        "authorEmail"
    )
    commit_body: "AutoMergeRequestGraphQLField" = AutoMergeRequestGraphQLField(
        "commitBody"
    )
    commit_headline: "AutoMergeRequestGraphQLField" = AutoMergeRequestGraphQLField(
        "commitHeadline"
    )
    enabled_at: "AutoMergeRequestGraphQLField" = AutoMergeRequestGraphQLField(
        "enabledAt"
    )

    @classmethod
    def enabled_by(cls) -> "ActorInterface":
        return ActorInterface("enabled_by")

    merge_method: "AutoMergeRequestGraphQLField" = AutoMergeRequestGraphQLField(
        "mergeMethod"
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            AutoMergeRequestGraphQLField, "ActorInterface", "PullRequestFields"
        ]
    ) -> "AutoMergeRequestFields":
        """Subfields should come from the AutoMergeRequestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoMergeRequestFields":
        self._alias = alias
        return self


class AutoRebaseEnabledEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "AutoRebaseEnabledEventGraphQLField" = (
        AutoRebaseEnabledEventGraphQLField("createdAt")
    )

    @classmethod
    def enabler(cls) -> "UserFields":
        return UserFields("enabler")

    id: "AutoRebaseEnabledEventGraphQLField" = AutoRebaseEnabledEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            AutoRebaseEnabledEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
            "UserFields",
        ]
    ) -> "AutoRebaseEnabledEventFields":
        """Subfields should come from the AutoRebaseEnabledEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoRebaseEnabledEventFields":
        self._alias = alias
        return self


class AutoSquashEnabledEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "AutoSquashEnabledEventGraphQLField" = (
        AutoSquashEnabledEventGraphQLField("createdAt")
    )

    @classmethod
    def enabler(cls) -> "UserFields":
        return UserFields("enabler")

    id: "AutoSquashEnabledEventGraphQLField" = AutoSquashEnabledEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            AutoSquashEnabledEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
            "UserFields",
        ]
    ) -> "AutoSquashEnabledEventFields":
        """Subfields should come from the AutoSquashEnabledEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoSquashEnabledEventFields":
        self._alias = alias
        return self


class AutomaticBaseChangeFailedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "AutomaticBaseChangeFailedEventGraphQLField" = (
        AutomaticBaseChangeFailedEventGraphQLField("createdAt")
    )
    id: "AutomaticBaseChangeFailedEventGraphQLField" = (
        AutomaticBaseChangeFailedEventGraphQLField("id")
    )
    new_base: "AutomaticBaseChangeFailedEventGraphQLField" = (
        AutomaticBaseChangeFailedEventGraphQLField("newBase")
    )
    old_base: "AutomaticBaseChangeFailedEventGraphQLField" = (
        AutomaticBaseChangeFailedEventGraphQLField("oldBase")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            AutomaticBaseChangeFailedEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
        ]
    ) -> "AutomaticBaseChangeFailedEventFields":
        """Subfields should come from the AutomaticBaseChangeFailedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutomaticBaseChangeFailedEventFields":
        self._alias = alias
        return self


class AutomaticBaseChangeSucceededEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "AutomaticBaseChangeSucceededEventGraphQLField" = (
        AutomaticBaseChangeSucceededEventGraphQLField("createdAt")
    )
    id: "AutomaticBaseChangeSucceededEventGraphQLField" = (
        AutomaticBaseChangeSucceededEventGraphQLField("id")
    )
    new_base: "AutomaticBaseChangeSucceededEventGraphQLField" = (
        AutomaticBaseChangeSucceededEventGraphQLField("newBase")
    )
    old_base: "AutomaticBaseChangeSucceededEventGraphQLField" = (
        AutomaticBaseChangeSucceededEventGraphQLField("oldBase")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            AutomaticBaseChangeSucceededEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
        ]
    ) -> "AutomaticBaseChangeSucceededEventFields":
        """Subfields should come from the AutomaticBaseChangeSucceededEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutomaticBaseChangeSucceededEventFields":
        self._alias = alias
        return self


class BaseRefChangedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "BaseRefChangedEventGraphQLField" = BaseRefChangedEventGraphQLField(
        "createdAt"
    )
    current_ref_name: "BaseRefChangedEventGraphQLField" = (
        BaseRefChangedEventGraphQLField("currentRefName")
    )
    database_id: "BaseRefChangedEventGraphQLField" = BaseRefChangedEventGraphQLField(
        "databaseId"
    )
    id: "BaseRefChangedEventGraphQLField" = BaseRefChangedEventGraphQLField("id")
    previous_ref_name: "BaseRefChangedEventGraphQLField" = (
        BaseRefChangedEventGraphQLField("previousRefName")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            BaseRefChangedEventGraphQLField, "ActorInterface", "PullRequestFields"
        ]
    ) -> "BaseRefChangedEventFields":
        """Subfields should come from the BaseRefChangedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BaseRefChangedEventFields":
        self._alias = alias
        return self


class BaseRefDeletedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    base_ref_name: "BaseRefDeletedEventGraphQLField" = BaseRefDeletedEventGraphQLField(
        "baseRefName"
    )
    created_at: "BaseRefDeletedEventGraphQLField" = BaseRefDeletedEventGraphQLField(
        "createdAt"
    )
    id: "BaseRefDeletedEventGraphQLField" = BaseRefDeletedEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            BaseRefDeletedEventGraphQLField, "ActorInterface", "PullRequestFields"
        ]
    ) -> "BaseRefDeletedEventFields":
        """Subfields should come from the BaseRefDeletedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BaseRefDeletedEventFields":
        self._alias = alias
        return self


class BaseRefForcePushedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def after_commit(cls) -> "CommitFields":
        return CommitFields("after_commit")

    @classmethod
    def before_commit(cls) -> "CommitFields":
        return CommitFields("before_commit")

    created_at: "BaseRefForcePushedEventGraphQLField" = (
        BaseRefForcePushedEventGraphQLField("createdAt")
    )
    id: "BaseRefForcePushedEventGraphQLField" = BaseRefForcePushedEventGraphQLField(
        "id"
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    def fields(
        self,
        *subfields: Union[
            BaseRefForcePushedEventGraphQLField,
            "ActorInterface",
            "CommitFields",
            "PullRequestFields",
            "RefFields",
        ]
    ) -> "BaseRefForcePushedEventFields":
        """Subfields should come from the BaseRefForcePushedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BaseRefForcePushedEventFields":
        self._alias = alias
        return self


class BlameFields(GraphQLField):
    @classmethod
    def ranges(cls) -> "BlameRangeFields":
        return BlameRangeFields("ranges")

    def fields(
        self, *subfields: Union[BlameGraphQLField, "BlameRangeFields"]
    ) -> "BlameFields":
        """Subfields should come from the BlameFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BlameFields":
        self._alias = alias
        return self


class BlameRangeFields(GraphQLField):
    age: "BlameRangeGraphQLField" = BlameRangeGraphQLField("age")

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    ending_line: "BlameRangeGraphQLField" = BlameRangeGraphQLField("endingLine")
    starting_line: "BlameRangeGraphQLField" = BlameRangeGraphQLField("startingLine")

    def fields(
        self, *subfields: Union[BlameRangeGraphQLField, "CommitFields"]
    ) -> "BlameRangeFields":
        """Subfields should come from the BlameRangeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BlameRangeFields":
        self._alias = alias
        return self


class BotFields(GraphQLField):
    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "BotGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BotGraphQLField("avatar_url", arguments=cleared_arguments)

    created_at: "BotGraphQLField" = BotGraphQLField("createdAt")
    database_id: "BotGraphQLField" = BotGraphQLField("databaseId")
    id: "BotGraphQLField" = BotGraphQLField("id")
    login: "BotGraphQLField" = BotGraphQLField("login")
    resource_path: "BotGraphQLField" = BotGraphQLField("resourcePath")
    updated_at: "BotGraphQLField" = BotGraphQLField("updatedAt")
    url: "BotGraphQLField" = BotGraphQLField("url")

    def fields(self, *subfields: BotGraphQLField) -> "BotFields":
        """Subfields should come from the BotFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BotFields":
        self._alias = alias
        return self


class BranchNamePatternParametersFields(GraphQLField):
    name: "BranchNamePatternParametersGraphQLField" = (
        BranchNamePatternParametersGraphQLField("name")
    )
    negate: "BranchNamePatternParametersGraphQLField" = (
        BranchNamePatternParametersGraphQLField("negate")
    )
    operator: "BranchNamePatternParametersGraphQLField" = (
        BranchNamePatternParametersGraphQLField("operator")
    )
    pattern: "BranchNamePatternParametersGraphQLField" = (
        BranchNamePatternParametersGraphQLField("pattern")
    )

    def fields(
        self, *subfields: BranchNamePatternParametersGraphQLField
    ) -> "BranchNamePatternParametersFields":
        """Subfields should come from the BranchNamePatternParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BranchNamePatternParametersFields":
        self._alias = alias
        return self


class BranchProtectionRuleFields(GraphQLField):
    allows_deletions: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("allowsDeletions")
    )
    allows_force_pushes: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("allowsForcePushes")
    )
    blocks_creations: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("blocksCreations")
    )

    @classmethod
    def branch_protection_rule_conflicts(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "BranchProtectionRuleConflictConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BranchProtectionRuleConflictConnectionFields(
            "branch_protection_rule_conflicts", arguments=cleared_arguments
        )

    @classmethod
    def bypass_force_push_allowances(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "BypassForcePushAllowanceConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BypassForcePushAllowanceConnectionFields(
            "bypass_force_push_allowances", arguments=cleared_arguments
        )

    @classmethod
    def bypass_pull_request_allowances(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "BypassPullRequestAllowanceConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BypassPullRequestAllowanceConnectionFields(
            "bypass_pull_request_allowances", arguments=cleared_arguments
        )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "BranchProtectionRuleGraphQLField" = BranchProtectionRuleGraphQLField(
        "databaseId"
    )
    dismisses_stale_reviews: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("dismissesStaleReviews")
    )
    id: "BranchProtectionRuleGraphQLField" = BranchProtectionRuleGraphQLField("id")
    is_admin_enforced: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("isAdminEnforced")
    )
    lock_allows_fetch_and_merge: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("lockAllowsFetchAndMerge")
    )
    lock_branch: "BranchProtectionRuleGraphQLField" = BranchProtectionRuleGraphQLField(
        "lockBranch"
    )

    @classmethod
    def matching_refs(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        query: Optional[str] = None
    ) -> "RefConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RefConnectionFields("matching_refs", arguments=cleared_arguments)

    pattern: "BranchProtectionRuleGraphQLField" = BranchProtectionRuleGraphQLField(
        "pattern"
    )

    @classmethod
    def push_allowances(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PushAllowanceConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PushAllowanceConnectionFields(
            "push_allowances", arguments=cleared_arguments
        )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    require_last_push_approval: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requireLastPushApproval")
    )
    required_approving_review_count: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiredApprovingReviewCount")
    )
    required_deployment_environments: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiredDeploymentEnvironments")
    )
    required_status_check_contexts: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiredStatusCheckContexts")
    )

    @classmethod
    def required_status_checks(cls) -> "RequiredStatusCheckDescriptionFields":
        return RequiredStatusCheckDescriptionFields("required_status_checks")

    requires_approving_reviews: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiresApprovingReviews")
    )
    requires_code_owner_reviews: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiresCodeOwnerReviews")
    )
    requires_commit_signatures: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiresCommitSignatures")
    )
    requires_conversation_resolution: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiresConversationResolution")
    )
    requires_deployments: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiresDeployments")
    )
    requires_linear_history: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiresLinearHistory")
    )
    requires_status_checks: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiresStatusChecks")
    )
    requires_strict_status_checks: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("requiresStrictStatusChecks")
    )
    restricts_pushes: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("restrictsPushes")
    )
    restricts_review_dismissals: "BranchProtectionRuleGraphQLField" = (
        BranchProtectionRuleGraphQLField("restrictsReviewDismissals")
    )

    @classmethod
    def review_dismissal_allowances(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ReviewDismissalAllowanceConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReviewDismissalAllowanceConnectionFields(
            "review_dismissal_allowances", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            BranchProtectionRuleGraphQLField,
            "ActorInterface",
            "BranchProtectionRuleConflictConnectionFields",
            "BypassForcePushAllowanceConnectionFields",
            "BypassPullRequestAllowanceConnectionFields",
            "PushAllowanceConnectionFields",
            "RefConnectionFields",
            "RepositoryFields",
            "RequiredStatusCheckDescriptionFields",
            "ReviewDismissalAllowanceConnectionFields",
        ]
    ) -> "BranchProtectionRuleFields":
        """Subfields should come from the BranchProtectionRuleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BranchProtectionRuleFields":
        self._alias = alias
        return self


class BranchProtectionRuleConflictFields(GraphQLField):
    @classmethod
    def branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("branch_protection_rule")

    @classmethod
    def conflicting_branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("conflicting_branch_protection_rule")

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    def fields(
        self,
        *subfields: Union[
            BranchProtectionRuleConflictGraphQLField,
            "BranchProtectionRuleFields",
            "RefFields",
        ]
    ) -> "BranchProtectionRuleConflictFields":
        """Subfields should come from the BranchProtectionRuleConflictFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BranchProtectionRuleConflictFields":
        self._alias = alias
        return self


class BranchProtectionRuleConflictConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "BranchProtectionRuleConflictEdgeFields":
        return BranchProtectionRuleConflictEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "BranchProtectionRuleConflictFields":
        return BranchProtectionRuleConflictFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "BranchProtectionRuleConflictConnectionGraphQLField" = (
        BranchProtectionRuleConflictConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            BranchProtectionRuleConflictConnectionGraphQLField,
            "BranchProtectionRuleConflictEdgeFields",
            "BranchProtectionRuleConflictFields",
            "PageInfoFields",
        ]
    ) -> "BranchProtectionRuleConflictConnectionFields":
        """Subfields should come from the BranchProtectionRuleConflictConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BranchProtectionRuleConflictConnectionFields":
        self._alias = alias
        return self


class BranchProtectionRuleConflictEdgeFields(GraphQLField):
    cursor: "BranchProtectionRuleConflictEdgeGraphQLField" = (
        BranchProtectionRuleConflictEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "BranchProtectionRuleConflictFields":
        return BranchProtectionRuleConflictFields("node")

    def fields(
        self,
        *subfields: Union[
            BranchProtectionRuleConflictEdgeGraphQLField,
            "BranchProtectionRuleConflictFields",
        ]
    ) -> "BranchProtectionRuleConflictEdgeFields":
        """Subfields should come from the BranchProtectionRuleConflictEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BranchProtectionRuleConflictEdgeFields":
        self._alias = alias
        return self


class BranchProtectionRuleConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "BranchProtectionRuleEdgeFields":
        return BranchProtectionRuleEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "BranchProtectionRuleConnectionGraphQLField" = (
        BranchProtectionRuleConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            BranchProtectionRuleConnectionGraphQLField,
            "BranchProtectionRuleEdgeFields",
            "BranchProtectionRuleFields",
            "PageInfoFields",
        ]
    ) -> "BranchProtectionRuleConnectionFields":
        """Subfields should come from the BranchProtectionRuleConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BranchProtectionRuleConnectionFields":
        self._alias = alias
        return self


class BranchProtectionRuleEdgeFields(GraphQLField):
    cursor: "BranchProtectionRuleEdgeGraphQLField" = (
        BranchProtectionRuleEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("node")

    def fields(
        self,
        *subfields: Union[
            BranchProtectionRuleEdgeGraphQLField, "BranchProtectionRuleFields"
        ]
    ) -> "BranchProtectionRuleEdgeFields":
        """Subfields should come from the BranchProtectionRuleEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BranchProtectionRuleEdgeFields":
        self._alias = alias
        return self


class BypassForcePushAllowanceFields(GraphQLField):
    actor: "BranchActorAllowanceActorUnion" = BranchActorAllowanceActorUnion("actor")

    @classmethod
    def branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("branch_protection_rule")

    id: "BypassForcePushAllowanceGraphQLField" = BypassForcePushAllowanceGraphQLField(
        "id"
    )

    def fields(
        self,
        *subfields: Union[
            BypassForcePushAllowanceGraphQLField,
            "BranchActorAllowanceActorUnion",
            "BranchProtectionRuleFields",
        ]
    ) -> "BypassForcePushAllowanceFields":
        """Subfields should come from the BypassForcePushAllowanceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BypassForcePushAllowanceFields":
        self._alias = alias
        return self


class BypassForcePushAllowanceConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "BypassForcePushAllowanceEdgeFields":
        return BypassForcePushAllowanceEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "BypassForcePushAllowanceFields":
        return BypassForcePushAllowanceFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "BypassForcePushAllowanceConnectionGraphQLField" = (
        BypassForcePushAllowanceConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            BypassForcePushAllowanceConnectionGraphQLField,
            "BypassForcePushAllowanceEdgeFields",
            "BypassForcePushAllowanceFields",
            "PageInfoFields",
        ]
    ) -> "BypassForcePushAllowanceConnectionFields":
        """Subfields should come from the BypassForcePushAllowanceConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BypassForcePushAllowanceConnectionFields":
        self._alias = alias
        return self


class BypassForcePushAllowanceEdgeFields(GraphQLField):
    cursor: "BypassForcePushAllowanceEdgeGraphQLField" = (
        BypassForcePushAllowanceEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "BypassForcePushAllowanceFields":
        return BypassForcePushAllowanceFields("node")

    def fields(
        self,
        *subfields: Union[
            BypassForcePushAllowanceEdgeGraphQLField, "BypassForcePushAllowanceFields"
        ]
    ) -> "BypassForcePushAllowanceEdgeFields":
        """Subfields should come from the BypassForcePushAllowanceEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BypassForcePushAllowanceEdgeFields":
        self._alias = alias
        return self


class BypassPullRequestAllowanceFields(GraphQLField):
    actor: "BranchActorAllowanceActorUnion" = BranchActorAllowanceActorUnion("actor")

    @classmethod
    def branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("branch_protection_rule")

    id: "BypassPullRequestAllowanceGraphQLField" = (
        BypassPullRequestAllowanceGraphQLField("id")
    )

    def fields(
        self,
        *subfields: Union[
            BypassPullRequestAllowanceGraphQLField,
            "BranchActorAllowanceActorUnion",
            "BranchProtectionRuleFields",
        ]
    ) -> "BypassPullRequestAllowanceFields":
        """Subfields should come from the BypassPullRequestAllowanceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BypassPullRequestAllowanceFields":
        self._alias = alias
        return self


class BypassPullRequestAllowanceConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "BypassPullRequestAllowanceEdgeFields":
        return BypassPullRequestAllowanceEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "BypassPullRequestAllowanceFields":
        return BypassPullRequestAllowanceFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "BypassPullRequestAllowanceConnectionGraphQLField" = (
        BypassPullRequestAllowanceConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            BypassPullRequestAllowanceConnectionGraphQLField,
            "BypassPullRequestAllowanceEdgeFields",
            "BypassPullRequestAllowanceFields",
            "PageInfoFields",
        ]
    ) -> "BypassPullRequestAllowanceConnectionFields":
        """Subfields should come from the BypassPullRequestAllowanceConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BypassPullRequestAllowanceConnectionFields":
        self._alias = alias
        return self


class BypassPullRequestAllowanceEdgeFields(GraphQLField):
    cursor: "BypassPullRequestAllowanceEdgeGraphQLField" = (
        BypassPullRequestAllowanceEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "BypassPullRequestAllowanceFields":
        return BypassPullRequestAllowanceFields("node")

    def fields(
        self,
        *subfields: Union[
            BypassPullRequestAllowanceEdgeGraphQLField,
            "BypassPullRequestAllowanceFields",
        ]
    ) -> "BypassPullRequestAllowanceEdgeFields":
        """Subfields should come from the BypassPullRequestAllowanceEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BypassPullRequestAllowanceEdgeFields":
        self._alias = alias
        return self


class CVSSFields(GraphQLField):
    score: "CVSSGraphQLField" = CVSSGraphQLField("score")
    vector_string: "CVSSGraphQLField" = CVSSGraphQLField("vectorString")

    def fields(self, *subfields: CVSSGraphQLField) -> "CVSSFields":
        """Subfields should come from the CVSSFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CVSSFields":
        self._alias = alias
        return self


class CWEFields(GraphQLField):
    cwe_id: "CWEGraphQLField" = CWEGraphQLField("cweId")
    description: "CWEGraphQLField" = CWEGraphQLField("description")
    id: "CWEGraphQLField" = CWEGraphQLField("id")
    name: "CWEGraphQLField" = CWEGraphQLField("name")

    def fields(self, *subfields: CWEGraphQLField) -> "CWEFields":
        """Subfields should come from the CWEFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CWEFields":
        self._alias = alias
        return self


class CWEConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CWEEdgeFields":
        return CWEEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CWEFields":
        return CWEFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CWEConnectionGraphQLField" = CWEConnectionGraphQLField("totalCount")

    def fields(
        self,
        *subfields: Union[
            CWEConnectionGraphQLField, "CWEEdgeFields", "CWEFields", "PageInfoFields"
        ]
    ) -> "CWEConnectionFields":
        """Subfields should come from the CWEConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CWEConnectionFields":
        self._alias = alias
        return self


class CWEEdgeFields(GraphQLField):
    cursor: "CWEEdgeGraphQLField" = CWEEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CWEFields":
        return CWEFields("node")

    def fields(
        self, *subfields: Union[CWEEdgeGraphQLField, "CWEFields"]
    ) -> "CWEEdgeFields":
        """Subfields should come from the CWEEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CWEEdgeFields":
        self._alias = alias
        return self


class CancelEnterpriseAdminInvitationPayloadFields(GraphQLField):
    client_mutation_id: "CancelEnterpriseAdminInvitationPayloadGraphQLField" = (
        CancelEnterpriseAdminInvitationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def invitation(cls) -> "EnterpriseAdministratorInvitationFields":
        return EnterpriseAdministratorInvitationFields("invitation")

    message: "CancelEnterpriseAdminInvitationPayloadGraphQLField" = (
        CancelEnterpriseAdminInvitationPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            CancelEnterpriseAdminInvitationPayloadGraphQLField,
            "EnterpriseAdministratorInvitationFields",
        ]
    ) -> "CancelEnterpriseAdminInvitationPayloadFields":
        """Subfields should come from the CancelEnterpriseAdminInvitationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CancelEnterpriseAdminInvitationPayloadFields":
        self._alias = alias
        return self


class CancelEnterpriseMemberInvitationPayloadFields(GraphQLField):
    client_mutation_id: "CancelEnterpriseMemberInvitationPayloadGraphQLField" = (
        CancelEnterpriseMemberInvitationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def invitation(cls) -> "EnterpriseMemberInvitationFields":
        return EnterpriseMemberInvitationFields("invitation")

    message: "CancelEnterpriseMemberInvitationPayloadGraphQLField" = (
        CancelEnterpriseMemberInvitationPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            CancelEnterpriseMemberInvitationPayloadGraphQLField,
            "EnterpriseMemberInvitationFields",
        ]
    ) -> "CancelEnterpriseMemberInvitationPayloadFields":
        """Subfields should come from the CancelEnterpriseMemberInvitationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CancelEnterpriseMemberInvitationPayloadFields":
        self._alias = alias
        return self


class CancelSponsorshipPayloadFields(GraphQLField):
    client_mutation_id: "CancelSponsorshipPayloadGraphQLField" = (
        CancelSponsorshipPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsors_tier(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("sponsors_tier")

    def fields(
        self,
        *subfields: Union[CancelSponsorshipPayloadGraphQLField, "SponsorsTierFields"]
    ) -> "CancelSponsorshipPayloadFields":
        """Subfields should come from the CancelSponsorshipPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CancelSponsorshipPayloadFields":
        self._alias = alias
        return self


class ChangeUserStatusPayloadFields(GraphQLField):
    client_mutation_id: "ChangeUserStatusPayloadGraphQLField" = (
        ChangeUserStatusPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def status(cls) -> "UserStatusFields":
        return UserStatusFields("status")

    def fields(
        self, *subfields: Union[ChangeUserStatusPayloadGraphQLField, "UserStatusFields"]
    ) -> "ChangeUserStatusPayloadFields":
        """Subfields should come from the ChangeUserStatusPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChangeUserStatusPayloadFields":
        self._alias = alias
        return self


class CheckAnnotationFields(GraphQLField):
    annotation_level: "CheckAnnotationGraphQLField" = CheckAnnotationGraphQLField(
        "annotationLevel"
    )
    blob_url: "CheckAnnotationGraphQLField" = CheckAnnotationGraphQLField("blobUrl")
    database_id: "CheckAnnotationGraphQLField" = CheckAnnotationGraphQLField(
        "databaseId"
    )

    @classmethod
    def location(cls) -> "CheckAnnotationSpanFields":
        return CheckAnnotationSpanFields("location")

    message: "CheckAnnotationGraphQLField" = CheckAnnotationGraphQLField("message")
    path: "CheckAnnotationGraphQLField" = CheckAnnotationGraphQLField("path")
    raw_details: "CheckAnnotationGraphQLField" = CheckAnnotationGraphQLField(
        "rawDetails"
    )
    title: "CheckAnnotationGraphQLField" = CheckAnnotationGraphQLField("title")

    def fields(
        self,
        *subfields: Union[CheckAnnotationGraphQLField, "CheckAnnotationSpanFields"]
    ) -> "CheckAnnotationFields":
        """Subfields should come from the CheckAnnotationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckAnnotationFields":
        self._alias = alias
        return self


class CheckAnnotationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CheckAnnotationEdgeFields":
        return CheckAnnotationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CheckAnnotationFields":
        return CheckAnnotationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CheckAnnotationConnectionGraphQLField" = (
        CheckAnnotationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CheckAnnotationConnectionGraphQLField,
            "CheckAnnotationEdgeFields",
            "CheckAnnotationFields",
            "PageInfoFields",
        ]
    ) -> "CheckAnnotationConnectionFields":
        """Subfields should come from the CheckAnnotationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckAnnotationConnectionFields":
        self._alias = alias
        return self


class CheckAnnotationEdgeFields(GraphQLField):
    cursor: "CheckAnnotationEdgeGraphQLField" = CheckAnnotationEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "CheckAnnotationFields":
        return CheckAnnotationFields("node")

    def fields(
        self,
        *subfields: Union[CheckAnnotationEdgeGraphQLField, "CheckAnnotationFields"]
    ) -> "CheckAnnotationEdgeFields":
        """Subfields should come from the CheckAnnotationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckAnnotationEdgeFields":
        self._alias = alias
        return self


class CheckAnnotationPositionFields(GraphQLField):
    column: "CheckAnnotationPositionGraphQLField" = CheckAnnotationPositionGraphQLField(
        "column"
    )
    line: "CheckAnnotationPositionGraphQLField" = CheckAnnotationPositionGraphQLField(
        "line"
    )

    def fields(
        self, *subfields: CheckAnnotationPositionGraphQLField
    ) -> "CheckAnnotationPositionFields":
        """Subfields should come from the CheckAnnotationPositionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckAnnotationPositionFields":
        self._alias = alias
        return self


class CheckAnnotationSpanFields(GraphQLField):
    @classmethod
    def end(cls) -> "CheckAnnotationPositionFields":
        return CheckAnnotationPositionFields("end")

    @classmethod
    def start(cls) -> "CheckAnnotationPositionFields":
        return CheckAnnotationPositionFields("start")

    def fields(
        self,
        *subfields: Union[
            CheckAnnotationSpanGraphQLField, "CheckAnnotationPositionFields"
        ]
    ) -> "CheckAnnotationSpanFields":
        """Subfields should come from the CheckAnnotationSpanFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckAnnotationSpanFields":
        self._alias = alias
        return self


class CheckRunFields(GraphQLField):
    @classmethod
    def annotations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CheckAnnotationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CheckAnnotationConnectionFields(
            "annotations", arguments=cleared_arguments
        )

    @classmethod
    def check_suite(cls) -> "CheckSuiteFields":
        return CheckSuiteFields("check_suite")

    completed_at: "CheckRunGraphQLField" = CheckRunGraphQLField("completedAt")
    conclusion: "CheckRunGraphQLField" = CheckRunGraphQLField("conclusion")
    database_id: "CheckRunGraphQLField" = CheckRunGraphQLField("databaseId")

    @classmethod
    def deployment(cls) -> "DeploymentFields":
        return DeploymentFields("deployment")

    details_url: "CheckRunGraphQLField" = CheckRunGraphQLField("detailsUrl")
    external_id: "CheckRunGraphQLField" = CheckRunGraphQLField("externalId")
    id: "CheckRunGraphQLField" = CheckRunGraphQLField("id")

    @classmethod
    def is_required(
        cls,
        *,
        pull_request_id: Optional[str] = None,
        pull_request_number: Optional[int] = None
    ) -> "CheckRunGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "pullRequestId": {"type": "ID", "value": pull_request_id},
            "pullRequestNumber": {"type": "Int", "value": pull_request_number},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CheckRunGraphQLField("is_required", arguments=cleared_arguments)

    name: "CheckRunGraphQLField" = CheckRunGraphQLField("name")

    @classmethod
    def pending_deployment_request(cls) -> "DeploymentRequestFields":
        return DeploymentRequestFields("pending_deployment_request")

    permalink: "CheckRunGraphQLField" = CheckRunGraphQLField("permalink")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "CheckRunGraphQLField" = CheckRunGraphQLField("resourcePath")
    started_at: "CheckRunGraphQLField" = CheckRunGraphQLField("startedAt")
    status: "CheckRunGraphQLField" = CheckRunGraphQLField("status")

    @classmethod
    def steps(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        number: Optional[int] = None
    ) -> "CheckStepConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "number": {"type": "Int", "value": number},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CheckStepConnectionFields("steps", arguments=cleared_arguments)

    summary: "CheckRunGraphQLField" = CheckRunGraphQLField("summary")
    text: "CheckRunGraphQLField" = CheckRunGraphQLField("text")
    title: "CheckRunGraphQLField" = CheckRunGraphQLField("title")
    url: "CheckRunGraphQLField" = CheckRunGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            CheckRunGraphQLField,
            "CheckAnnotationConnectionFields",
            "CheckStepConnectionFields",
            "CheckSuiteFields",
            "DeploymentFields",
            "DeploymentRequestFields",
            "RepositoryFields",
        ]
    ) -> "CheckRunFields":
        """Subfields should come from the CheckRunFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckRunFields":
        self._alias = alias
        return self


class CheckRunConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CheckRunEdgeFields":
        return CheckRunEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CheckRunFields":
        return CheckRunFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CheckRunConnectionGraphQLField" = CheckRunConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            CheckRunConnectionGraphQLField,
            "CheckRunEdgeFields",
            "CheckRunFields",
            "PageInfoFields",
        ]
    ) -> "CheckRunConnectionFields":
        """Subfields should come from the CheckRunConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckRunConnectionFields":
        self._alias = alias
        return self


class CheckRunEdgeFields(GraphQLField):
    cursor: "CheckRunEdgeGraphQLField" = CheckRunEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CheckRunFields":
        return CheckRunFields("node")

    def fields(
        self, *subfields: Union[CheckRunEdgeGraphQLField, "CheckRunFields"]
    ) -> "CheckRunEdgeFields":
        """Subfields should come from the CheckRunEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckRunEdgeFields":
        self._alias = alias
        return self


class CheckRunStateCountFields(GraphQLField):
    count: "CheckRunStateCountGraphQLField" = CheckRunStateCountGraphQLField("count")
    state: "CheckRunStateCountGraphQLField" = CheckRunStateCountGraphQLField("state")

    def fields(
        self, *subfields: CheckRunStateCountGraphQLField
    ) -> "CheckRunStateCountFields":
        """Subfields should come from the CheckRunStateCountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckRunStateCountFields":
        self._alias = alias
        return self


class CheckStepFields(GraphQLField):
    completed_at: "CheckStepGraphQLField" = CheckStepGraphQLField("completedAt")
    conclusion: "CheckStepGraphQLField" = CheckStepGraphQLField("conclusion")
    external_id: "CheckStepGraphQLField" = CheckStepGraphQLField("externalId")
    name: "CheckStepGraphQLField" = CheckStepGraphQLField("name")
    number: "CheckStepGraphQLField" = CheckStepGraphQLField("number")
    seconds_to_completion: "CheckStepGraphQLField" = CheckStepGraphQLField(
        "secondsToCompletion"
    )
    started_at: "CheckStepGraphQLField" = CheckStepGraphQLField("startedAt")
    status: "CheckStepGraphQLField" = CheckStepGraphQLField("status")

    def fields(self, *subfields: CheckStepGraphQLField) -> "CheckStepFields":
        """Subfields should come from the CheckStepFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckStepFields":
        self._alias = alias
        return self


class CheckStepConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CheckStepEdgeFields":
        return CheckStepEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CheckStepFields":
        return CheckStepFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CheckStepConnectionGraphQLField" = CheckStepConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            CheckStepConnectionGraphQLField,
            "CheckStepEdgeFields",
            "CheckStepFields",
            "PageInfoFields",
        ]
    ) -> "CheckStepConnectionFields":
        """Subfields should come from the CheckStepConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckStepConnectionFields":
        self._alias = alias
        return self


class CheckStepEdgeFields(GraphQLField):
    cursor: "CheckStepEdgeGraphQLField" = CheckStepEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CheckStepFields":
        return CheckStepFields("node")

    def fields(
        self, *subfields: Union[CheckStepEdgeGraphQLField, "CheckStepFields"]
    ) -> "CheckStepEdgeFields":
        """Subfields should come from the CheckStepEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckStepEdgeFields":
        self._alias = alias
        return self


class CheckSuiteFields(GraphQLField):
    @classmethod
    def app(cls) -> "AppFields":
        return AppFields("app")

    @classmethod
    def branch(cls) -> "RefFields":
        return RefFields("branch")

    @classmethod
    def check_runs(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by: Optional[CheckRunFilter] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CheckRunConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterBy": {"type": "CheckRunFilter", "value": filter_by},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CheckRunConnectionFields("check_runs", arguments=cleared_arguments)

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    conclusion: "CheckSuiteGraphQLField" = CheckSuiteGraphQLField("conclusion")
    created_at: "CheckSuiteGraphQLField" = CheckSuiteGraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "UserFields":
        return UserFields("creator")

    database_id: "CheckSuiteGraphQLField" = CheckSuiteGraphQLField("databaseId")
    id: "CheckSuiteGraphQLField" = CheckSuiteGraphQLField("id")

    @classmethod
    def matching_pull_requests(
        cls,
        *,
        after: Optional[str] = None,
        base_ref_name: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        head_ref_name: Optional[str] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[PullRequestState] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "baseRefName": {"type": "String", "value": base_ref_name},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "headRefName": {"type": "String", "value": head_ref_name},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "PullRequestState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields(
            "matching_pull_requests", arguments=cleared_arguments
        )

    @classmethod
    def push(cls) -> "PushFields":
        return PushFields("push")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "CheckSuiteGraphQLField" = CheckSuiteGraphQLField("resourcePath")
    status: "CheckSuiteGraphQLField" = CheckSuiteGraphQLField("status")
    updated_at: "CheckSuiteGraphQLField" = CheckSuiteGraphQLField("updatedAt")
    url: "CheckSuiteGraphQLField" = CheckSuiteGraphQLField("url")

    @classmethod
    def workflow_run(cls) -> "WorkflowRunFields":
        return WorkflowRunFields("workflow_run")

    def fields(
        self,
        *subfields: Union[
            CheckSuiteGraphQLField,
            "AppFields",
            "CheckRunConnectionFields",
            "CommitFields",
            "PullRequestConnectionFields",
            "PushFields",
            "RefFields",
            "RepositoryFields",
            "UserFields",
            "WorkflowRunFields",
        ]
    ) -> "CheckSuiteFields":
        """Subfields should come from the CheckSuiteFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckSuiteFields":
        self._alias = alias
        return self


class CheckSuiteConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CheckSuiteEdgeFields":
        return CheckSuiteEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CheckSuiteFields":
        return CheckSuiteFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CheckSuiteConnectionGraphQLField" = CheckSuiteConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            CheckSuiteConnectionGraphQLField,
            "CheckSuiteEdgeFields",
            "CheckSuiteFields",
            "PageInfoFields",
        ]
    ) -> "CheckSuiteConnectionFields":
        """Subfields should come from the CheckSuiteConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckSuiteConnectionFields":
        self._alias = alias
        return self


class CheckSuiteEdgeFields(GraphQLField):
    cursor: "CheckSuiteEdgeGraphQLField" = CheckSuiteEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CheckSuiteFields":
        return CheckSuiteFields("node")

    def fields(
        self, *subfields: Union[CheckSuiteEdgeGraphQLField, "CheckSuiteFields"]
    ) -> "CheckSuiteEdgeFields":
        """Subfields should come from the CheckSuiteEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CheckSuiteEdgeFields":
        self._alias = alias
        return self


class ClearLabelsFromLabelablePayloadFields(GraphQLField):
    client_mutation_id: "ClearLabelsFromLabelablePayloadGraphQLField" = (
        ClearLabelsFromLabelablePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def labelable(cls) -> "LabelableInterface":
        return LabelableInterface("labelable")

    def fields(
        self,
        *subfields: Union[
            ClearLabelsFromLabelablePayloadGraphQLField, "LabelableInterface"
        ]
    ) -> "ClearLabelsFromLabelablePayloadFields":
        """Subfields should come from the ClearLabelsFromLabelablePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClearLabelsFromLabelablePayloadFields":
        self._alias = alias
        return self


class ClearProjectV2ItemFieldValuePayloadFields(GraphQLField):
    client_mutation_id: "ClearProjectV2ItemFieldValuePayloadGraphQLField" = (
        ClearProjectV2ItemFieldValuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_v_2_item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("project_v_2_item")

    def fields(
        self,
        *subfields: Union[
            ClearProjectV2ItemFieldValuePayloadGraphQLField, "ProjectV2ItemFields"
        ]
    ) -> "ClearProjectV2ItemFieldValuePayloadFields":
        """Subfields should come from the ClearProjectV2ItemFieldValuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClearProjectV2ItemFieldValuePayloadFields":
        self._alias = alias
        return self


class CloneProjectPayloadFields(GraphQLField):
    client_mutation_id: "CloneProjectPayloadGraphQLField" = (
        CloneProjectPayloadGraphQLField("clientMutationId")
    )
    job_status_id: "CloneProjectPayloadGraphQLField" = CloneProjectPayloadGraphQLField(
        "jobStatusId"
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    def fields(
        self, *subfields: Union[CloneProjectPayloadGraphQLField, "ProjectFields"]
    ) -> "CloneProjectPayloadFields":
        """Subfields should come from the CloneProjectPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloneProjectPayloadFields":
        self._alias = alias
        return self


class CloneTemplateRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "CloneTemplateRepositoryPayloadGraphQLField" = (
        CloneTemplateRepositoryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            CloneTemplateRepositoryPayloadGraphQLField, "RepositoryFields"
        ]
    ) -> "CloneTemplateRepositoryPayloadFields":
        """Subfields should come from the CloneTemplateRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloneTemplateRepositoryPayloadFields":
        self._alias = alias
        return self


class ClosableInterface(GraphQLField):
    closed: "ClosableGraphQLField" = ClosableGraphQLField("closed")
    closed_at: "ClosableGraphQLField" = ClosableGraphQLField("closedAt")
    viewer_can_close: "ClosableGraphQLField" = ClosableGraphQLField("viewerCanClose")
    viewer_can_reopen: "ClosableGraphQLField" = ClosableGraphQLField("viewerCanReopen")

    def fields(self, *subfields: ClosableGraphQLField) -> "ClosableInterface":
        """Subfields should come from the ClosableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClosableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ClosableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class CloseDiscussionPayloadFields(GraphQLField):
    client_mutation_id: "CloseDiscussionPayloadGraphQLField" = (
        CloseDiscussionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    def fields(
        self, *subfields: Union[CloseDiscussionPayloadGraphQLField, "DiscussionFields"]
    ) -> "CloseDiscussionPayloadFields":
        """Subfields should come from the CloseDiscussionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloseDiscussionPayloadFields":
        self._alias = alias
        return self


class CloseIssuePayloadFields(GraphQLField):
    client_mutation_id: "CloseIssuePayloadGraphQLField" = CloseIssuePayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[CloseIssuePayloadGraphQLField, "IssueFields"]
    ) -> "CloseIssuePayloadFields":
        """Subfields should come from the CloseIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloseIssuePayloadFields":
        self._alias = alias
        return self


class ClosePullRequestPayloadFields(GraphQLField):
    client_mutation_id: "ClosePullRequestPayloadGraphQLField" = (
        ClosePullRequestPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[ClosePullRequestPayloadGraphQLField, "PullRequestFields"]
    ) -> "ClosePullRequestPayloadFields":
        """Subfields should come from the ClosePullRequestPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClosePullRequestPayloadFields":
        self._alias = alias
        return self


class ClosedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def closable(cls) -> "ClosableInterface":
        return ClosableInterface("closable")

    closer: "CloserUnion" = CloserUnion("closer")
    created_at: "ClosedEventGraphQLField" = ClosedEventGraphQLField("createdAt")
    duplicate_of: "IssueOrPullRequestUnion" = IssueOrPullRequestUnion("duplicateOf")
    id: "ClosedEventGraphQLField" = ClosedEventGraphQLField("id")
    resource_path: "ClosedEventGraphQLField" = ClosedEventGraphQLField("resourcePath")
    state_reason: "ClosedEventGraphQLField" = ClosedEventGraphQLField("stateReason")
    url: "ClosedEventGraphQLField" = ClosedEventGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            ClosedEventGraphQLField,
            "ActorInterface",
            "ClosableInterface",
            "CloserUnion",
            "IssueOrPullRequestUnion",
        ]
    ) -> "ClosedEventFields":
        """Subfields should come from the ClosedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClosedEventFields":
        self._alias = alias
        return self


class CodeOfConductFields(GraphQLField):
    body: "CodeOfConductGraphQLField" = CodeOfConductGraphQLField("body")
    id: "CodeOfConductGraphQLField" = CodeOfConductGraphQLField("id")
    key: "CodeOfConductGraphQLField" = CodeOfConductGraphQLField("key")
    name: "CodeOfConductGraphQLField" = CodeOfConductGraphQLField("name")
    resource_path: "CodeOfConductGraphQLField" = CodeOfConductGraphQLField(
        "resourcePath"
    )
    url: "CodeOfConductGraphQLField" = CodeOfConductGraphQLField("url")

    def fields(self, *subfields: CodeOfConductGraphQLField) -> "CodeOfConductFields":
        """Subfields should come from the CodeOfConductFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CodeOfConductFields":
        self._alias = alias
        return self


class CodeScanningParametersFields(GraphQLField):
    @classmethod
    def code_scanning_tools(cls) -> "CodeScanningToolFields":
        return CodeScanningToolFields("code_scanning_tools")

    def fields(
        self,
        *subfields: Union[CodeScanningParametersGraphQLField, "CodeScanningToolFields"]
    ) -> "CodeScanningParametersFields":
        """Subfields should come from the CodeScanningParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CodeScanningParametersFields":
        self._alias = alias
        return self


class CodeScanningToolFields(GraphQLField):
    alerts_threshold: "CodeScanningToolGraphQLField" = CodeScanningToolGraphQLField(
        "alertsThreshold"
    )
    security_alerts_threshold: "CodeScanningToolGraphQLField" = (
        CodeScanningToolGraphQLField("securityAlertsThreshold")
    )
    tool: "CodeScanningToolGraphQLField" = CodeScanningToolGraphQLField("tool")

    def fields(
        self, *subfields: CodeScanningToolGraphQLField
    ) -> "CodeScanningToolFields":
        """Subfields should come from the CodeScanningToolFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CodeScanningToolFields":
        self._alias = alias
        return self


class CommentInterface(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "CommentGraphQLField" = CommentGraphQLField("authorAssociation")
    body: "CommentGraphQLField" = CommentGraphQLField("body")
    body_html: "CommentGraphQLField" = CommentGraphQLField("bodyHTML")
    body_text: "CommentGraphQLField" = CommentGraphQLField("bodyText")
    created_at: "CommentGraphQLField" = CommentGraphQLField("createdAt")
    created_via_email: "CommentGraphQLField" = CommentGraphQLField("createdViaEmail")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    id: "CommentGraphQLField" = CommentGraphQLField("id")
    includes_created_edit: "CommentGraphQLField" = CommentGraphQLField(
        "includesCreatedEdit"
    )
    last_edited_at: "CommentGraphQLField" = CommentGraphQLField("lastEditedAt")
    published_at: "CommentGraphQLField" = CommentGraphQLField("publishedAt")
    updated_at: "CommentGraphQLField" = CommentGraphQLField("updatedAt")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_did_author: "CommentGraphQLField" = CommentGraphQLField("viewerDidAuthor")

    def fields(
        self,
        *subfields: Union[
            CommentGraphQLField, "ActorInterface", "UserContentEditConnectionFields"
        ]
    ) -> "CommentInterface":
        """Subfields should come from the CommentInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommentInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "CommentInterface":
        self._inline_fragments[type_name] = subfields
        return self


class CommentDeletedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "CommentDeletedEventGraphQLField" = CommentDeletedEventGraphQLField(
        "createdAt"
    )
    database_id: "CommentDeletedEventGraphQLField" = CommentDeletedEventGraphQLField(
        "databaseId"
    )

    @classmethod
    def deleted_comment_author(cls) -> "ActorInterface":
        return ActorInterface("deleted_comment_author")

    id: "CommentDeletedEventGraphQLField" = CommentDeletedEventGraphQLField("id")

    def fields(
        self, *subfields: Union[CommentDeletedEventGraphQLField, "ActorInterface"]
    ) -> "CommentDeletedEventFields":
        """Subfields should come from the CommentDeletedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommentDeletedEventFields":
        self._alias = alias
        return self


class CommitFields(GraphQLField):
    abbreviated_oid: "CommitGraphQLField" = CommitGraphQLField("abbreviatedOid")
    additions: "CommitGraphQLField" = CommitGraphQLField("additions")

    @classmethod
    def associated_pull_requests(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[PullRequestOrder] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "PullRequestOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields(
            "associated_pull_requests", arguments=cleared_arguments
        )

    @classmethod
    def author(cls) -> "GitActorFields":
        return GitActorFields("author")

    authored_by_committer: "CommitGraphQLField" = CommitGraphQLField(
        "authoredByCommitter"
    )
    authored_date: "CommitGraphQLField" = CommitGraphQLField("authoredDate")

    @classmethod
    def authors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "GitActorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GitActorConnectionFields("authors", arguments=cleared_arguments)

    @classmethod
    def blame(cls, path: str) -> "BlameFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "path": {"type": "String!", "value": path}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BlameFields("blame", arguments=cleared_arguments)

    changed_files: "CommitGraphQLField" = CommitGraphQLField("changedFiles")
    changed_files_if_available: "CommitGraphQLField" = CommitGraphQLField(
        "changedFilesIfAvailable"
    )

    @classmethod
    def check_suites(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by: Optional[CheckSuiteFilter] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CheckSuiteConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterBy": {"type": "CheckSuiteFilter", "value": filter_by},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CheckSuiteConnectionFields("check_suites", arguments=cleared_arguments)

    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CommitCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CommitCommentConnectionFields("comments", arguments=cleared_arguments)

    commit_resource_path: "CommitGraphQLField" = CommitGraphQLField(
        "commitResourcePath"
    )
    commit_url: "CommitGraphQLField" = CommitGraphQLField("commitUrl")
    committed_date: "CommitGraphQLField" = CommitGraphQLField("committedDate")
    committed_via_web: "CommitGraphQLField" = CommitGraphQLField("committedViaWeb")

    @classmethod
    def committer(cls) -> "GitActorFields":
        return GitActorFields("committer")

    deletions: "CommitGraphQLField" = CommitGraphQLField("deletions")

    @classmethod
    def deployments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        environments: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[DeploymentOrder] = None
    ) -> "DeploymentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "environments": {"type": "String", "value": environments},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "DeploymentOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentConnectionFields("deployments", arguments=cleared_arguments)

    @classmethod
    def file(cls, path: str) -> "TreeEntryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "path": {"type": "String!", "value": path}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TreeEntryFields("file", arguments=cleared_arguments)

    @classmethod
    def history(
        cls,
        *,
        after: Optional[str] = None,
        author: Optional[CommitAuthor] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        path: Optional[str] = None,
        since: Optional[Any] = None,
        until: Optional[Any] = None
    ) -> "CommitHistoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "author": {"type": "CommitAuthor", "value": author},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "path": {"type": "String", "value": path},
            "since": {"type": "GitTimestamp", "value": since},
            "until": {"type": "GitTimestamp", "value": until},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CommitHistoryConnectionFields("history", arguments=cleared_arguments)

    id: "CommitGraphQLField" = CommitGraphQLField("id")
    message: "CommitGraphQLField" = CommitGraphQLField("message")
    message_body: "CommitGraphQLField" = CommitGraphQLField("messageBody")
    message_body_html: "CommitGraphQLField" = CommitGraphQLField("messageBodyHTML")
    message_headline: "CommitGraphQLField" = CommitGraphQLField("messageHeadline")
    message_headline_html: "CommitGraphQLField" = CommitGraphQLField(
        "messageHeadlineHTML"
    )
    oid: "CommitGraphQLField" = CommitGraphQLField("oid")

    @classmethod
    def on_behalf_of(cls) -> "OrganizationFields":
        return OrganizationFields("on_behalf_of")

    @classmethod
    def parents(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CommitConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CommitConnectionFields("parents", arguments=cleared_arguments)

    pushed_date: "CommitGraphQLField" = CommitGraphQLField("pushedDate")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "CommitGraphQLField" = CommitGraphQLField("resourcePath")

    @classmethod
    def signature(cls) -> "GitSignatureInterface":
        return GitSignatureInterface("signature")

    @classmethod
    def status(cls) -> "StatusFields":
        return StatusFields("status")

    @classmethod
    def status_check_rollup(cls) -> "StatusCheckRollupFields":
        return StatusCheckRollupFields("status_check_rollup")

    @classmethod
    def submodules(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "SubmoduleConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SubmoduleConnectionFields("submodules", arguments=cleared_arguments)

    tarball_url: "CommitGraphQLField" = CommitGraphQLField("tarballUrl")

    @classmethod
    def tree(cls) -> "TreeFields":
        return TreeFields("tree")

    tree_resource_path: "CommitGraphQLField" = CommitGraphQLField("treeResourcePath")
    tree_url: "CommitGraphQLField" = CommitGraphQLField("treeUrl")
    url: "CommitGraphQLField" = CommitGraphQLField("url")
    viewer_can_subscribe: "CommitGraphQLField" = CommitGraphQLField(
        "viewerCanSubscribe"
    )
    viewer_subscription: "CommitGraphQLField" = CommitGraphQLField("viewerSubscription")
    zipball_url: "CommitGraphQLField" = CommitGraphQLField("zipballUrl")

    def fields(
        self,
        *subfields: Union[
            CommitGraphQLField,
            "BlameFields",
            "CheckSuiteConnectionFields",
            "CommitCommentConnectionFields",
            "CommitConnectionFields",
            "CommitHistoryConnectionFields",
            "DeploymentConnectionFields",
            "GitActorConnectionFields",
            "GitActorFields",
            "GitSignatureInterface",
            "OrganizationFields",
            "PullRequestConnectionFields",
            "RepositoryFields",
            "StatusCheckRollupFields",
            "StatusFields",
            "SubmoduleConnectionFields",
            "TreeEntryFields",
            "TreeFields",
        ]
    ) -> "CommitFields":
        """Subfields should come from the CommitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitFields":
        self._alias = alias
        return self


class CommitAuthorEmailPatternParametersFields(GraphQLField):
    name: "CommitAuthorEmailPatternParametersGraphQLField" = (
        CommitAuthorEmailPatternParametersGraphQLField("name")
    )
    negate: "CommitAuthorEmailPatternParametersGraphQLField" = (
        CommitAuthorEmailPatternParametersGraphQLField("negate")
    )
    operator: "CommitAuthorEmailPatternParametersGraphQLField" = (
        CommitAuthorEmailPatternParametersGraphQLField("operator")
    )
    pattern: "CommitAuthorEmailPatternParametersGraphQLField" = (
        CommitAuthorEmailPatternParametersGraphQLField("pattern")
    )

    def fields(
        self, *subfields: CommitAuthorEmailPatternParametersGraphQLField
    ) -> "CommitAuthorEmailPatternParametersFields":
        """Subfields should come from the CommitAuthorEmailPatternParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitAuthorEmailPatternParametersFields":
        self._alias = alias
        return self


class CommitCommentFields(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "authorAssociation"
    )
    body: "CommitCommentGraphQLField" = CommitCommentGraphQLField("body")
    body_html: "CommitCommentGraphQLField" = CommitCommentGraphQLField("bodyHTML")
    body_text: "CommitCommentGraphQLField" = CommitCommentGraphQLField("bodyText")

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    created_at: "CommitCommentGraphQLField" = CommitCommentGraphQLField("createdAt")
    created_via_email: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "createdViaEmail"
    )
    database_id: "CommitCommentGraphQLField" = CommitCommentGraphQLField("databaseId")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    id: "CommitCommentGraphQLField" = CommitCommentGraphQLField("id")
    includes_created_edit: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "includesCreatedEdit"
    )
    is_minimized: "CommitCommentGraphQLField" = CommitCommentGraphQLField("isMinimized")
    last_edited_at: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "lastEditedAt"
    )
    minimized_reason: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "minimizedReason"
    )
    path: "CommitCommentGraphQLField" = CommitCommentGraphQLField("path")
    position: "CommitCommentGraphQLField" = CommitCommentGraphQLField("position")
    published_at: "CommitCommentGraphQLField" = CommitCommentGraphQLField("publishedAt")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "resourcePath"
    )
    updated_at: "CommitCommentGraphQLField" = CommitCommentGraphQLField("updatedAt")
    url: "CommitCommentGraphQLField" = CommitCommentGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_delete: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "viewerCanDelete"
    )
    viewer_can_minimize: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "viewerCanMinimize"
    )
    viewer_can_react: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "viewerCanReact"
    )
    viewer_can_update: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "viewerCanUpdate"
    )
    viewer_cannot_update_reasons: "CommitCommentGraphQLField" = (
        CommitCommentGraphQLField("viewerCannotUpdateReasons")
    )
    viewer_did_author: "CommitCommentGraphQLField" = CommitCommentGraphQLField(
        "viewerDidAuthor"
    )

    def fields(
        self,
        *subfields: Union[
            CommitCommentGraphQLField,
            "ActorInterface",
            "CommitFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "RepositoryFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "CommitCommentFields":
        """Subfields should come from the CommitCommentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitCommentFields":
        self._alias = alias
        return self


class CommitCommentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CommitCommentEdgeFields":
        return CommitCommentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CommitCommentFields":
        return CommitCommentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CommitCommentConnectionGraphQLField" = (
        CommitCommentConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CommitCommentConnectionGraphQLField,
            "CommitCommentEdgeFields",
            "CommitCommentFields",
            "PageInfoFields",
        ]
    ) -> "CommitCommentConnectionFields":
        """Subfields should come from the CommitCommentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitCommentConnectionFields":
        self._alias = alias
        return self


class CommitCommentEdgeFields(GraphQLField):
    cursor: "CommitCommentEdgeGraphQLField" = CommitCommentEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CommitCommentFields":
        return CommitCommentFields("node")

    def fields(
        self, *subfields: Union[CommitCommentEdgeGraphQLField, "CommitCommentFields"]
    ) -> "CommitCommentEdgeFields":
        """Subfields should come from the CommitCommentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitCommentEdgeFields":
        self._alias = alias
        return self


class CommitCommentThreadFields(GraphQLField):
    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CommitCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CommitCommentConnectionFields("comments", arguments=cleared_arguments)

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    id: "CommitCommentThreadGraphQLField" = CommitCommentThreadGraphQLField("id")
    path: "CommitCommentThreadGraphQLField" = CommitCommentThreadGraphQLField("path")
    position: "CommitCommentThreadGraphQLField" = CommitCommentThreadGraphQLField(
        "position"
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            CommitCommentThreadGraphQLField,
            "CommitCommentConnectionFields",
            "CommitFields",
            "RepositoryFields",
        ]
    ) -> "CommitCommentThreadFields":
        """Subfields should come from the CommitCommentThreadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitCommentThreadFields":
        self._alias = alias
        return self


class CommitConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CommitEdgeFields":
        return CommitEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CommitFields":
        return CommitFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CommitConnectionGraphQLField" = CommitConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            CommitConnectionGraphQLField,
            "CommitEdgeFields",
            "CommitFields",
            "PageInfoFields",
        ]
    ) -> "CommitConnectionFields":
        """Subfields should come from the CommitConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitConnectionFields":
        self._alias = alias
        return self


class CommitContributionsByRepositoryFields(GraphQLField):
    @classmethod
    def contributions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[CommitContributionOrder] = None
    ) -> "CreatedCommitContributionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "CommitContributionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatedCommitContributionConnectionFields(
            "contributions", arguments=cleared_arguments
        )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "CommitContributionsByRepositoryGraphQLField" = (
        CommitContributionsByRepositoryGraphQLField("resourcePath")
    )
    url: "CommitContributionsByRepositoryGraphQLField" = (
        CommitContributionsByRepositoryGraphQLField("url")
    )

    def fields(
        self,
        *subfields: Union[
            CommitContributionsByRepositoryGraphQLField,
            "CreatedCommitContributionConnectionFields",
            "RepositoryFields",
        ]
    ) -> "CommitContributionsByRepositoryFields":
        """Subfields should come from the CommitContributionsByRepositoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitContributionsByRepositoryFields":
        self._alias = alias
        return self


class CommitEdgeFields(GraphQLField):
    cursor: "CommitEdgeGraphQLField" = CommitEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CommitFields":
        return CommitFields("node")

    def fields(
        self, *subfields: Union[CommitEdgeGraphQLField, "CommitFields"]
    ) -> "CommitEdgeFields":
        """Subfields should come from the CommitEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitEdgeFields":
        self._alias = alias
        return self


class CommitHistoryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CommitEdgeFields":
        return CommitEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CommitFields":
        return CommitFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CommitHistoryConnectionGraphQLField" = (
        CommitHistoryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CommitHistoryConnectionGraphQLField,
            "CommitEdgeFields",
            "CommitFields",
            "PageInfoFields",
        ]
    ) -> "CommitHistoryConnectionFields":
        """Subfields should come from the CommitHistoryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitHistoryConnectionFields":
        self._alias = alias
        return self


class CommitMessagePatternParametersFields(GraphQLField):
    name: "CommitMessagePatternParametersGraphQLField" = (
        CommitMessagePatternParametersGraphQLField("name")
    )
    negate: "CommitMessagePatternParametersGraphQLField" = (
        CommitMessagePatternParametersGraphQLField("negate")
    )
    operator: "CommitMessagePatternParametersGraphQLField" = (
        CommitMessagePatternParametersGraphQLField("operator")
    )
    pattern: "CommitMessagePatternParametersGraphQLField" = (
        CommitMessagePatternParametersGraphQLField("pattern")
    )

    def fields(
        self, *subfields: CommitMessagePatternParametersGraphQLField
    ) -> "CommitMessagePatternParametersFields":
        """Subfields should come from the CommitMessagePatternParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitMessagePatternParametersFields":
        self._alias = alias
        return self


class CommitterEmailPatternParametersFields(GraphQLField):
    name: "CommitterEmailPatternParametersGraphQLField" = (
        CommitterEmailPatternParametersGraphQLField("name")
    )
    negate: "CommitterEmailPatternParametersGraphQLField" = (
        CommitterEmailPatternParametersGraphQLField("negate")
    )
    operator: "CommitterEmailPatternParametersGraphQLField" = (
        CommitterEmailPatternParametersGraphQLField("operator")
    )
    pattern: "CommitterEmailPatternParametersGraphQLField" = (
        CommitterEmailPatternParametersGraphQLField("pattern")
    )

    def fields(
        self, *subfields: CommitterEmailPatternParametersGraphQLField
    ) -> "CommitterEmailPatternParametersFields":
        """Subfields should come from the CommitterEmailPatternParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CommitterEmailPatternParametersFields":
        self._alias = alias
        return self


class ComparisonFields(GraphQLField):
    ahead_by: "ComparisonGraphQLField" = ComparisonGraphQLField("aheadBy")

    @classmethod
    def base_target(cls) -> "GitObjectInterface":
        return GitObjectInterface("base_target")

    behind_by: "ComparisonGraphQLField" = ComparisonGraphQLField("behindBy")

    @classmethod
    def commits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ComparisonCommitConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ComparisonCommitConnectionFields("commits", arguments=cleared_arguments)

    @classmethod
    def head_target(cls) -> "GitObjectInterface":
        return GitObjectInterface("head_target")

    id: "ComparisonGraphQLField" = ComparisonGraphQLField("id")
    status: "ComparisonGraphQLField" = ComparisonGraphQLField("status")

    def fields(
        self,
        *subfields: Union[
            ComparisonGraphQLField,
            "ComparisonCommitConnectionFields",
            "GitObjectInterface",
        ]
    ) -> "ComparisonFields":
        """Subfields should come from the ComparisonFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComparisonFields":
        self._alias = alias
        return self


class ComparisonCommitConnectionFields(GraphQLField):
    author_count: "ComparisonCommitConnectionGraphQLField" = (
        ComparisonCommitConnectionGraphQLField("authorCount")
    )

    @classmethod
    def edges(cls) -> "CommitEdgeFields":
        return CommitEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CommitFields":
        return CommitFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ComparisonCommitConnectionGraphQLField" = (
        ComparisonCommitConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ComparisonCommitConnectionGraphQLField,
            "CommitEdgeFields",
            "CommitFields",
            "PageInfoFields",
        ]
    ) -> "ComparisonCommitConnectionFields":
        """Subfields should come from the ComparisonCommitConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComparisonCommitConnectionFields":
        self._alias = alias
        return self


class ConnectedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ConnectedEventGraphQLField" = ConnectedEventGraphQLField("createdAt")
    id: "ConnectedEventGraphQLField" = ConnectedEventGraphQLField("id")
    is_cross_repository: "ConnectedEventGraphQLField" = ConnectedEventGraphQLField(
        "isCrossRepository"
    )
    source: "ReferencedSubjectUnion" = ReferencedSubjectUnion("source")
    subject: "ReferencedSubjectUnion" = ReferencedSubjectUnion("subject")

    def fields(
        self,
        *subfields: Union[
            ConnectedEventGraphQLField, "ActorInterface", "ReferencedSubjectUnion"
        ]
    ) -> "ConnectedEventFields":
        """Subfields should come from the ConnectedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConnectedEventFields":
        self._alias = alias
        return self


class ContributingGuidelinesFields(GraphQLField):
    body: "ContributingGuidelinesGraphQLField" = ContributingGuidelinesGraphQLField(
        "body"
    )
    resource_path: "ContributingGuidelinesGraphQLField" = (
        ContributingGuidelinesGraphQLField("resourcePath")
    )
    url: "ContributingGuidelinesGraphQLField" = ContributingGuidelinesGraphQLField(
        "url"
    )

    def fields(
        self, *subfields: ContributingGuidelinesGraphQLField
    ) -> "ContributingGuidelinesFields":
        """Subfields should come from the ContributingGuidelinesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ContributingGuidelinesFields":
        self._alias = alias
        return self


class ContributionInterface(GraphQLField):
    is_restricted: "ContributionGraphQLField" = ContributionGraphQLField("isRestricted")
    occurred_at: "ContributionGraphQLField" = ContributionGraphQLField("occurredAt")
    resource_path: "ContributionGraphQLField" = ContributionGraphQLField("resourcePath")
    url: "ContributionGraphQLField" = ContributionGraphQLField("url")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[ContributionGraphQLField, "UserFields"]
    ) -> "ContributionInterface":
        """Subfields should come from the ContributionInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ContributionInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ContributionInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ContributionCalendarFields(GraphQLField):
    colors: "ContributionCalendarGraphQLField" = ContributionCalendarGraphQLField(
        "colors"
    )
    is_halloween: "ContributionCalendarGraphQLField" = ContributionCalendarGraphQLField(
        "isHalloween"
    )

    @classmethod
    def months(cls) -> "ContributionCalendarMonthFields":
        return ContributionCalendarMonthFields("months")

    total_contributions: "ContributionCalendarGraphQLField" = (
        ContributionCalendarGraphQLField("totalContributions")
    )

    @classmethod
    def weeks(cls) -> "ContributionCalendarWeekFields":
        return ContributionCalendarWeekFields("weeks")

    def fields(
        self,
        *subfields: Union[
            ContributionCalendarGraphQLField,
            "ContributionCalendarMonthFields",
            "ContributionCalendarWeekFields",
        ]
    ) -> "ContributionCalendarFields":
        """Subfields should come from the ContributionCalendarFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ContributionCalendarFields":
        self._alias = alias
        return self


class ContributionCalendarDayFields(GraphQLField):
    color: "ContributionCalendarDayGraphQLField" = ContributionCalendarDayGraphQLField(
        "color"
    )
    contribution_count: "ContributionCalendarDayGraphQLField" = (
        ContributionCalendarDayGraphQLField("contributionCount")
    )
    contribution_level: "ContributionCalendarDayGraphQLField" = (
        ContributionCalendarDayGraphQLField("contributionLevel")
    )
    date: "ContributionCalendarDayGraphQLField" = ContributionCalendarDayGraphQLField(
        "date"
    )
    weekday: "ContributionCalendarDayGraphQLField" = (
        ContributionCalendarDayGraphQLField("weekday")
    )

    def fields(
        self, *subfields: ContributionCalendarDayGraphQLField
    ) -> "ContributionCalendarDayFields":
        """Subfields should come from the ContributionCalendarDayFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ContributionCalendarDayFields":
        self._alias = alias
        return self


class ContributionCalendarMonthFields(GraphQLField):
    first_day: "ContributionCalendarMonthGraphQLField" = (
        ContributionCalendarMonthGraphQLField("firstDay")
    )
    name: "ContributionCalendarMonthGraphQLField" = (
        ContributionCalendarMonthGraphQLField("name")
    )
    total_weeks: "ContributionCalendarMonthGraphQLField" = (
        ContributionCalendarMonthGraphQLField("totalWeeks")
    )
    year: "ContributionCalendarMonthGraphQLField" = (
        ContributionCalendarMonthGraphQLField("year")
    )

    def fields(
        self, *subfields: ContributionCalendarMonthGraphQLField
    ) -> "ContributionCalendarMonthFields":
        """Subfields should come from the ContributionCalendarMonthFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ContributionCalendarMonthFields":
        self._alias = alias
        return self


class ContributionCalendarWeekFields(GraphQLField):
    @classmethod
    def contribution_days(cls) -> "ContributionCalendarDayFields":
        return ContributionCalendarDayFields("contribution_days")

    first_day: "ContributionCalendarWeekGraphQLField" = (
        ContributionCalendarWeekGraphQLField("firstDay")
    )

    def fields(
        self,
        *subfields: Union[
            ContributionCalendarWeekGraphQLField, "ContributionCalendarDayFields"
        ]
    ) -> "ContributionCalendarWeekFields":
        """Subfields should come from the ContributionCalendarWeekFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ContributionCalendarWeekFields":
        self._alias = alias
        return self


class ContributionsCollectionFields(GraphQLField):
    @classmethod
    def commit_contributions_by_repository(
        cls, *, max_repositories: Optional[int] = None
    ) -> "CommitContributionsByRepositoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "maxRepositories": {"type": "Int", "value": max_repositories}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CommitContributionsByRepositoryFields(
            "commit_contributions_by_repository", arguments=cleared_arguments
        )

    @classmethod
    def contribution_calendar(cls) -> "ContributionCalendarFields":
        return ContributionCalendarFields("contribution_calendar")

    contribution_years: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("contributionYears")
    )
    does_end_in_current_month: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("doesEndInCurrentMonth")
    )
    earliest_restricted_contribution_date: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("earliestRestrictedContributionDate")
    )
    ended_at: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("endedAt")
    )
    first_issue_contribution: "CreatedIssueOrRestrictedContributionUnion" = (
        CreatedIssueOrRestrictedContributionUnion("firstIssueContribution")
    )
    first_pull_request_contribution: (
        "CreatedPullRequestOrRestrictedContributionUnion"
    ) = CreatedPullRequestOrRestrictedContributionUnion("firstPullRequestContribution")
    first_repository_contribution: "CreatedRepositoryOrRestrictedContributionUnion" = (
        CreatedRepositoryOrRestrictedContributionUnion("firstRepositoryContribution")
    )
    has_activity_in_the_past: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("hasActivityInThePast")
    )
    has_any_contributions: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("hasAnyContributions")
    )
    has_any_restricted_contributions: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("hasAnyRestrictedContributions")
    )
    is_single_day: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("isSingleDay")
    )

    @classmethod
    def issue_contributions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        exclude_first: Optional[bool] = None,
        exclude_popular: Optional[bool] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ContributionOrder] = None
    ) -> "CreatedIssueContributionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "excludePopular": {"type": "Boolean", "value": exclude_popular},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ContributionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatedIssueContributionConnectionFields(
            "issue_contributions", arguments=cleared_arguments
        )

    @classmethod
    def issue_contributions_by_repository(
        cls,
        *,
        exclude_first: Optional[bool] = None,
        exclude_popular: Optional[bool] = None,
        max_repositories: Optional[int] = None
    ) -> "IssueContributionsByRepositoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "excludePopular": {"type": "Boolean", "value": exclude_popular},
            "maxRepositories": {"type": "Int", "value": max_repositories},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueContributionsByRepositoryFields(
            "issue_contributions_by_repository", arguments=cleared_arguments
        )

    @classmethod
    def joined_git_hub_contribution(cls) -> "JoinedGitHubContributionFields":
        return JoinedGitHubContributionFields("joined_git_hub_contribution")

    latest_restricted_contribution_date: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("latestRestrictedContributionDate")
    )

    @classmethod
    def most_recent_collection_with_activity(cls) -> "ContributionsCollectionFields":
        return ContributionsCollectionFields("most_recent_collection_with_activity")

    @classmethod
    def most_recent_collection_without_activity(cls) -> "ContributionsCollectionFields":
        return ContributionsCollectionFields("most_recent_collection_without_activity")

    @classmethod
    def popular_issue_contribution(cls) -> "CreatedIssueContributionFields":
        return CreatedIssueContributionFields("popular_issue_contribution")

    @classmethod
    def popular_pull_request_contribution(
        cls,
    ) -> "CreatedPullRequestContributionFields":
        return CreatedPullRequestContributionFields("popular_pull_request_contribution")

    @classmethod
    def pull_request_contributions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        exclude_first: Optional[bool] = None,
        exclude_popular: Optional[bool] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ContributionOrder] = None
    ) -> "CreatedPullRequestContributionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "excludePopular": {"type": "Boolean", "value": exclude_popular},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ContributionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatedPullRequestContributionConnectionFields(
            "pull_request_contributions", arguments=cleared_arguments
        )

    @classmethod
    def pull_request_contributions_by_repository(
        cls,
        *,
        exclude_first: Optional[bool] = None,
        exclude_popular: Optional[bool] = None,
        max_repositories: Optional[int] = None
    ) -> "PullRequestContributionsByRepositoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "excludePopular": {"type": "Boolean", "value": exclude_popular},
            "maxRepositories": {"type": "Int", "value": max_repositories},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestContributionsByRepositoryFields(
            "pull_request_contributions_by_repository", arguments=cleared_arguments
        )

    @classmethod
    def pull_request_review_contributions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ContributionOrder] = None
    ) -> "CreatedPullRequestReviewContributionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ContributionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatedPullRequestReviewContributionConnectionFields(
            "pull_request_review_contributions", arguments=cleared_arguments
        )

    @classmethod
    def pull_request_review_contributions_by_repository(
        cls, *, max_repositories: Optional[int] = None
    ) -> "PullRequestReviewContributionsByRepositoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "maxRepositories": {"type": "Int", "value": max_repositories}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestReviewContributionsByRepositoryFields(
            "pull_request_review_contributions_by_repository",
            arguments=cleared_arguments,
        )

    @classmethod
    def repository_contributions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        exclude_first: Optional[bool] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ContributionOrder] = None
    ) -> "CreatedRepositoryContributionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ContributionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatedRepositoryContributionConnectionFields(
            "repository_contributions", arguments=cleared_arguments
        )

    restricted_contributions_count: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("restrictedContributionsCount")
    )
    started_at: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("startedAt")
    )
    total_commit_contributions: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("totalCommitContributions")
    )

    @classmethod
    def total_issue_contributions(
        cls,
        *,
        exclude_first: Optional[bool] = None,
        exclude_popular: Optional[bool] = None
    ) -> "ContributionsCollectionGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "excludePopular": {"type": "Boolean", "value": exclude_popular},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ContributionsCollectionGraphQLField(
            "total_issue_contributions", arguments=cleared_arguments
        )

    @classmethod
    def total_pull_request_contributions(
        cls,
        *,
        exclude_first: Optional[bool] = None,
        exclude_popular: Optional[bool] = None
    ) -> "ContributionsCollectionGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "excludePopular": {"type": "Boolean", "value": exclude_popular},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ContributionsCollectionGraphQLField(
            "total_pull_request_contributions", arguments=cleared_arguments
        )

    total_pull_request_review_contributions: "ContributionsCollectionGraphQLField" = (
        ContributionsCollectionGraphQLField("totalPullRequestReviewContributions")
    )
    total_repositories_with_contributed_commits: (
        "ContributionsCollectionGraphQLField"
    ) = ContributionsCollectionGraphQLField("totalRepositoriesWithContributedCommits")

    @classmethod
    def total_repositories_with_contributed_issues(
        cls,
        *,
        exclude_first: Optional[bool] = None,
        exclude_popular: Optional[bool] = None
    ) -> "ContributionsCollectionGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "excludePopular": {"type": "Boolean", "value": exclude_popular},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ContributionsCollectionGraphQLField(
            "total_repositories_with_contributed_issues", arguments=cleared_arguments
        )

    total_repositories_with_contributed_pull_request_reviews: (
        "ContributionsCollectionGraphQLField"
    ) = ContributionsCollectionGraphQLField(
        "totalRepositoriesWithContributedPullRequestReviews"
    )

    @classmethod
    def total_repositories_with_contributed_pull_requests(
        cls,
        *,
        exclude_first: Optional[bool] = None,
        exclude_popular: Optional[bool] = None
    ) -> "ContributionsCollectionGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "excludeFirst": {"type": "Boolean", "value": exclude_first},
            "excludePopular": {"type": "Boolean", "value": exclude_popular},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ContributionsCollectionGraphQLField(
            "total_repositories_with_contributed_pull_requests",
            arguments=cleared_arguments,
        )

    @classmethod
    def total_repository_contributions(
        cls, *, exclude_first: Optional[bool] = None
    ) -> "ContributionsCollectionGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "excludeFirst": {"type": "Boolean", "value": exclude_first}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ContributionsCollectionGraphQLField(
            "total_repository_contributions", arguments=cleared_arguments
        )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            ContributionsCollectionGraphQLField,
            "CommitContributionsByRepositoryFields",
            "ContributionCalendarFields",
            "ContributionsCollectionFields",
            "CreatedIssueContributionConnectionFields",
            "CreatedIssueContributionFields",
            "CreatedIssueOrRestrictedContributionUnion",
            "CreatedPullRequestContributionConnectionFields",
            "CreatedPullRequestContributionFields",
            "CreatedPullRequestOrRestrictedContributionUnion",
            "CreatedPullRequestReviewContributionConnectionFields",
            "CreatedRepositoryContributionConnectionFields",
            "CreatedRepositoryOrRestrictedContributionUnion",
            "IssueContributionsByRepositoryFields",
            "JoinedGitHubContributionFields",
            "PullRequestContributionsByRepositoryFields",
            "PullRequestReviewContributionsByRepositoryFields",
            "UserFields",
        ]
    ) -> "ContributionsCollectionFields":
        """Subfields should come from the ContributionsCollectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ContributionsCollectionFields":
        self._alias = alias
        return self


class ConvertProjectCardNoteToIssuePayloadFields(GraphQLField):
    client_mutation_id: "ConvertProjectCardNoteToIssuePayloadGraphQLField" = (
        ConvertProjectCardNoteToIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_card(cls) -> "ProjectCardFields":
        return ProjectCardFields("project_card")

    def fields(
        self,
        *subfields: Union[
            ConvertProjectCardNoteToIssuePayloadGraphQLField, "ProjectCardFields"
        ]
    ) -> "ConvertProjectCardNoteToIssuePayloadFields":
        """Subfields should come from the ConvertProjectCardNoteToIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConvertProjectCardNoteToIssuePayloadFields":
        self._alias = alias
        return self


class ConvertProjectV2DraftIssueItemToIssuePayloadFields(GraphQLField):
    client_mutation_id: "ConvertProjectV2DraftIssueItemToIssuePayloadGraphQLField" = (
        ConvertProjectV2DraftIssueItemToIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    def fields(
        self,
        *subfields: Union[
            ConvertProjectV2DraftIssueItemToIssuePayloadGraphQLField,
            "ProjectV2ItemFields",
        ]
    ) -> "ConvertProjectV2DraftIssueItemToIssuePayloadFields":
        """Subfields should come from the ConvertProjectV2DraftIssueItemToIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConvertProjectV2DraftIssueItemToIssuePayloadFields":
        self._alias = alias
        return self


class ConvertPullRequestToDraftPayloadFields(GraphQLField):
    client_mutation_id: "ConvertPullRequestToDraftPayloadGraphQLField" = (
        ConvertPullRequestToDraftPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            ConvertPullRequestToDraftPayloadGraphQLField, "PullRequestFields"
        ]
    ) -> "ConvertPullRequestToDraftPayloadFields":
        """Subfields should come from the ConvertPullRequestToDraftPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConvertPullRequestToDraftPayloadFields":
        self._alias = alias
        return self


class ConvertToDraftEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ConvertToDraftEventGraphQLField" = ConvertToDraftEventGraphQLField(
        "createdAt"
    )
    id: "ConvertToDraftEventGraphQLField" = ConvertToDraftEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    resource_path: "ConvertToDraftEventGraphQLField" = ConvertToDraftEventGraphQLField(
        "resourcePath"
    )
    url: "ConvertToDraftEventGraphQLField" = ConvertToDraftEventGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            ConvertToDraftEventGraphQLField, "ActorInterface", "PullRequestFields"
        ]
    ) -> "ConvertToDraftEventFields":
        """Subfields should come from the ConvertToDraftEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConvertToDraftEventFields":
        self._alias = alias
        return self


class ConvertedNoteToIssueEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ConvertedNoteToIssueEventGraphQLField" = (
        ConvertedNoteToIssueEventGraphQLField("createdAt")
    )
    database_id: "ConvertedNoteToIssueEventGraphQLField" = (
        ConvertedNoteToIssueEventGraphQLField("databaseId")
    )
    id: "ConvertedNoteToIssueEventGraphQLField" = ConvertedNoteToIssueEventGraphQLField(
        "id"
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def project_card(cls) -> "ProjectCardFields":
        return ProjectCardFields("project_card")

    project_column_name: "ConvertedNoteToIssueEventGraphQLField" = (
        ConvertedNoteToIssueEventGraphQLField("projectColumnName")
    )

    def fields(
        self,
        *subfields: Union[
            ConvertedNoteToIssueEventGraphQLField,
            "ActorInterface",
            "ProjectCardFields",
            "ProjectFields",
        ]
    ) -> "ConvertedNoteToIssueEventFields":
        """Subfields should come from the ConvertedNoteToIssueEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConvertedNoteToIssueEventFields":
        self._alias = alias
        return self


class ConvertedToDiscussionEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ConvertedToDiscussionEventGraphQLField" = (
        ConvertedToDiscussionEventGraphQLField("createdAt")
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    id: "ConvertedToDiscussionEventGraphQLField" = (
        ConvertedToDiscussionEventGraphQLField("id")
    )

    def fields(
        self,
        *subfields: Union[
            ConvertedToDiscussionEventGraphQLField, "ActorInterface", "DiscussionFields"
        ]
    ) -> "ConvertedToDiscussionEventFields":
        """Subfields should come from the ConvertedToDiscussionEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConvertedToDiscussionEventFields":
        self._alias = alias
        return self


class CopilotEndpointsFields(GraphQLField):
    api: "CopilotEndpointsGraphQLField" = CopilotEndpointsGraphQLField("api")
    origin_tracker: "CopilotEndpointsGraphQLField" = CopilotEndpointsGraphQLField(
        "originTracker"
    )
    proxy: "CopilotEndpointsGraphQLField" = CopilotEndpointsGraphQLField("proxy")
    telemetry: "CopilotEndpointsGraphQLField" = CopilotEndpointsGraphQLField(
        "telemetry"
    )

    def fields(
        self, *subfields: CopilotEndpointsGraphQLField
    ) -> "CopilotEndpointsFields":
        """Subfields should come from the CopilotEndpointsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CopilotEndpointsFields":
        self._alias = alias
        return self


class CopyProjectV2PayloadFields(GraphQLField):
    client_mutation_id: "CopyProjectV2PayloadGraphQLField" = (
        CopyProjectV2PayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_v_2(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project_v_2")

    def fields(
        self, *subfields: Union[CopyProjectV2PayloadGraphQLField, "ProjectV2Fields"]
    ) -> "CopyProjectV2PayloadFields":
        """Subfields should come from the CopyProjectV2PayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CopyProjectV2PayloadFields":
        self._alias = alias
        return self


class CreateAttributionInvitationPayloadFields(GraphQLField):
    client_mutation_id: "CreateAttributionInvitationPayloadGraphQLField" = (
        CreateAttributionInvitationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def owner(cls) -> "OrganizationFields":
        return OrganizationFields("owner")

    source: "ClaimableUnion" = ClaimableUnion("source")
    target: "ClaimableUnion" = ClaimableUnion("target")

    def fields(
        self,
        *subfields: Union[
            CreateAttributionInvitationPayloadGraphQLField,
            "ClaimableUnion",
            "OrganizationFields",
        ]
    ) -> "CreateAttributionInvitationPayloadFields":
        """Subfields should come from the CreateAttributionInvitationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateAttributionInvitationPayloadFields":
        self._alias = alias
        return self


class CreateBranchProtectionRulePayloadFields(GraphQLField):
    @classmethod
    def branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("branch_protection_rule")

    client_mutation_id: "CreateBranchProtectionRulePayloadGraphQLField" = (
        CreateBranchProtectionRulePayloadGraphQLField("clientMutationId")
    )

    def fields(
        self,
        *subfields: Union[
            CreateBranchProtectionRulePayloadGraphQLField, "BranchProtectionRuleFields"
        ]
    ) -> "CreateBranchProtectionRulePayloadFields":
        """Subfields should come from the CreateBranchProtectionRulePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateBranchProtectionRulePayloadFields":
        self._alias = alias
        return self


class CreateCheckRunPayloadFields(GraphQLField):
    @classmethod
    def check_run(cls) -> "CheckRunFields":
        return CheckRunFields("check_run")

    client_mutation_id: "CreateCheckRunPayloadGraphQLField" = (
        CreateCheckRunPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: Union[CreateCheckRunPayloadGraphQLField, "CheckRunFields"]
    ) -> "CreateCheckRunPayloadFields":
        """Subfields should come from the CreateCheckRunPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCheckRunPayloadFields":
        self._alias = alias
        return self


class CreateCheckSuitePayloadFields(GraphQLField):
    @classmethod
    def check_suite(cls) -> "CheckSuiteFields":
        return CheckSuiteFields("check_suite")

    client_mutation_id: "CreateCheckSuitePayloadGraphQLField" = (
        CreateCheckSuitePayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: Union[CreateCheckSuitePayloadGraphQLField, "CheckSuiteFields"]
    ) -> "CreateCheckSuitePayloadFields":
        """Subfields should come from the CreateCheckSuitePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCheckSuitePayloadFields":
        self._alias = alias
        return self


class CreateCommitOnBranchPayloadFields(GraphQLField):
    client_mutation_id: "CreateCommitOnBranchPayloadGraphQLField" = (
        CreateCommitOnBranchPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    def fields(
        self,
        *subfields: Union[
            CreateCommitOnBranchPayloadGraphQLField, "CommitFields", "RefFields"
        ]
    ) -> "CreateCommitOnBranchPayloadFields":
        """Subfields should come from the CreateCommitOnBranchPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCommitOnBranchPayloadFields":
        self._alias = alias
        return self


class CreateDeploymentPayloadFields(GraphQLField):
    auto_merged: "CreateDeploymentPayloadGraphQLField" = (
        CreateDeploymentPayloadGraphQLField("autoMerged")
    )
    client_mutation_id: "CreateDeploymentPayloadGraphQLField" = (
        CreateDeploymentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def deployment(cls) -> "DeploymentFields":
        return DeploymentFields("deployment")

    def fields(
        self, *subfields: Union[CreateDeploymentPayloadGraphQLField, "DeploymentFields"]
    ) -> "CreateDeploymentPayloadFields":
        """Subfields should come from the CreateDeploymentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateDeploymentPayloadFields":
        self._alias = alias
        return self


class CreateDeploymentStatusPayloadFields(GraphQLField):
    client_mutation_id: "CreateDeploymentStatusPayloadGraphQLField" = (
        CreateDeploymentStatusPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def deployment_status(cls) -> "DeploymentStatusFields":
        return DeploymentStatusFields("deployment_status")

    def fields(
        self,
        *subfields: Union[
            CreateDeploymentStatusPayloadGraphQLField, "DeploymentStatusFields"
        ]
    ) -> "CreateDeploymentStatusPayloadFields":
        """Subfields should come from the CreateDeploymentStatusPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateDeploymentStatusPayloadFields":
        self._alias = alias
        return self


class CreateDiscussionPayloadFields(GraphQLField):
    client_mutation_id: "CreateDiscussionPayloadGraphQLField" = (
        CreateDiscussionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    def fields(
        self, *subfields: Union[CreateDiscussionPayloadGraphQLField, "DiscussionFields"]
    ) -> "CreateDiscussionPayloadFields":
        """Subfields should come from the CreateDiscussionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateDiscussionPayloadFields":
        self._alias = alias
        return self


class CreateEnterpriseOrganizationPayloadFields(GraphQLField):
    client_mutation_id: "CreateEnterpriseOrganizationPayloadGraphQLField" = (
        CreateEnterpriseOrganizationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    def fields(
        self,
        *subfields: Union[
            CreateEnterpriseOrganizationPayloadGraphQLField,
            "EnterpriseFields",
            "OrganizationFields",
        ]
    ) -> "CreateEnterpriseOrganizationPayloadFields":
        """Subfields should come from the CreateEnterpriseOrganizationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateEnterpriseOrganizationPayloadFields":
        self._alias = alias
        return self


class CreateEnvironmentPayloadFields(GraphQLField):
    client_mutation_id: "CreateEnvironmentPayloadGraphQLField" = (
        CreateEnvironmentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def environment(cls) -> "EnvironmentFields":
        return EnvironmentFields("environment")

    def fields(
        self,
        *subfields: Union[CreateEnvironmentPayloadGraphQLField, "EnvironmentFields"]
    ) -> "CreateEnvironmentPayloadFields":
        """Subfields should come from the CreateEnvironmentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateEnvironmentPayloadFields":
        self._alias = alias
        return self


class CreateIpAllowListEntryPayloadFields(GraphQLField):
    client_mutation_id: "CreateIpAllowListEntryPayloadGraphQLField" = (
        CreateIpAllowListEntryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def ip_allow_list_entry(cls) -> "IpAllowListEntryFields":
        return IpAllowListEntryFields("ip_allow_list_entry")

    def fields(
        self,
        *subfields: Union[
            CreateIpAllowListEntryPayloadGraphQLField, "IpAllowListEntryFields"
        ]
    ) -> "CreateIpAllowListEntryPayloadFields":
        """Subfields should come from the CreateIpAllowListEntryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateIpAllowListEntryPayloadFields":
        self._alias = alias
        return self


class CreateIssuePayloadFields(GraphQLField):
    client_mutation_id: "CreateIssuePayloadGraphQLField" = (
        CreateIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[CreateIssuePayloadGraphQLField, "IssueFields"]
    ) -> "CreateIssuePayloadFields":
        """Subfields should come from the CreateIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateIssuePayloadFields":
        self._alias = alias
        return self


class CreateIssueTypePayloadFields(GraphQLField):
    client_mutation_id: "CreateIssueTypePayloadGraphQLField" = (
        CreateIssueTypePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue_type(cls) -> "IssueTypeFields":
        return IssueTypeFields("issue_type")

    def fields(
        self, *subfields: Union[CreateIssueTypePayloadGraphQLField, "IssueTypeFields"]
    ) -> "CreateIssueTypePayloadFields":
        """Subfields should come from the CreateIssueTypePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateIssueTypePayloadFields":
        self._alias = alias
        return self


class CreateLabelPayloadFields(GraphQLField):
    client_mutation_id: "CreateLabelPayloadGraphQLField" = (
        CreateLabelPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def label(cls) -> "LabelFields":
        return LabelFields("label")

    def fields(
        self, *subfields: Union[CreateLabelPayloadGraphQLField, "LabelFields"]
    ) -> "CreateLabelPayloadFields":
        """Subfields should come from the CreateLabelPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateLabelPayloadFields":
        self._alias = alias
        return self


class CreateLinkedBranchPayloadFields(GraphQLField):
    client_mutation_id: "CreateLinkedBranchPayloadGraphQLField" = (
        CreateLinkedBranchPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    @classmethod
    def linked_branch(cls) -> "LinkedBranchFields":
        return LinkedBranchFields("linked_branch")

    def fields(
        self,
        *subfields: Union[
            CreateLinkedBranchPayloadGraphQLField, "IssueFields", "LinkedBranchFields"
        ]
    ) -> "CreateLinkedBranchPayloadFields":
        """Subfields should come from the CreateLinkedBranchPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateLinkedBranchPayloadFields":
        self._alias = alias
        return self


class CreateMigrationSourcePayloadFields(GraphQLField):
    client_mutation_id: "CreateMigrationSourcePayloadGraphQLField" = (
        CreateMigrationSourcePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def migration_source(cls) -> "MigrationSourceFields":
        return MigrationSourceFields("migration_source")

    def fields(
        self,
        *subfields: Union[
            CreateMigrationSourcePayloadGraphQLField, "MigrationSourceFields"
        ]
    ) -> "CreateMigrationSourcePayloadFields":
        """Subfields should come from the CreateMigrationSourcePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateMigrationSourcePayloadFields":
        self._alias = alias
        return self


class CreateProjectPayloadFields(GraphQLField):
    client_mutation_id: "CreateProjectPayloadGraphQLField" = (
        CreateProjectPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    def fields(
        self, *subfields: Union[CreateProjectPayloadGraphQLField, "ProjectFields"]
    ) -> "CreateProjectPayloadFields":
        """Subfields should come from the CreateProjectPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateProjectPayloadFields":
        self._alias = alias
        return self


class CreateProjectV2FieldPayloadFields(GraphQLField):
    client_mutation_id: "CreateProjectV2FieldPayloadGraphQLField" = (
        CreateProjectV2FieldPayloadGraphQLField("clientMutationId")
    )
    project_v_2_field: "ProjectV2FieldConfigurationUnion" = (
        ProjectV2FieldConfigurationUnion("projectV2Field")
    )

    def fields(
        self,
        *subfields: Union[
            CreateProjectV2FieldPayloadGraphQLField, "ProjectV2FieldConfigurationUnion"
        ]
    ) -> "CreateProjectV2FieldPayloadFields":
        """Subfields should come from the CreateProjectV2FieldPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateProjectV2FieldPayloadFields":
        self._alias = alias
        return self


class CreateProjectV2PayloadFields(GraphQLField):
    client_mutation_id: "CreateProjectV2PayloadGraphQLField" = (
        CreateProjectV2PayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_v_2(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project_v_2")

    def fields(
        self, *subfields: Union[CreateProjectV2PayloadGraphQLField, "ProjectV2Fields"]
    ) -> "CreateProjectV2PayloadFields":
        """Subfields should come from the CreateProjectV2PayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateProjectV2PayloadFields":
        self._alias = alias
        return self


class CreateProjectV2StatusUpdatePayloadFields(GraphQLField):
    client_mutation_id: "CreateProjectV2StatusUpdatePayloadGraphQLField" = (
        CreateProjectV2StatusUpdatePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def status_update(cls) -> "ProjectV2StatusUpdateFields":
        return ProjectV2StatusUpdateFields("status_update")

    def fields(
        self,
        *subfields: Union[
            CreateProjectV2StatusUpdatePayloadGraphQLField,
            "ProjectV2StatusUpdateFields",
        ]
    ) -> "CreateProjectV2StatusUpdatePayloadFields":
        """Subfields should come from the CreateProjectV2StatusUpdatePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateProjectV2StatusUpdatePayloadFields":
        self._alias = alias
        return self


class CreatePullRequestPayloadFields(GraphQLField):
    client_mutation_id: "CreatePullRequestPayloadGraphQLField" = (
        CreatePullRequestPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[CreatePullRequestPayloadGraphQLField, "PullRequestFields"]
    ) -> "CreatePullRequestPayloadFields":
        """Subfields should come from the CreatePullRequestPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatePullRequestPayloadFields":
        self._alias = alias
        return self


class CreateRefPayloadFields(GraphQLField):
    client_mutation_id: "CreateRefPayloadGraphQLField" = CreateRefPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    def fields(
        self, *subfields: Union[CreateRefPayloadGraphQLField, "RefFields"]
    ) -> "CreateRefPayloadFields":
        """Subfields should come from the CreateRefPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateRefPayloadFields":
        self._alias = alias
        return self


class CreateRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "CreateRepositoryPayloadGraphQLField" = (
        CreateRepositoryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[CreateRepositoryPayloadGraphQLField, "RepositoryFields"]
    ) -> "CreateRepositoryPayloadFields":
        """Subfields should come from the CreateRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateRepositoryPayloadFields":
        self._alias = alias
        return self


class CreateRepositoryRulesetPayloadFields(GraphQLField):
    client_mutation_id: "CreateRepositoryRulesetPayloadGraphQLField" = (
        CreateRepositoryRulesetPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def ruleset(cls) -> "RepositoryRulesetFields":
        return RepositoryRulesetFields("ruleset")

    def fields(
        self,
        *subfields: Union[
            CreateRepositoryRulesetPayloadGraphQLField, "RepositoryRulesetFields"
        ]
    ) -> "CreateRepositoryRulesetPayloadFields":
        """Subfields should come from the CreateRepositoryRulesetPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateRepositoryRulesetPayloadFields":
        self._alias = alias
        return self


class CreateSponsorsListingPayloadFields(GraphQLField):
    client_mutation_id: "CreateSponsorsListingPayloadGraphQLField" = (
        CreateSponsorsListingPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsors_listing(cls) -> "SponsorsListingFields":
        return SponsorsListingFields("sponsors_listing")

    def fields(
        self,
        *subfields: Union[
            CreateSponsorsListingPayloadGraphQLField, "SponsorsListingFields"
        ]
    ) -> "CreateSponsorsListingPayloadFields":
        """Subfields should come from the CreateSponsorsListingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateSponsorsListingPayloadFields":
        self._alias = alias
        return self


class CreateSponsorsTierPayloadFields(GraphQLField):
    client_mutation_id: "CreateSponsorsTierPayloadGraphQLField" = (
        CreateSponsorsTierPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsors_tier(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("sponsors_tier")

    def fields(
        self,
        *subfields: Union[CreateSponsorsTierPayloadGraphQLField, "SponsorsTierFields"]
    ) -> "CreateSponsorsTierPayloadFields":
        """Subfields should come from the CreateSponsorsTierPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateSponsorsTierPayloadFields":
        self._alias = alias
        return self


class CreateSponsorshipPayloadFields(GraphQLField):
    client_mutation_id: "CreateSponsorshipPayloadGraphQLField" = (
        CreateSponsorshipPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsorship(cls) -> "SponsorshipFields":
        return SponsorshipFields("sponsorship")

    def fields(
        self,
        *subfields: Union[CreateSponsorshipPayloadGraphQLField, "SponsorshipFields"]
    ) -> "CreateSponsorshipPayloadFields":
        """Subfields should come from the CreateSponsorshipPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateSponsorshipPayloadFields":
        self._alias = alias
        return self


class CreateSponsorshipsPayloadFields(GraphQLField):
    client_mutation_id: "CreateSponsorshipsPayloadGraphQLField" = (
        CreateSponsorshipsPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsorables(cls) -> "SponsorableInterface":
        return SponsorableInterface("sponsorables")

    def fields(
        self,
        *subfields: Union[CreateSponsorshipsPayloadGraphQLField, "SponsorableInterface"]
    ) -> "CreateSponsorshipsPayloadFields":
        """Subfields should come from the CreateSponsorshipsPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateSponsorshipsPayloadFields":
        self._alias = alias
        return self


class CreateTeamDiscussionCommentPayloadFields(GraphQLField):
    client_mutation_id: "CreateTeamDiscussionCommentPayloadGraphQLField" = (
        CreateTeamDiscussionCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def team_discussion_comment(cls) -> "TeamDiscussionCommentFields":
        return TeamDiscussionCommentFields("team_discussion_comment")

    def fields(
        self,
        *subfields: Union[
            CreateTeamDiscussionCommentPayloadGraphQLField,
            "TeamDiscussionCommentFields",
        ]
    ) -> "CreateTeamDiscussionCommentPayloadFields":
        """Subfields should come from the CreateTeamDiscussionCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateTeamDiscussionCommentPayloadFields":
        self._alias = alias
        return self


class CreateTeamDiscussionPayloadFields(GraphQLField):
    client_mutation_id: "CreateTeamDiscussionPayloadGraphQLField" = (
        CreateTeamDiscussionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def team_discussion(cls) -> "TeamDiscussionFields":
        return TeamDiscussionFields("team_discussion")

    def fields(
        self,
        *subfields: Union[
            CreateTeamDiscussionPayloadGraphQLField, "TeamDiscussionFields"
        ]
    ) -> "CreateTeamDiscussionPayloadFields":
        """Subfields should come from the CreateTeamDiscussionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateTeamDiscussionPayloadFields":
        self._alias = alias
        return self


class CreateUserListPayloadFields(GraphQLField):
    client_mutation_id: "CreateUserListPayloadGraphQLField" = (
        CreateUserListPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def list(cls) -> "UserListFields":
        return UserListFields("list")

    @classmethod
    def viewer(cls) -> "UserFields":
        return UserFields("viewer")

    def fields(
        self,
        *subfields: Union[
            CreateUserListPayloadGraphQLField, "UserFields", "UserListFields"
        ]
    ) -> "CreateUserListPayloadFields":
        """Subfields should come from the CreateUserListPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateUserListPayloadFields":
        self._alias = alias
        return self


class CreatedCommitContributionFields(GraphQLField):
    commit_count: "CreatedCommitContributionGraphQLField" = (
        CreatedCommitContributionGraphQLField("commitCount")
    )
    is_restricted: "CreatedCommitContributionGraphQLField" = (
        CreatedCommitContributionGraphQLField("isRestricted")
    )
    occurred_at: "CreatedCommitContributionGraphQLField" = (
        CreatedCommitContributionGraphQLField("occurredAt")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "CreatedCommitContributionGraphQLField" = (
        CreatedCommitContributionGraphQLField("resourcePath")
    )
    url: "CreatedCommitContributionGraphQLField" = (
        CreatedCommitContributionGraphQLField("url")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            CreatedCommitContributionGraphQLField, "RepositoryFields", "UserFields"
        ]
    ) -> "CreatedCommitContributionFields":
        """Subfields should come from the CreatedCommitContributionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedCommitContributionFields":
        self._alias = alias
        return self


class CreatedCommitContributionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CreatedCommitContributionEdgeFields":
        return CreatedCommitContributionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CreatedCommitContributionFields":
        return CreatedCommitContributionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CreatedCommitContributionConnectionGraphQLField" = (
        CreatedCommitContributionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CreatedCommitContributionConnectionGraphQLField,
            "CreatedCommitContributionEdgeFields",
            "CreatedCommitContributionFields",
            "PageInfoFields",
        ]
    ) -> "CreatedCommitContributionConnectionFields":
        """Subfields should come from the CreatedCommitContributionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedCommitContributionConnectionFields":
        self._alias = alias
        return self


class CreatedCommitContributionEdgeFields(GraphQLField):
    cursor: "CreatedCommitContributionEdgeGraphQLField" = (
        CreatedCommitContributionEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "CreatedCommitContributionFields":
        return CreatedCommitContributionFields("node")

    def fields(
        self,
        *subfields: Union[
            CreatedCommitContributionEdgeGraphQLField, "CreatedCommitContributionFields"
        ]
    ) -> "CreatedCommitContributionEdgeFields":
        """Subfields should come from the CreatedCommitContributionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedCommitContributionEdgeFields":
        self._alias = alias
        return self


class CreatedIssueContributionFields(GraphQLField):
    is_restricted: "CreatedIssueContributionGraphQLField" = (
        CreatedIssueContributionGraphQLField("isRestricted")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    occurred_at: "CreatedIssueContributionGraphQLField" = (
        CreatedIssueContributionGraphQLField("occurredAt")
    )
    resource_path: "CreatedIssueContributionGraphQLField" = (
        CreatedIssueContributionGraphQLField("resourcePath")
    )
    url: "CreatedIssueContributionGraphQLField" = CreatedIssueContributionGraphQLField(
        "url"
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            CreatedIssueContributionGraphQLField, "IssueFields", "UserFields"
        ]
    ) -> "CreatedIssueContributionFields":
        """Subfields should come from the CreatedIssueContributionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedIssueContributionFields":
        self._alias = alias
        return self


class CreatedIssueContributionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CreatedIssueContributionEdgeFields":
        return CreatedIssueContributionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CreatedIssueContributionFields":
        return CreatedIssueContributionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CreatedIssueContributionConnectionGraphQLField" = (
        CreatedIssueContributionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CreatedIssueContributionConnectionGraphQLField,
            "CreatedIssueContributionEdgeFields",
            "CreatedIssueContributionFields",
            "PageInfoFields",
        ]
    ) -> "CreatedIssueContributionConnectionFields":
        """Subfields should come from the CreatedIssueContributionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedIssueContributionConnectionFields":
        self._alias = alias
        return self


class CreatedIssueContributionEdgeFields(GraphQLField):
    cursor: "CreatedIssueContributionEdgeGraphQLField" = (
        CreatedIssueContributionEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "CreatedIssueContributionFields":
        return CreatedIssueContributionFields("node")

    def fields(
        self,
        *subfields: Union[
            CreatedIssueContributionEdgeGraphQLField, "CreatedIssueContributionFields"
        ]
    ) -> "CreatedIssueContributionEdgeFields":
        """Subfields should come from the CreatedIssueContributionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedIssueContributionEdgeFields":
        self._alias = alias
        return self


class CreatedPullRequestContributionFields(GraphQLField):
    is_restricted: "CreatedPullRequestContributionGraphQLField" = (
        CreatedPullRequestContributionGraphQLField("isRestricted")
    )
    occurred_at: "CreatedPullRequestContributionGraphQLField" = (
        CreatedPullRequestContributionGraphQLField("occurredAt")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    resource_path: "CreatedPullRequestContributionGraphQLField" = (
        CreatedPullRequestContributionGraphQLField("resourcePath")
    )
    url: "CreatedPullRequestContributionGraphQLField" = (
        CreatedPullRequestContributionGraphQLField("url")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            CreatedPullRequestContributionGraphQLField,
            "PullRequestFields",
            "UserFields",
        ]
    ) -> "CreatedPullRequestContributionFields":
        """Subfields should come from the CreatedPullRequestContributionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedPullRequestContributionFields":
        self._alias = alias
        return self


class CreatedPullRequestContributionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CreatedPullRequestContributionEdgeFields":
        return CreatedPullRequestContributionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CreatedPullRequestContributionFields":
        return CreatedPullRequestContributionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CreatedPullRequestContributionConnectionGraphQLField" = (
        CreatedPullRequestContributionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CreatedPullRequestContributionConnectionGraphQLField,
            "CreatedPullRequestContributionEdgeFields",
            "CreatedPullRequestContributionFields",
            "PageInfoFields",
        ]
    ) -> "CreatedPullRequestContributionConnectionFields":
        """Subfields should come from the CreatedPullRequestContributionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedPullRequestContributionConnectionFields":
        self._alias = alias
        return self


class CreatedPullRequestContributionEdgeFields(GraphQLField):
    cursor: "CreatedPullRequestContributionEdgeGraphQLField" = (
        CreatedPullRequestContributionEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "CreatedPullRequestContributionFields":
        return CreatedPullRequestContributionFields("node")

    def fields(
        self,
        *subfields: Union[
            CreatedPullRequestContributionEdgeGraphQLField,
            "CreatedPullRequestContributionFields",
        ]
    ) -> "CreatedPullRequestContributionEdgeFields":
        """Subfields should come from the CreatedPullRequestContributionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedPullRequestContributionEdgeFields":
        self._alias = alias
        return self


class CreatedPullRequestReviewContributionFields(GraphQLField):
    is_restricted: "CreatedPullRequestReviewContributionGraphQLField" = (
        CreatedPullRequestReviewContributionGraphQLField("isRestricted")
    )
    occurred_at: "CreatedPullRequestReviewContributionGraphQLField" = (
        CreatedPullRequestReviewContributionGraphQLField("occurredAt")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def pull_request_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("pull_request_review")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "CreatedPullRequestReviewContributionGraphQLField" = (
        CreatedPullRequestReviewContributionGraphQLField("resourcePath")
    )
    url: "CreatedPullRequestReviewContributionGraphQLField" = (
        CreatedPullRequestReviewContributionGraphQLField("url")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            CreatedPullRequestReviewContributionGraphQLField,
            "PullRequestFields",
            "PullRequestReviewFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "CreatedPullRequestReviewContributionFields":
        """Subfields should come from the CreatedPullRequestReviewContributionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedPullRequestReviewContributionFields":
        self._alias = alias
        return self


class CreatedPullRequestReviewContributionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CreatedPullRequestReviewContributionEdgeFields":
        return CreatedPullRequestReviewContributionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CreatedPullRequestReviewContributionFields":
        return CreatedPullRequestReviewContributionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CreatedPullRequestReviewContributionConnectionGraphQLField" = (
        CreatedPullRequestReviewContributionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CreatedPullRequestReviewContributionConnectionGraphQLField,
            "CreatedPullRequestReviewContributionEdgeFields",
            "CreatedPullRequestReviewContributionFields",
            "PageInfoFields",
        ]
    ) -> "CreatedPullRequestReviewContributionConnectionFields":
        """Subfields should come from the CreatedPullRequestReviewContributionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "CreatedPullRequestReviewContributionConnectionFields":
        self._alias = alias
        return self


class CreatedPullRequestReviewContributionEdgeFields(GraphQLField):
    cursor: "CreatedPullRequestReviewContributionEdgeGraphQLField" = (
        CreatedPullRequestReviewContributionEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "CreatedPullRequestReviewContributionFields":
        return CreatedPullRequestReviewContributionFields("node")

    def fields(
        self,
        *subfields: Union[
            CreatedPullRequestReviewContributionEdgeGraphQLField,
            "CreatedPullRequestReviewContributionFields",
        ]
    ) -> "CreatedPullRequestReviewContributionEdgeFields":
        """Subfields should come from the CreatedPullRequestReviewContributionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedPullRequestReviewContributionEdgeFields":
        self._alias = alias
        return self


class CreatedRepositoryContributionFields(GraphQLField):
    is_restricted: "CreatedRepositoryContributionGraphQLField" = (
        CreatedRepositoryContributionGraphQLField("isRestricted")
    )
    occurred_at: "CreatedRepositoryContributionGraphQLField" = (
        CreatedRepositoryContributionGraphQLField("occurredAt")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "CreatedRepositoryContributionGraphQLField" = (
        CreatedRepositoryContributionGraphQLField("resourcePath")
    )
    url: "CreatedRepositoryContributionGraphQLField" = (
        CreatedRepositoryContributionGraphQLField("url")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            CreatedRepositoryContributionGraphQLField, "RepositoryFields", "UserFields"
        ]
    ) -> "CreatedRepositoryContributionFields":
        """Subfields should come from the CreatedRepositoryContributionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedRepositoryContributionFields":
        self._alias = alias
        return self


class CreatedRepositoryContributionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CreatedRepositoryContributionEdgeFields":
        return CreatedRepositoryContributionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "CreatedRepositoryContributionFields":
        return CreatedRepositoryContributionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CreatedRepositoryContributionConnectionGraphQLField" = (
        CreatedRepositoryContributionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CreatedRepositoryContributionConnectionGraphQLField,
            "CreatedRepositoryContributionEdgeFields",
            "CreatedRepositoryContributionFields",
            "PageInfoFields",
        ]
    ) -> "CreatedRepositoryContributionConnectionFields":
        """Subfields should come from the CreatedRepositoryContributionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedRepositoryContributionConnectionFields":
        self._alias = alias
        return self


class CreatedRepositoryContributionEdgeFields(GraphQLField):
    cursor: "CreatedRepositoryContributionEdgeGraphQLField" = (
        CreatedRepositoryContributionEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "CreatedRepositoryContributionFields":
        return CreatedRepositoryContributionFields("node")

    def fields(
        self,
        *subfields: Union[
            CreatedRepositoryContributionEdgeGraphQLField,
            "CreatedRepositoryContributionFields",
        ]
    ) -> "CreatedRepositoryContributionEdgeFields":
        """Subfields should come from the CreatedRepositoryContributionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreatedRepositoryContributionEdgeFields":
        self._alias = alias
        return self


class CrossReferencedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "CrossReferencedEventGraphQLField" = CrossReferencedEventGraphQLField(
        "createdAt"
    )
    id: "CrossReferencedEventGraphQLField" = CrossReferencedEventGraphQLField("id")
    is_cross_repository: "CrossReferencedEventGraphQLField" = (
        CrossReferencedEventGraphQLField("isCrossRepository")
    )
    referenced_at: "CrossReferencedEventGraphQLField" = (
        CrossReferencedEventGraphQLField("referencedAt")
    )
    resource_path: "CrossReferencedEventGraphQLField" = (
        CrossReferencedEventGraphQLField("resourcePath")
    )
    source: "ReferencedSubjectUnion" = ReferencedSubjectUnion("source")
    target: "ReferencedSubjectUnion" = ReferencedSubjectUnion("target")
    url: "CrossReferencedEventGraphQLField" = CrossReferencedEventGraphQLField("url")
    will_close_target: "CrossReferencedEventGraphQLField" = (
        CrossReferencedEventGraphQLField("willCloseTarget")
    )

    def fields(
        self,
        *subfields: Union[
            CrossReferencedEventGraphQLField, "ActorInterface", "ReferencedSubjectUnion"
        ]
    ) -> "CrossReferencedEventFields":
        """Subfields should come from the CrossReferencedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CrossReferencedEventFields":
        self._alias = alias
        return self


class CvssSeveritiesFields(GraphQLField):
    @classmethod
    def cvss_v_3(cls) -> "CVSSFields":
        return CVSSFields("cvss_v_3")

    @classmethod
    def cvss_v_4(cls) -> "CVSSFields":
        return CVSSFields("cvss_v_4")

    def fields(
        self, *subfields: Union[CvssSeveritiesGraphQLField, "CVSSFields"]
    ) -> "CvssSeveritiesFields":
        """Subfields should come from the CvssSeveritiesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CvssSeveritiesFields":
        self._alias = alias
        return self


class DeclineTopicSuggestionPayloadFields(GraphQLField):
    client_mutation_id: "DeclineTopicSuggestionPayloadGraphQLField" = (
        DeclineTopicSuggestionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def topic(cls) -> "TopicFields":
        return TopicFields("topic")

    def fields(
        self,
        *subfields: Union[DeclineTopicSuggestionPayloadGraphQLField, "TopicFields"]
    ) -> "DeclineTopicSuggestionPayloadFields":
        """Subfields should come from the DeclineTopicSuggestionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeclineTopicSuggestionPayloadFields":
        self._alias = alias
        return self


class DeletableInterface(GraphQLField):
    viewer_can_delete: "DeletableGraphQLField" = DeletableGraphQLField(
        "viewerCanDelete"
    )

    def fields(self, *subfields: DeletableGraphQLField) -> "DeletableInterface":
        """Subfields should come from the DeletableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeletableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "DeletableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class DeleteBranchProtectionRulePayloadFields(GraphQLField):
    client_mutation_id: "DeleteBranchProtectionRulePayloadGraphQLField" = (
        DeleteBranchProtectionRulePayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: DeleteBranchProtectionRulePayloadGraphQLField
    ) -> "DeleteBranchProtectionRulePayloadFields":
        """Subfields should come from the DeleteBranchProtectionRulePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteBranchProtectionRulePayloadFields":
        self._alias = alias
        return self


class DeleteDeploymentPayloadFields(GraphQLField):
    client_mutation_id: "DeleteDeploymentPayloadGraphQLField" = (
        DeleteDeploymentPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: DeleteDeploymentPayloadGraphQLField
    ) -> "DeleteDeploymentPayloadFields":
        """Subfields should come from the DeleteDeploymentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteDeploymentPayloadFields":
        self._alias = alias
        return self


class DeleteDiscussionCommentPayloadFields(GraphQLField):
    client_mutation_id: "DeleteDiscussionCommentPayloadGraphQLField" = (
        DeleteDiscussionCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def comment(cls) -> "DiscussionCommentFields":
        return DiscussionCommentFields("comment")

    def fields(
        self,
        *subfields: Union[
            DeleteDiscussionCommentPayloadGraphQLField, "DiscussionCommentFields"
        ]
    ) -> "DeleteDiscussionCommentPayloadFields":
        """Subfields should come from the DeleteDiscussionCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteDiscussionCommentPayloadFields":
        self._alias = alias
        return self


class DeleteDiscussionPayloadFields(GraphQLField):
    client_mutation_id: "DeleteDiscussionPayloadGraphQLField" = (
        DeleteDiscussionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    def fields(
        self, *subfields: Union[DeleteDiscussionPayloadGraphQLField, "DiscussionFields"]
    ) -> "DeleteDiscussionPayloadFields":
        """Subfields should come from the DeleteDiscussionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteDiscussionPayloadFields":
        self._alias = alias
        return self


class DeleteEnvironmentPayloadFields(GraphQLField):
    client_mutation_id: "DeleteEnvironmentPayloadGraphQLField" = (
        DeleteEnvironmentPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: DeleteEnvironmentPayloadGraphQLField
    ) -> "DeleteEnvironmentPayloadFields":
        """Subfields should come from the DeleteEnvironmentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteEnvironmentPayloadFields":
        self._alias = alias
        return self


class DeleteIpAllowListEntryPayloadFields(GraphQLField):
    client_mutation_id: "DeleteIpAllowListEntryPayloadGraphQLField" = (
        DeleteIpAllowListEntryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def ip_allow_list_entry(cls) -> "IpAllowListEntryFields":
        return IpAllowListEntryFields("ip_allow_list_entry")

    def fields(
        self,
        *subfields: Union[
            DeleteIpAllowListEntryPayloadGraphQLField, "IpAllowListEntryFields"
        ]
    ) -> "DeleteIpAllowListEntryPayloadFields":
        """Subfields should come from the DeleteIpAllowListEntryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteIpAllowListEntryPayloadFields":
        self._alias = alias
        return self


class DeleteIssueCommentPayloadFields(GraphQLField):
    client_mutation_id: "DeleteIssueCommentPayloadGraphQLField" = (
        DeleteIssueCommentPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: DeleteIssueCommentPayloadGraphQLField
    ) -> "DeleteIssueCommentPayloadFields":
        """Subfields should come from the DeleteIssueCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteIssueCommentPayloadFields":
        self._alias = alias
        return self


class DeleteIssuePayloadFields(GraphQLField):
    client_mutation_id: "DeleteIssuePayloadGraphQLField" = (
        DeleteIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[DeleteIssuePayloadGraphQLField, "RepositoryFields"]
    ) -> "DeleteIssuePayloadFields":
        """Subfields should come from the DeleteIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteIssuePayloadFields":
        self._alias = alias
        return self


class DeleteIssueTypePayloadFields(GraphQLField):
    client_mutation_id: "DeleteIssueTypePayloadGraphQLField" = (
        DeleteIssueTypePayloadGraphQLField("clientMutationId")
    )
    deleted_issue_type_id: "DeleteIssueTypePayloadGraphQLField" = (
        DeleteIssueTypePayloadGraphQLField("deletedIssueTypeId")
    )

    def fields(
        self, *subfields: DeleteIssueTypePayloadGraphQLField
    ) -> "DeleteIssueTypePayloadFields":
        """Subfields should come from the DeleteIssueTypePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteIssueTypePayloadFields":
        self._alias = alias
        return self


class DeleteLabelPayloadFields(GraphQLField):
    client_mutation_id: "DeleteLabelPayloadGraphQLField" = (
        DeleteLabelPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: DeleteLabelPayloadGraphQLField
    ) -> "DeleteLabelPayloadFields":
        """Subfields should come from the DeleteLabelPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteLabelPayloadFields":
        self._alias = alias
        return self


class DeleteLinkedBranchPayloadFields(GraphQLField):
    client_mutation_id: "DeleteLinkedBranchPayloadGraphQLField" = (
        DeleteLinkedBranchPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[DeleteLinkedBranchPayloadGraphQLField, "IssueFields"]
    ) -> "DeleteLinkedBranchPayloadFields":
        """Subfields should come from the DeleteLinkedBranchPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteLinkedBranchPayloadFields":
        self._alias = alias
        return self


class DeletePackageVersionPayloadFields(GraphQLField):
    client_mutation_id: "DeletePackageVersionPayloadGraphQLField" = (
        DeletePackageVersionPayloadGraphQLField("clientMutationId")
    )
    success: "DeletePackageVersionPayloadGraphQLField" = (
        DeletePackageVersionPayloadGraphQLField("success")
    )

    def fields(
        self, *subfields: DeletePackageVersionPayloadGraphQLField
    ) -> "DeletePackageVersionPayloadFields":
        """Subfields should come from the DeletePackageVersionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeletePackageVersionPayloadFields":
        self._alias = alias
        return self


class DeleteProjectCardPayloadFields(GraphQLField):
    client_mutation_id: "DeleteProjectCardPayloadGraphQLField" = (
        DeleteProjectCardPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def column(cls) -> "ProjectColumnFields":
        return ProjectColumnFields("column")

    deleted_card_id: "DeleteProjectCardPayloadGraphQLField" = (
        DeleteProjectCardPayloadGraphQLField("deletedCardId")
    )

    def fields(
        self,
        *subfields: Union[DeleteProjectCardPayloadGraphQLField, "ProjectColumnFields"]
    ) -> "DeleteProjectCardPayloadFields":
        """Subfields should come from the DeleteProjectCardPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectCardPayloadFields":
        self._alias = alias
        return self


class DeleteProjectColumnPayloadFields(GraphQLField):
    client_mutation_id: "DeleteProjectColumnPayloadGraphQLField" = (
        DeleteProjectColumnPayloadGraphQLField("clientMutationId")
    )
    deleted_column_id: "DeleteProjectColumnPayloadGraphQLField" = (
        DeleteProjectColumnPayloadGraphQLField("deletedColumnId")
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    def fields(
        self, *subfields: Union[DeleteProjectColumnPayloadGraphQLField, "ProjectFields"]
    ) -> "DeleteProjectColumnPayloadFields":
        """Subfields should come from the DeleteProjectColumnPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectColumnPayloadFields":
        self._alias = alias
        return self


class DeleteProjectPayloadFields(GraphQLField):
    client_mutation_id: "DeleteProjectPayloadGraphQLField" = (
        DeleteProjectPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def owner(cls) -> "ProjectOwnerInterface":
        return ProjectOwnerInterface("owner")

    def fields(
        self,
        *subfields: Union[DeleteProjectPayloadGraphQLField, "ProjectOwnerInterface"]
    ) -> "DeleteProjectPayloadFields":
        """Subfields should come from the DeleteProjectPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectPayloadFields":
        self._alias = alias
        return self


class DeleteProjectV2FieldPayloadFields(GraphQLField):
    client_mutation_id: "DeleteProjectV2FieldPayloadGraphQLField" = (
        DeleteProjectV2FieldPayloadGraphQLField("clientMutationId")
    )
    project_v_2_field: "ProjectV2FieldConfigurationUnion" = (
        ProjectV2FieldConfigurationUnion("projectV2Field")
    )

    def fields(
        self,
        *subfields: Union[
            DeleteProjectV2FieldPayloadGraphQLField, "ProjectV2FieldConfigurationUnion"
        ]
    ) -> "DeleteProjectV2FieldPayloadFields":
        """Subfields should come from the DeleteProjectV2FieldPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectV2FieldPayloadFields":
        self._alias = alias
        return self


class DeleteProjectV2ItemPayloadFields(GraphQLField):
    client_mutation_id: "DeleteProjectV2ItemPayloadGraphQLField" = (
        DeleteProjectV2ItemPayloadGraphQLField("clientMutationId")
    )
    deleted_item_id: "DeleteProjectV2ItemPayloadGraphQLField" = (
        DeleteProjectV2ItemPayloadGraphQLField("deletedItemId")
    )

    def fields(
        self, *subfields: DeleteProjectV2ItemPayloadGraphQLField
    ) -> "DeleteProjectV2ItemPayloadFields":
        """Subfields should come from the DeleteProjectV2ItemPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectV2ItemPayloadFields":
        self._alias = alias
        return self


class DeleteProjectV2PayloadFields(GraphQLField):
    client_mutation_id: "DeleteProjectV2PayloadGraphQLField" = (
        DeleteProjectV2PayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_v_2(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project_v_2")

    def fields(
        self, *subfields: Union[DeleteProjectV2PayloadGraphQLField, "ProjectV2Fields"]
    ) -> "DeleteProjectV2PayloadFields":
        """Subfields should come from the DeleteProjectV2PayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectV2PayloadFields":
        self._alias = alias
        return self


class DeleteProjectV2StatusUpdatePayloadFields(GraphQLField):
    client_mutation_id: "DeleteProjectV2StatusUpdatePayloadGraphQLField" = (
        DeleteProjectV2StatusUpdatePayloadGraphQLField("clientMutationId")
    )
    deleted_status_update_id: "DeleteProjectV2StatusUpdatePayloadGraphQLField" = (
        DeleteProjectV2StatusUpdatePayloadGraphQLField("deletedStatusUpdateId")
    )

    @classmethod
    def project_v_2(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project_v_2")

    def fields(
        self,
        *subfields: Union[
            DeleteProjectV2StatusUpdatePayloadGraphQLField, "ProjectV2Fields"
        ]
    ) -> "DeleteProjectV2StatusUpdatePayloadFields":
        """Subfields should come from the DeleteProjectV2StatusUpdatePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectV2StatusUpdatePayloadFields":
        self._alias = alias
        return self


class DeleteProjectV2WorkflowPayloadFields(GraphQLField):
    client_mutation_id: "DeleteProjectV2WorkflowPayloadGraphQLField" = (
        DeleteProjectV2WorkflowPayloadGraphQLField("clientMutationId")
    )
    deleted_workflow_id: "DeleteProjectV2WorkflowPayloadGraphQLField" = (
        DeleteProjectV2WorkflowPayloadGraphQLField("deletedWorkflowId")
    )

    @classmethod
    def project_v_2(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project_v_2")

    def fields(
        self,
        *subfields: Union[DeleteProjectV2WorkflowPayloadGraphQLField, "ProjectV2Fields"]
    ) -> "DeleteProjectV2WorkflowPayloadFields":
        """Subfields should come from the DeleteProjectV2WorkflowPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectV2WorkflowPayloadFields":
        self._alias = alias
        return self


class DeletePullRequestReviewCommentPayloadFields(GraphQLField):
    client_mutation_id: "DeletePullRequestReviewCommentPayloadGraphQLField" = (
        DeletePullRequestReviewCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("pull_request_review")

    @classmethod
    def pull_request_review_comment(cls) -> "PullRequestReviewCommentFields":
        return PullRequestReviewCommentFields("pull_request_review_comment")

    def fields(
        self,
        *subfields: Union[
            DeletePullRequestReviewCommentPayloadGraphQLField,
            "PullRequestReviewCommentFields",
            "PullRequestReviewFields",
        ]
    ) -> "DeletePullRequestReviewCommentPayloadFields":
        """Subfields should come from the DeletePullRequestReviewCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeletePullRequestReviewCommentPayloadFields":
        self._alias = alias
        return self


class DeletePullRequestReviewPayloadFields(GraphQLField):
    client_mutation_id: "DeletePullRequestReviewPayloadGraphQLField" = (
        DeletePullRequestReviewPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("pull_request_review")

    def fields(
        self,
        *subfields: Union[
            DeletePullRequestReviewPayloadGraphQLField, "PullRequestReviewFields"
        ]
    ) -> "DeletePullRequestReviewPayloadFields":
        """Subfields should come from the DeletePullRequestReviewPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeletePullRequestReviewPayloadFields":
        self._alias = alias
        return self


class DeleteRefPayloadFields(GraphQLField):
    client_mutation_id: "DeleteRefPayloadGraphQLField" = DeleteRefPayloadGraphQLField(
        "clientMutationId"
    )

    def fields(
        self, *subfields: DeleteRefPayloadGraphQLField
    ) -> "DeleteRefPayloadFields":
        """Subfields should come from the DeleteRefPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteRefPayloadFields":
        self._alias = alias
        return self


class DeleteRepositoryRulesetPayloadFields(GraphQLField):
    client_mutation_id: "DeleteRepositoryRulesetPayloadGraphQLField" = (
        DeleteRepositoryRulesetPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: DeleteRepositoryRulesetPayloadGraphQLField
    ) -> "DeleteRepositoryRulesetPayloadFields":
        """Subfields should come from the DeleteRepositoryRulesetPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteRepositoryRulesetPayloadFields":
        self._alias = alias
        return self


class DeleteTeamDiscussionCommentPayloadFields(GraphQLField):
    client_mutation_id: "DeleteTeamDiscussionCommentPayloadGraphQLField" = (
        DeleteTeamDiscussionCommentPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: DeleteTeamDiscussionCommentPayloadGraphQLField
    ) -> "DeleteTeamDiscussionCommentPayloadFields":
        """Subfields should come from the DeleteTeamDiscussionCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteTeamDiscussionCommentPayloadFields":
        self._alias = alias
        return self


class DeleteTeamDiscussionPayloadFields(GraphQLField):
    client_mutation_id: "DeleteTeamDiscussionPayloadGraphQLField" = (
        DeleteTeamDiscussionPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: DeleteTeamDiscussionPayloadGraphQLField
    ) -> "DeleteTeamDiscussionPayloadFields":
        """Subfields should come from the DeleteTeamDiscussionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteTeamDiscussionPayloadFields":
        self._alias = alias
        return self


class DeleteUserListPayloadFields(GraphQLField):
    client_mutation_id: "DeleteUserListPayloadGraphQLField" = (
        DeleteUserListPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[DeleteUserListPayloadGraphQLField, "UserFields"]
    ) -> "DeleteUserListPayloadFields":
        """Subfields should come from the DeleteUserListPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteUserListPayloadFields":
        self._alias = alias
        return self


class DeleteVerifiableDomainPayloadFields(GraphQLField):
    client_mutation_id: "DeleteVerifiableDomainPayloadGraphQLField" = (
        DeleteVerifiableDomainPayloadGraphQLField("clientMutationId")
    )
    owner: "VerifiableDomainOwnerUnion" = VerifiableDomainOwnerUnion("owner")

    def fields(
        self,
        *subfields: Union[
            DeleteVerifiableDomainPayloadGraphQLField, "VerifiableDomainOwnerUnion"
        ]
    ) -> "DeleteVerifiableDomainPayloadFields":
        """Subfields should come from the DeleteVerifiableDomainPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteVerifiableDomainPayloadFields":
        self._alias = alias
        return self


class DemilestonedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "DemilestonedEventGraphQLField" = DemilestonedEventGraphQLField(
        "createdAt"
    )
    id: "DemilestonedEventGraphQLField" = DemilestonedEventGraphQLField("id")
    milestone_title: "DemilestonedEventGraphQLField" = DemilestonedEventGraphQLField(
        "milestoneTitle"
    )
    subject: "MilestoneItemUnion" = MilestoneItemUnion("subject")

    def fields(
        self,
        *subfields: Union[
            DemilestonedEventGraphQLField, "ActorInterface", "MilestoneItemUnion"
        ]
    ) -> "DemilestonedEventFields":
        """Subfields should come from the DemilestonedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DemilestonedEventFields":
        self._alias = alias
        return self


class DependabotUpdateFields(GraphQLField):
    @classmethod
    def error(cls) -> "DependabotUpdateErrorFields":
        return DependabotUpdateErrorFields("error")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            DependabotUpdateGraphQLField,
            "DependabotUpdateErrorFields",
            "PullRequestFields",
            "RepositoryFields",
        ]
    ) -> "DependabotUpdateFields":
        """Subfields should come from the DependabotUpdateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependabotUpdateFields":
        self._alias = alias
        return self


class DependabotUpdateErrorFields(GraphQLField):
    body: "DependabotUpdateErrorGraphQLField" = DependabotUpdateErrorGraphQLField(
        "body"
    )
    error_type: "DependabotUpdateErrorGraphQLField" = DependabotUpdateErrorGraphQLField(
        "errorType"
    )
    title: "DependabotUpdateErrorGraphQLField" = DependabotUpdateErrorGraphQLField(
        "title"
    )

    def fields(
        self, *subfields: DependabotUpdateErrorGraphQLField
    ) -> "DependabotUpdateErrorFields":
        """Subfields should come from the DependabotUpdateErrorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependabotUpdateErrorFields":
        self._alias = alias
        return self


class DependencyGraphDependencyFields(GraphQLField):
    has_dependencies: "DependencyGraphDependencyGraphQLField" = (
        DependencyGraphDependencyGraphQLField("hasDependencies")
    )
    package_label: "DependencyGraphDependencyGraphQLField" = (
        DependencyGraphDependencyGraphQLField("packageLabel")
    )
    package_manager: "DependencyGraphDependencyGraphQLField" = (
        DependencyGraphDependencyGraphQLField("packageManager")
    )
    package_name: "DependencyGraphDependencyGraphQLField" = (
        DependencyGraphDependencyGraphQLField("packageName")
    )
    package_url: "DependencyGraphDependencyGraphQLField" = (
        DependencyGraphDependencyGraphQLField("packageUrl")
    )
    relationship: "DependencyGraphDependencyGraphQLField" = (
        DependencyGraphDependencyGraphQLField("relationship")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    requirements: "DependencyGraphDependencyGraphQLField" = (
        DependencyGraphDependencyGraphQLField("requirements")
    )

    def fields(
        self,
        *subfields: Union[DependencyGraphDependencyGraphQLField, "RepositoryFields"]
    ) -> "DependencyGraphDependencyFields":
        """Subfields should come from the DependencyGraphDependencyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependencyGraphDependencyFields":
        self._alias = alias
        return self


class DependencyGraphDependencyConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DependencyGraphDependencyEdgeFields":
        return DependencyGraphDependencyEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DependencyGraphDependencyFields":
        return DependencyGraphDependencyFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DependencyGraphDependencyConnectionGraphQLField" = (
        DependencyGraphDependencyConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DependencyGraphDependencyConnectionGraphQLField,
            "DependencyGraphDependencyEdgeFields",
            "DependencyGraphDependencyFields",
            "PageInfoFields",
        ]
    ) -> "DependencyGraphDependencyConnectionFields":
        """Subfields should come from the DependencyGraphDependencyConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependencyGraphDependencyConnectionFields":
        self._alias = alias
        return self


class DependencyGraphDependencyEdgeFields(GraphQLField):
    cursor: "DependencyGraphDependencyEdgeGraphQLField" = (
        DependencyGraphDependencyEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "DependencyGraphDependencyFields":
        return DependencyGraphDependencyFields("node")

    def fields(
        self,
        *subfields: Union[
            DependencyGraphDependencyEdgeGraphQLField, "DependencyGraphDependencyFields"
        ]
    ) -> "DependencyGraphDependencyEdgeFields":
        """Subfields should come from the DependencyGraphDependencyEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependencyGraphDependencyEdgeFields":
        self._alias = alias
        return self


class DependencyGraphManifestFields(GraphQLField):
    blob_path: "DependencyGraphManifestGraphQLField" = (
        DependencyGraphManifestGraphQLField("blobPath")
    )

    @classmethod
    def dependencies(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DependencyGraphDependencyConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DependencyGraphDependencyConnectionFields(
            "dependencies", arguments=cleared_arguments
        )

    dependencies_count: "DependencyGraphManifestGraphQLField" = (
        DependencyGraphManifestGraphQLField("dependenciesCount")
    )
    exceeds_max_size: "DependencyGraphManifestGraphQLField" = (
        DependencyGraphManifestGraphQLField("exceedsMaxSize")
    )
    filename: "DependencyGraphManifestGraphQLField" = (
        DependencyGraphManifestGraphQLField("filename")
    )
    id: "DependencyGraphManifestGraphQLField" = DependencyGraphManifestGraphQLField(
        "id"
    )
    parseable: "DependencyGraphManifestGraphQLField" = (
        DependencyGraphManifestGraphQLField("parseable")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            DependencyGraphManifestGraphQLField,
            "DependencyGraphDependencyConnectionFields",
            "RepositoryFields",
        ]
    ) -> "DependencyGraphManifestFields":
        """Subfields should come from the DependencyGraphManifestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependencyGraphManifestFields":
        self._alias = alias
        return self


class DependencyGraphManifestConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DependencyGraphManifestEdgeFields":
        return DependencyGraphManifestEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DependencyGraphManifestFields":
        return DependencyGraphManifestFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DependencyGraphManifestConnectionGraphQLField" = (
        DependencyGraphManifestConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DependencyGraphManifestConnectionGraphQLField,
            "DependencyGraphManifestEdgeFields",
            "DependencyGraphManifestFields",
            "PageInfoFields",
        ]
    ) -> "DependencyGraphManifestConnectionFields":
        """Subfields should come from the DependencyGraphManifestConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependencyGraphManifestConnectionFields":
        self._alias = alias
        return self


class DependencyGraphManifestEdgeFields(GraphQLField):
    cursor: "DependencyGraphManifestEdgeGraphQLField" = (
        DependencyGraphManifestEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "DependencyGraphManifestFields":
        return DependencyGraphManifestFields("node")

    def fields(
        self,
        *subfields: Union[
            DependencyGraphManifestEdgeGraphQLField, "DependencyGraphManifestFields"
        ]
    ) -> "DependencyGraphManifestEdgeFields":
        """Subfields should come from the DependencyGraphManifestEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependencyGraphManifestEdgeFields":
        self._alias = alias
        return self


class DeployKeyFields(GraphQLField):
    created_at: "DeployKeyGraphQLField" = DeployKeyGraphQLField("createdAt")
    enabled: "DeployKeyGraphQLField" = DeployKeyGraphQLField("enabled")
    id: "DeployKeyGraphQLField" = DeployKeyGraphQLField("id")
    key: "DeployKeyGraphQLField" = DeployKeyGraphQLField("key")
    read_only: "DeployKeyGraphQLField" = DeployKeyGraphQLField("readOnly")
    title: "DeployKeyGraphQLField" = DeployKeyGraphQLField("title")
    verified: "DeployKeyGraphQLField" = DeployKeyGraphQLField("verified")

    def fields(self, *subfields: DeployKeyGraphQLField) -> "DeployKeyFields":
        """Subfields should come from the DeployKeyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeployKeyFields":
        self._alias = alias
        return self


class DeployKeyConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DeployKeyEdgeFields":
        return DeployKeyEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DeployKeyFields":
        return DeployKeyFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DeployKeyConnectionGraphQLField" = DeployKeyConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            DeployKeyConnectionGraphQLField,
            "DeployKeyEdgeFields",
            "DeployKeyFields",
            "PageInfoFields",
        ]
    ) -> "DeployKeyConnectionFields":
        """Subfields should come from the DeployKeyConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeployKeyConnectionFields":
        self._alias = alias
        return self


class DeployKeyEdgeFields(GraphQLField):
    cursor: "DeployKeyEdgeGraphQLField" = DeployKeyEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "DeployKeyFields":
        return DeployKeyFields("node")

    def fields(
        self, *subfields: Union[DeployKeyEdgeGraphQLField, "DeployKeyFields"]
    ) -> "DeployKeyEdgeFields":
        """Subfields should come from the DeployKeyEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeployKeyEdgeFields":
        self._alias = alias
        return self


class DeployedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "DeployedEventGraphQLField" = DeployedEventGraphQLField("createdAt")
    database_id: "DeployedEventGraphQLField" = DeployedEventGraphQLField("databaseId")

    @classmethod
    def deployment(cls) -> "DeploymentFields":
        return DeploymentFields("deployment")

    id: "DeployedEventGraphQLField" = DeployedEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    def fields(
        self,
        *subfields: Union[
            DeployedEventGraphQLField,
            "ActorInterface",
            "DeploymentFields",
            "PullRequestFields",
            "RefFields",
        ]
    ) -> "DeployedEventFields":
        """Subfields should come from the DeployedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeployedEventFields":
        self._alias = alias
        return self


class DeploymentFields(GraphQLField):
    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    commit_oid: "DeploymentGraphQLField" = DeploymentGraphQLField("commitOid")
    created_at: "DeploymentGraphQLField" = DeploymentGraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "DeploymentGraphQLField" = DeploymentGraphQLField("databaseId")
    description: "DeploymentGraphQLField" = DeploymentGraphQLField("description")
    environment: "DeploymentGraphQLField" = DeploymentGraphQLField("environment")
    id: "DeploymentGraphQLField" = DeploymentGraphQLField("id")
    latest_environment: "DeploymentGraphQLField" = DeploymentGraphQLField(
        "latestEnvironment"
    )

    @classmethod
    def latest_status(cls) -> "DeploymentStatusFields":
        return DeploymentStatusFields("latest_status")

    original_environment: "DeploymentGraphQLField" = DeploymentGraphQLField(
        "originalEnvironment"
    )
    payload: "DeploymentGraphQLField" = DeploymentGraphQLField("payload")

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    state: "DeploymentGraphQLField" = DeploymentGraphQLField("state")

    @classmethod
    def statuses(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DeploymentStatusConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentStatusConnectionFields("statuses", arguments=cleared_arguments)

    task: "DeploymentGraphQLField" = DeploymentGraphQLField("task")
    updated_at: "DeploymentGraphQLField" = DeploymentGraphQLField("updatedAt")

    def fields(
        self,
        *subfields: Union[
            DeploymentGraphQLField,
            "ActorInterface",
            "CommitFields",
            "DeploymentStatusConnectionFields",
            "DeploymentStatusFields",
            "RefFields",
            "RepositoryFields",
        ]
    ) -> "DeploymentFields":
        """Subfields should come from the DeploymentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentFields":
        self._alias = alias
        return self


class DeploymentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DeploymentEdgeFields":
        return DeploymentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DeploymentFields":
        return DeploymentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DeploymentConnectionGraphQLField" = DeploymentConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentConnectionGraphQLField,
            "DeploymentEdgeFields",
            "DeploymentFields",
            "PageInfoFields",
        ]
    ) -> "DeploymentConnectionFields":
        """Subfields should come from the DeploymentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentConnectionFields":
        self._alias = alias
        return self


class DeploymentEdgeFields(GraphQLField):
    cursor: "DeploymentEdgeGraphQLField" = DeploymentEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "DeploymentFields":
        return DeploymentFields("node")

    def fields(
        self, *subfields: Union[DeploymentEdgeGraphQLField, "DeploymentFields"]
    ) -> "DeploymentEdgeFields":
        """Subfields should come from the DeploymentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentEdgeFields":
        self._alias = alias
        return self


class DeploymentEnvironmentChangedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "DeploymentEnvironmentChangedEventGraphQLField" = (
        DeploymentEnvironmentChangedEventGraphQLField("createdAt")
    )

    @classmethod
    def deployment_status(cls) -> "DeploymentStatusFields":
        return DeploymentStatusFields("deployment_status")

    id: "DeploymentEnvironmentChangedEventGraphQLField" = (
        DeploymentEnvironmentChangedEventGraphQLField("id")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            DeploymentEnvironmentChangedEventGraphQLField,
            "ActorInterface",
            "DeploymentStatusFields",
            "PullRequestFields",
        ]
    ) -> "DeploymentEnvironmentChangedEventFields":
        """Subfields should come from the DeploymentEnvironmentChangedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentEnvironmentChangedEventFields":
        self._alias = alias
        return self


class DeploymentProtectionRuleFields(GraphQLField):
    database_id: "DeploymentProtectionRuleGraphQLField" = (
        DeploymentProtectionRuleGraphQLField("databaseId")
    )
    prevent_self_review: "DeploymentProtectionRuleGraphQLField" = (
        DeploymentProtectionRuleGraphQLField("preventSelfReview")
    )

    @classmethod
    def reviewers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DeploymentReviewerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentReviewerConnectionFields(
            "reviewers", arguments=cleared_arguments
        )

    timeout: "DeploymentProtectionRuleGraphQLField" = (
        DeploymentProtectionRuleGraphQLField("timeout")
    )
    type: "DeploymentProtectionRuleGraphQLField" = DeploymentProtectionRuleGraphQLField(
        "type"
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentProtectionRuleGraphQLField, "DeploymentReviewerConnectionFields"
        ]
    ) -> "DeploymentProtectionRuleFields":
        """Subfields should come from the DeploymentProtectionRuleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentProtectionRuleFields":
        self._alias = alias
        return self


class DeploymentProtectionRuleConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DeploymentProtectionRuleEdgeFields":
        return DeploymentProtectionRuleEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DeploymentProtectionRuleFields":
        return DeploymentProtectionRuleFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DeploymentProtectionRuleConnectionGraphQLField" = (
        DeploymentProtectionRuleConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentProtectionRuleConnectionGraphQLField,
            "DeploymentProtectionRuleEdgeFields",
            "DeploymentProtectionRuleFields",
            "PageInfoFields",
        ]
    ) -> "DeploymentProtectionRuleConnectionFields":
        """Subfields should come from the DeploymentProtectionRuleConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentProtectionRuleConnectionFields":
        self._alias = alias
        return self


class DeploymentProtectionRuleEdgeFields(GraphQLField):
    cursor: "DeploymentProtectionRuleEdgeGraphQLField" = (
        DeploymentProtectionRuleEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "DeploymentProtectionRuleFields":
        return DeploymentProtectionRuleFields("node")

    def fields(
        self,
        *subfields: Union[
            DeploymentProtectionRuleEdgeGraphQLField, "DeploymentProtectionRuleFields"
        ]
    ) -> "DeploymentProtectionRuleEdgeFields":
        """Subfields should come from the DeploymentProtectionRuleEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentProtectionRuleEdgeFields":
        self._alias = alias
        return self


class DeploymentRequestFields(GraphQLField):
    current_user_can_approve: "DeploymentRequestGraphQLField" = (
        DeploymentRequestGraphQLField("currentUserCanApprove")
    )

    @classmethod
    def environment(cls) -> "EnvironmentFields":
        return EnvironmentFields("environment")

    @classmethod
    def reviewers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DeploymentReviewerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentReviewerConnectionFields(
            "reviewers", arguments=cleared_arguments
        )

    wait_timer: "DeploymentRequestGraphQLField" = DeploymentRequestGraphQLField(
        "waitTimer"
    )
    wait_timer_started_at: "DeploymentRequestGraphQLField" = (
        DeploymentRequestGraphQLField("waitTimerStartedAt")
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentRequestGraphQLField,
            "DeploymentReviewerConnectionFields",
            "EnvironmentFields",
        ]
    ) -> "DeploymentRequestFields":
        """Subfields should come from the DeploymentRequestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentRequestFields":
        self._alias = alias
        return self


class DeploymentRequestConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DeploymentRequestEdgeFields":
        return DeploymentRequestEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DeploymentRequestFields":
        return DeploymentRequestFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DeploymentRequestConnectionGraphQLField" = (
        DeploymentRequestConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentRequestConnectionGraphQLField,
            "DeploymentRequestEdgeFields",
            "DeploymentRequestFields",
            "PageInfoFields",
        ]
    ) -> "DeploymentRequestConnectionFields":
        """Subfields should come from the DeploymentRequestConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentRequestConnectionFields":
        self._alias = alias
        return self


class DeploymentRequestEdgeFields(GraphQLField):
    cursor: "DeploymentRequestEdgeGraphQLField" = DeploymentRequestEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "DeploymentRequestFields":
        return DeploymentRequestFields("node")

    def fields(
        self,
        *subfields: Union[DeploymentRequestEdgeGraphQLField, "DeploymentRequestFields"]
    ) -> "DeploymentRequestEdgeFields":
        """Subfields should come from the DeploymentRequestEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentRequestEdgeFields":
        self._alias = alias
        return self


class DeploymentReviewFields(GraphQLField):
    comment: "DeploymentReviewGraphQLField" = DeploymentReviewGraphQLField("comment")
    database_id: "DeploymentReviewGraphQLField" = DeploymentReviewGraphQLField(
        "databaseId"
    )

    @classmethod
    def environments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "EnvironmentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnvironmentConnectionFields("environments", arguments=cleared_arguments)

    id: "DeploymentReviewGraphQLField" = DeploymentReviewGraphQLField("id")
    state: "DeploymentReviewGraphQLField" = DeploymentReviewGraphQLField("state")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            DeploymentReviewGraphQLField, "EnvironmentConnectionFields", "UserFields"
        ]
    ) -> "DeploymentReviewFields":
        """Subfields should come from the DeploymentReviewFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentReviewFields":
        self._alias = alias
        return self


class DeploymentReviewConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DeploymentReviewEdgeFields":
        return DeploymentReviewEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DeploymentReviewFields":
        return DeploymentReviewFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DeploymentReviewConnectionGraphQLField" = (
        DeploymentReviewConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentReviewConnectionGraphQLField,
            "DeploymentReviewEdgeFields",
            "DeploymentReviewFields",
            "PageInfoFields",
        ]
    ) -> "DeploymentReviewConnectionFields":
        """Subfields should come from the DeploymentReviewConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentReviewConnectionFields":
        self._alias = alias
        return self


class DeploymentReviewEdgeFields(GraphQLField):
    cursor: "DeploymentReviewEdgeGraphQLField" = DeploymentReviewEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "DeploymentReviewFields":
        return DeploymentReviewFields("node")

    def fields(
        self,
        *subfields: Union[DeploymentReviewEdgeGraphQLField, "DeploymentReviewFields"]
    ) -> "DeploymentReviewEdgeFields":
        """Subfields should come from the DeploymentReviewEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentReviewEdgeFields":
        self._alias = alias
        return self


class DeploymentReviewerConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DeploymentReviewerEdgeFields":
        return DeploymentReviewerEdgeFields("edges")

    nodes: "DeploymentReviewerUnion" = DeploymentReviewerUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DeploymentReviewerConnectionGraphQLField" = (
        DeploymentReviewerConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentReviewerConnectionGraphQLField,
            "DeploymentReviewerEdgeFields",
            "DeploymentReviewerUnion",
            "PageInfoFields",
        ]
    ) -> "DeploymentReviewerConnectionFields":
        """Subfields should come from the DeploymentReviewerConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentReviewerConnectionFields":
        self._alias = alias
        return self


class DeploymentReviewerEdgeFields(GraphQLField):
    cursor: "DeploymentReviewerEdgeGraphQLField" = DeploymentReviewerEdgeGraphQLField(
        "cursor"
    )
    node: "DeploymentReviewerUnion" = DeploymentReviewerUnion("node")

    def fields(
        self,
        *subfields: Union[DeploymentReviewerEdgeGraphQLField, "DeploymentReviewerUnion"]
    ) -> "DeploymentReviewerEdgeFields":
        """Subfields should come from the DeploymentReviewerEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentReviewerEdgeFields":
        self._alias = alias
        return self


class DeploymentStatusFields(GraphQLField):
    created_at: "DeploymentStatusGraphQLField" = DeploymentStatusGraphQLField(
        "createdAt"
    )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    @classmethod
    def deployment(cls) -> "DeploymentFields":
        return DeploymentFields("deployment")

    description: "DeploymentStatusGraphQLField" = DeploymentStatusGraphQLField(
        "description"
    )
    environment: "DeploymentStatusGraphQLField" = DeploymentStatusGraphQLField(
        "environment"
    )
    environment_url: "DeploymentStatusGraphQLField" = DeploymentStatusGraphQLField(
        "environmentUrl"
    )
    id: "DeploymentStatusGraphQLField" = DeploymentStatusGraphQLField("id")
    log_url: "DeploymentStatusGraphQLField" = DeploymentStatusGraphQLField("logUrl")
    state: "DeploymentStatusGraphQLField" = DeploymentStatusGraphQLField("state")
    updated_at: "DeploymentStatusGraphQLField" = DeploymentStatusGraphQLField(
        "updatedAt"
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentStatusGraphQLField, "ActorInterface", "DeploymentFields"
        ]
    ) -> "DeploymentStatusFields":
        """Subfields should come from the DeploymentStatusFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentStatusFields":
        self._alias = alias
        return self


class DeploymentStatusConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DeploymentStatusEdgeFields":
        return DeploymentStatusEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DeploymentStatusFields":
        return DeploymentStatusFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DeploymentStatusConnectionGraphQLField" = (
        DeploymentStatusConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DeploymentStatusConnectionGraphQLField,
            "DeploymentStatusEdgeFields",
            "DeploymentStatusFields",
            "PageInfoFields",
        ]
    ) -> "DeploymentStatusConnectionFields":
        """Subfields should come from the DeploymentStatusConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentStatusConnectionFields":
        self._alias = alias
        return self


class DeploymentStatusEdgeFields(GraphQLField):
    cursor: "DeploymentStatusEdgeGraphQLField" = DeploymentStatusEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "DeploymentStatusFields":
        return DeploymentStatusFields("node")

    def fields(
        self,
        *subfields: Union[DeploymentStatusEdgeGraphQLField, "DeploymentStatusFields"]
    ) -> "DeploymentStatusEdgeFields":
        """Subfields should come from the DeploymentStatusEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentStatusEdgeFields":
        self._alias = alias
        return self


class DequeuePullRequestPayloadFields(GraphQLField):
    client_mutation_id: "DequeuePullRequestPayloadGraphQLField" = (
        DequeuePullRequestPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def merge_queue_entry(cls) -> "MergeQueueEntryFields":
        return MergeQueueEntryFields("merge_queue_entry")

    def fields(
        self,
        *subfields: Union[
            DequeuePullRequestPayloadGraphQLField, "MergeQueueEntryFields"
        ]
    ) -> "DequeuePullRequestPayloadFields":
        """Subfields should come from the DequeuePullRequestPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DequeuePullRequestPayloadFields":
        self._alias = alias
        return self


class DisablePullRequestAutoMergePayloadFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    client_mutation_id: "DisablePullRequestAutoMergePayloadGraphQLField" = (
        DisablePullRequestAutoMergePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            DisablePullRequestAutoMergePayloadGraphQLField,
            "ActorInterface",
            "PullRequestFields",
        ]
    ) -> "DisablePullRequestAutoMergePayloadFields":
        """Subfields should come from the DisablePullRequestAutoMergePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DisablePullRequestAutoMergePayloadFields":
        self._alias = alias
        return self


class DisconnectedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "DisconnectedEventGraphQLField" = DisconnectedEventGraphQLField(
        "createdAt"
    )
    id: "DisconnectedEventGraphQLField" = DisconnectedEventGraphQLField("id")
    is_cross_repository: "DisconnectedEventGraphQLField" = (
        DisconnectedEventGraphQLField("isCrossRepository")
    )
    source: "ReferencedSubjectUnion" = ReferencedSubjectUnion("source")
    subject: "ReferencedSubjectUnion" = ReferencedSubjectUnion("subject")

    def fields(
        self,
        *subfields: Union[
            DisconnectedEventGraphQLField, "ActorInterface", "ReferencedSubjectUnion"
        ]
    ) -> "DisconnectedEventFields":
        """Subfields should come from the DisconnectedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DisconnectedEventFields":
        self._alias = alias
        return self


class DiscussionFields(GraphQLField):
    active_lock_reason: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "activeLockReason"
    )

    @classmethod
    def answer(cls) -> "DiscussionCommentFields":
        return DiscussionCommentFields("answer")

    answer_chosen_at: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "answerChosenAt"
    )

    @classmethod
    def answer_chosen_by(cls) -> "ActorInterface":
        return ActorInterface("answer_chosen_by")

    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "authorAssociation"
    )
    body: "DiscussionGraphQLField" = DiscussionGraphQLField("body")
    body_html: "DiscussionGraphQLField" = DiscussionGraphQLField("bodyHTML")
    body_text: "DiscussionGraphQLField" = DiscussionGraphQLField("bodyText")

    @classmethod
    def category(cls) -> "DiscussionCategoryFields":
        return DiscussionCategoryFields("category")

    closed: "DiscussionGraphQLField" = DiscussionGraphQLField("closed")
    closed_at: "DiscussionGraphQLField" = DiscussionGraphQLField("closedAt")

    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DiscussionCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionCommentConnectionFields(
            "comments", arguments=cleared_arguments
        )

    created_at: "DiscussionGraphQLField" = DiscussionGraphQLField("createdAt")
    created_via_email: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "createdViaEmail"
    )
    database_id: "DiscussionGraphQLField" = DiscussionGraphQLField("databaseId")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    id: "DiscussionGraphQLField" = DiscussionGraphQLField("id")
    includes_created_edit: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "includesCreatedEdit"
    )
    is_answered: "DiscussionGraphQLField" = DiscussionGraphQLField("isAnswered")

    @classmethod
    def labels(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[LabelOrder] = None
    ) -> "LabelConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "LabelOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelConnectionFields("labels", arguments=cleared_arguments)

    last_edited_at: "DiscussionGraphQLField" = DiscussionGraphQLField("lastEditedAt")
    locked: "DiscussionGraphQLField" = DiscussionGraphQLField("locked")
    number: "DiscussionGraphQLField" = DiscussionGraphQLField("number")

    @classmethod
    def poll(cls) -> "DiscussionPollFields":
        return DiscussionPollFields("poll")

    published_at: "DiscussionGraphQLField" = DiscussionGraphQLField("publishedAt")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "DiscussionGraphQLField" = DiscussionGraphQLField("resourcePath")
    state_reason: "DiscussionGraphQLField" = DiscussionGraphQLField("stateReason")
    title: "DiscussionGraphQLField" = DiscussionGraphQLField("title")
    updated_at: "DiscussionGraphQLField" = DiscussionGraphQLField("updatedAt")
    upvote_count: "DiscussionGraphQLField" = DiscussionGraphQLField("upvoteCount")
    url: "DiscussionGraphQLField" = DiscussionGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_close: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerCanClose"
    )
    viewer_can_delete: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerCanDelete"
    )
    viewer_can_label: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerCanLabel"
    )
    viewer_can_react: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerCanReact"
    )
    viewer_can_reopen: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerCanReopen"
    )
    viewer_can_subscribe: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerCanSubscribe"
    )
    viewer_can_update: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerCanUpdate"
    )
    viewer_can_upvote: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerCanUpvote"
    )
    viewer_did_author: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerDidAuthor"
    )
    viewer_has_upvoted: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerHasUpvoted"
    )
    viewer_subscription: "DiscussionGraphQLField" = DiscussionGraphQLField(
        "viewerSubscription"
    )

    def fields(
        self,
        *subfields: Union[
            DiscussionGraphQLField,
            "ActorInterface",
            "DiscussionCategoryFields",
            "DiscussionCommentConnectionFields",
            "DiscussionCommentFields",
            "DiscussionPollFields",
            "LabelConnectionFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "RepositoryFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "DiscussionFields":
        """Subfields should come from the DiscussionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionFields":
        self._alias = alias
        return self


class DiscussionCategoryFields(GraphQLField):
    created_at: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField(
        "createdAt"
    )
    description: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField(
        "description"
    )
    emoji: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField("emoji")
    emoji_html: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField(
        "emojiHTML"
    )
    id: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField("id")
    is_answerable: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField(
        "isAnswerable"
    )
    name: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField("name")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    slug: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField("slug")
    updated_at: "DiscussionCategoryGraphQLField" = DiscussionCategoryGraphQLField(
        "updatedAt"
    )

    def fields(
        self, *subfields: Union[DiscussionCategoryGraphQLField, "RepositoryFields"]
    ) -> "DiscussionCategoryFields":
        """Subfields should come from the DiscussionCategoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionCategoryFields":
        self._alias = alias
        return self


class DiscussionCategoryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DiscussionCategoryEdgeFields":
        return DiscussionCategoryEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DiscussionCategoryFields":
        return DiscussionCategoryFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DiscussionCategoryConnectionGraphQLField" = (
        DiscussionCategoryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DiscussionCategoryConnectionGraphQLField,
            "DiscussionCategoryEdgeFields",
            "DiscussionCategoryFields",
            "PageInfoFields",
        ]
    ) -> "DiscussionCategoryConnectionFields":
        """Subfields should come from the DiscussionCategoryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionCategoryConnectionFields":
        self._alias = alias
        return self


class DiscussionCategoryEdgeFields(GraphQLField):
    cursor: "DiscussionCategoryEdgeGraphQLField" = DiscussionCategoryEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "DiscussionCategoryFields":
        return DiscussionCategoryFields("node")

    def fields(
        self,
        *subfields: Union[
            DiscussionCategoryEdgeGraphQLField, "DiscussionCategoryFields"
        ]
    ) -> "DiscussionCategoryEdgeFields":
        """Subfields should come from the DiscussionCategoryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionCategoryEdgeFields":
        self._alias = alias
        return self


class DiscussionCommentFields(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "authorAssociation"
    )
    body: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField("body")
    body_html: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "bodyHTML"
    )
    body_text: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "bodyText"
    )
    created_at: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "createdAt"
    )
    created_via_email: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "createdViaEmail"
    )
    database_id: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "databaseId"
    )
    deleted_at: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "deletedAt"
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    id: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField("id")
    includes_created_edit: "DiscussionCommentGraphQLField" = (
        DiscussionCommentGraphQLField("includesCreatedEdit")
    )
    is_answer: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "isAnswer"
    )
    is_minimized: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "isMinimized"
    )
    last_edited_at: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "lastEditedAt"
    )
    minimized_reason: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "minimizedReason"
    )
    published_at: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "publishedAt"
    )

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def replies(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DiscussionCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionCommentConnectionFields("replies", arguments=cleared_arguments)

    @classmethod
    def reply_to(cls) -> "DiscussionCommentFields":
        return DiscussionCommentFields("reply_to")

    resource_path: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "resourcePath"
    )
    updated_at: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "updatedAt"
    )
    upvote_count: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "upvoteCount"
    )
    url: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_delete: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "viewerCanDelete"
    )
    viewer_can_mark_as_answer: "DiscussionCommentGraphQLField" = (
        DiscussionCommentGraphQLField("viewerCanMarkAsAnswer")
    )
    viewer_can_minimize: "DiscussionCommentGraphQLField" = (
        DiscussionCommentGraphQLField("viewerCanMinimize")
    )
    viewer_can_react: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "viewerCanReact"
    )
    viewer_can_unmark_as_answer: "DiscussionCommentGraphQLField" = (
        DiscussionCommentGraphQLField("viewerCanUnmarkAsAnswer")
    )
    viewer_can_update: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "viewerCanUpdate"
    )
    viewer_can_upvote: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "viewerCanUpvote"
    )
    viewer_cannot_update_reasons: "DiscussionCommentGraphQLField" = (
        DiscussionCommentGraphQLField("viewerCannotUpdateReasons")
    )
    viewer_did_author: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "viewerDidAuthor"
    )
    viewer_has_upvoted: "DiscussionCommentGraphQLField" = DiscussionCommentGraphQLField(
        "viewerHasUpvoted"
    )

    def fields(
        self,
        *subfields: Union[
            DiscussionCommentGraphQLField,
            "ActorInterface",
            "DiscussionCommentConnectionFields",
            "DiscussionCommentFields",
            "DiscussionFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "DiscussionCommentFields":
        """Subfields should come from the DiscussionCommentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionCommentFields":
        self._alias = alias
        return self


class DiscussionCommentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DiscussionCommentEdgeFields":
        return DiscussionCommentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DiscussionCommentFields":
        return DiscussionCommentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DiscussionCommentConnectionGraphQLField" = (
        DiscussionCommentConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DiscussionCommentConnectionGraphQLField,
            "DiscussionCommentEdgeFields",
            "DiscussionCommentFields",
            "PageInfoFields",
        ]
    ) -> "DiscussionCommentConnectionFields":
        """Subfields should come from the DiscussionCommentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionCommentConnectionFields":
        self._alias = alias
        return self


class DiscussionCommentEdgeFields(GraphQLField):
    cursor: "DiscussionCommentEdgeGraphQLField" = DiscussionCommentEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "DiscussionCommentFields":
        return DiscussionCommentFields("node")

    def fields(
        self,
        *subfields: Union[DiscussionCommentEdgeGraphQLField, "DiscussionCommentFields"]
    ) -> "DiscussionCommentEdgeFields":
        """Subfields should come from the DiscussionCommentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionCommentEdgeFields":
        self._alias = alias
        return self


class DiscussionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DiscussionEdgeFields":
        return DiscussionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DiscussionFields":
        return DiscussionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DiscussionConnectionGraphQLField" = DiscussionConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            DiscussionConnectionGraphQLField,
            "DiscussionEdgeFields",
            "DiscussionFields",
            "PageInfoFields",
        ]
    ) -> "DiscussionConnectionFields":
        """Subfields should come from the DiscussionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionConnectionFields":
        self._alias = alias
        return self


class DiscussionEdgeFields(GraphQLField):
    cursor: "DiscussionEdgeGraphQLField" = DiscussionEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "DiscussionFields":
        return DiscussionFields("node")

    def fields(
        self, *subfields: Union[DiscussionEdgeGraphQLField, "DiscussionFields"]
    ) -> "DiscussionEdgeFields":
        """Subfields should come from the DiscussionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionEdgeFields":
        self._alias = alias
        return self


class DiscussionPollFields(GraphQLField):
    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    id: "DiscussionPollGraphQLField" = DiscussionPollGraphQLField("id")

    @classmethod
    def options(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[DiscussionPollOptionOrder] = None
    ) -> "DiscussionPollOptionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "DiscussionPollOptionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionPollOptionConnectionFields(
            "options", arguments=cleared_arguments
        )

    question: "DiscussionPollGraphQLField" = DiscussionPollGraphQLField("question")
    total_vote_count: "DiscussionPollGraphQLField" = DiscussionPollGraphQLField(
        "totalVoteCount"
    )
    viewer_can_vote: "DiscussionPollGraphQLField" = DiscussionPollGraphQLField(
        "viewerCanVote"
    )
    viewer_has_voted: "DiscussionPollGraphQLField" = DiscussionPollGraphQLField(
        "viewerHasVoted"
    )

    def fields(
        self,
        *subfields: Union[
            DiscussionPollGraphQLField,
            "DiscussionFields",
            "DiscussionPollOptionConnectionFields",
        ]
    ) -> "DiscussionPollFields":
        """Subfields should come from the DiscussionPollFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionPollFields":
        self._alias = alias
        return self


class DiscussionPollOptionFields(GraphQLField):
    id: "DiscussionPollOptionGraphQLField" = DiscussionPollOptionGraphQLField("id")
    option: "DiscussionPollOptionGraphQLField" = DiscussionPollOptionGraphQLField(
        "option"
    )

    @classmethod
    def poll(cls) -> "DiscussionPollFields":
        return DiscussionPollFields("poll")

    total_vote_count: "DiscussionPollOptionGraphQLField" = (
        DiscussionPollOptionGraphQLField("totalVoteCount")
    )
    viewer_has_voted: "DiscussionPollOptionGraphQLField" = (
        DiscussionPollOptionGraphQLField("viewerHasVoted")
    )

    def fields(
        self,
        *subfields: Union[DiscussionPollOptionGraphQLField, "DiscussionPollFields"]
    ) -> "DiscussionPollOptionFields":
        """Subfields should come from the DiscussionPollOptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionPollOptionFields":
        self._alias = alias
        return self


class DiscussionPollOptionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "DiscussionPollOptionEdgeFields":
        return DiscussionPollOptionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "DiscussionPollOptionFields":
        return DiscussionPollOptionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DiscussionPollOptionConnectionGraphQLField" = (
        DiscussionPollOptionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DiscussionPollOptionConnectionGraphQLField,
            "DiscussionPollOptionEdgeFields",
            "DiscussionPollOptionFields",
            "PageInfoFields",
        ]
    ) -> "DiscussionPollOptionConnectionFields":
        """Subfields should come from the DiscussionPollOptionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionPollOptionConnectionFields":
        self._alias = alias
        return self


class DiscussionPollOptionEdgeFields(GraphQLField):
    cursor: "DiscussionPollOptionEdgeGraphQLField" = (
        DiscussionPollOptionEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "DiscussionPollOptionFields":
        return DiscussionPollOptionFields("node")

    def fields(
        self,
        *subfields: Union[
            DiscussionPollOptionEdgeGraphQLField, "DiscussionPollOptionFields"
        ]
    ) -> "DiscussionPollOptionEdgeFields":
        """Subfields should come from the DiscussionPollOptionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscussionPollOptionEdgeFields":
        self._alias = alias
        return self


class DismissPullRequestReviewPayloadFields(GraphQLField):
    client_mutation_id: "DismissPullRequestReviewPayloadGraphQLField" = (
        DismissPullRequestReviewPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("pull_request_review")

    def fields(
        self,
        *subfields: Union[
            DismissPullRequestReviewPayloadGraphQLField, "PullRequestReviewFields"
        ]
    ) -> "DismissPullRequestReviewPayloadFields":
        """Subfields should come from the DismissPullRequestReviewPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DismissPullRequestReviewPayloadFields":
        self._alias = alias
        return self


class DismissRepositoryVulnerabilityAlertPayloadFields(GraphQLField):
    client_mutation_id: "DismissRepositoryVulnerabilityAlertPayloadGraphQLField" = (
        DismissRepositoryVulnerabilityAlertPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository_vulnerability_alert(cls) -> "RepositoryVulnerabilityAlertFields":
        return RepositoryVulnerabilityAlertFields("repository_vulnerability_alert")

    def fields(
        self,
        *subfields: Union[
            DismissRepositoryVulnerabilityAlertPayloadGraphQLField,
            "RepositoryVulnerabilityAlertFields",
        ]
    ) -> "DismissRepositoryVulnerabilityAlertPayloadFields":
        """Subfields should come from the DismissRepositoryVulnerabilityAlertPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DismissRepositoryVulnerabilityAlertPayloadFields":
        self._alias = alias
        return self


class DraftIssueFields(GraphQLField):
    @classmethod
    def assignees(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("assignees", arguments=cleared_arguments)

    body: "DraftIssueGraphQLField" = DraftIssueGraphQLField("body")
    body_html: "DraftIssueGraphQLField" = DraftIssueGraphQLField("bodyHTML")
    body_text: "DraftIssueGraphQLField" = DraftIssueGraphQLField("bodyText")
    created_at: "DraftIssueGraphQLField" = DraftIssueGraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    id: "DraftIssueGraphQLField" = DraftIssueGraphQLField("id")

    @classmethod
    def project_v_2_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ItemConnectionFields(
            "project_v_2_items", arguments=cleared_arguments
        )

    @classmethod
    def projects_v_2(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("projects_v_2", arguments=cleared_arguments)

    title: "DraftIssueGraphQLField" = DraftIssueGraphQLField("title")
    updated_at: "DraftIssueGraphQLField" = DraftIssueGraphQLField("updatedAt")

    def fields(
        self,
        *subfields: Union[
            DraftIssueGraphQLField,
            "ActorInterface",
            "ProjectV2ConnectionFields",
            "ProjectV2ItemConnectionFields",
            "UserConnectionFields",
        ]
    ) -> "DraftIssueFields":
        """Subfields should come from the DraftIssueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DraftIssueFields":
        self._alias = alias
        return self


class EPSSFields(GraphQLField):
    percentage: "EPSSGraphQLField" = EPSSGraphQLField("percentage")
    percentile: "EPSSGraphQLField" = EPSSGraphQLField("percentile")

    def fields(self, *subfields: EPSSGraphQLField) -> "EPSSFields":
        """Subfields should come from the EPSSFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EPSSFields":
        self._alias = alias
        return self


class EnablePullRequestAutoMergePayloadFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    client_mutation_id: "EnablePullRequestAutoMergePayloadGraphQLField" = (
        EnablePullRequestAutoMergePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            EnablePullRequestAutoMergePayloadGraphQLField,
            "ActorInterface",
            "PullRequestFields",
        ]
    ) -> "EnablePullRequestAutoMergePayloadFields":
        """Subfields should come from the EnablePullRequestAutoMergePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnablePullRequestAutoMergePayloadFields":
        self._alias = alias
        return self


class EnqueuePullRequestPayloadFields(GraphQLField):
    client_mutation_id: "EnqueuePullRequestPayloadGraphQLField" = (
        EnqueuePullRequestPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def merge_queue_entry(cls) -> "MergeQueueEntryFields":
        return MergeQueueEntryFields("merge_queue_entry")

    def fields(
        self,
        *subfields: Union[
            EnqueuePullRequestPayloadGraphQLField, "MergeQueueEntryFields"
        ]
    ) -> "EnqueuePullRequestPayloadFields":
        """Subfields should come from the EnqueuePullRequestPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnqueuePullRequestPayloadFields":
        self._alias = alias
        return self


class EnterpriseFields(GraphQLField):
    @classmethod
    def announcement_banner(cls) -> "AnnouncementBannerFields":
        return AnnouncementBannerFields("announcement_banner")

    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "EnterpriseGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseGraphQLField("avatar_url", arguments=cleared_arguments)

    billing_email: "EnterpriseGraphQLField" = EnterpriseGraphQLField("billingEmail")

    @classmethod
    def billing_info(cls) -> "EnterpriseBillingInfoFields":
        return EnterpriseBillingInfoFields("billing_info")

    created_at: "EnterpriseGraphQLField" = EnterpriseGraphQLField("createdAt")
    database_id: "EnterpriseGraphQLField" = EnterpriseGraphQLField("databaseId")
    description: "EnterpriseGraphQLField" = EnterpriseGraphQLField("description")
    description_html: "EnterpriseGraphQLField" = EnterpriseGraphQLField(
        "descriptionHTML"
    )
    id: "EnterpriseGraphQLField" = EnterpriseGraphQLField("id")
    location: "EnterpriseGraphQLField" = EnterpriseGraphQLField("location")

    @classmethod
    def members(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        deployment: Optional[EnterpriseUserDeployment] = None,
        first: Optional[int] = None,
        has_two_factor_enabled: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseMemberOrder] = None,
        organization_logins: Optional[str] = None,
        query: Optional[str] = None,
        role: Optional[EnterpriseUserAccountMembershipRole] = None,
        two_factor_method_security: Optional[TwoFactorCredentialSecurityType] = None
    ) -> "EnterpriseMemberConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "deployment": {"type": "EnterpriseUserDeployment", "value": deployment},
            "first": {"type": "Int", "value": first},
            "hasTwoFactorEnabled": {"type": "Boolean", "value": has_two_factor_enabled},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "EnterpriseMemberOrder", "value": order_by},
            "organizationLogins": {"type": "String", "value": organization_logins},
            "query": {"type": "String", "value": query},
            "role": {"type": "EnterpriseUserAccountMembershipRole", "value": role},
            "twoFactorMethodSecurity": {
                "type": "TwoFactorCredentialSecurityType",
                "value": two_factor_method_security,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseMemberConnectionFields("members", arguments=cleared_arguments)

    name: "EnterpriseGraphQLField" = EnterpriseGraphQLField("name")

    @classmethod
    def organizations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None,
        query: Optional[str] = None,
        viewer_organization_role: Optional[RoleInOrganization] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "query": {"type": "String", "value": query},
            "viewerOrganizationRole": {
                "type": "RoleInOrganization",
                "value": viewer_organization_role,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "organizations", arguments=cleared_arguments
        )

    @classmethod
    def owner_info(cls) -> "EnterpriseOwnerInfoFields":
        return EnterpriseOwnerInfoFields("owner_info")

    readme: "EnterpriseGraphQLField" = EnterpriseGraphQLField("readme")
    readme_html: "EnterpriseGraphQLField" = EnterpriseGraphQLField("readmeHTML")
    resource_path: "EnterpriseGraphQLField" = EnterpriseGraphQLField("resourcePath")

    @classmethod
    def ruleset(cls, database_id: int) -> "RepositoryRulesetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "databaseId": {"type": "Int!", "value": database_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRulesetFields("ruleset", arguments=cleared_arguments)

    @classmethod
    def rulesets(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "RepositoryRulesetConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRulesetConnectionFields(
            "rulesets", arguments=cleared_arguments
        )

    slug: "EnterpriseGraphQLField" = EnterpriseGraphQLField("slug")
    updated_at: "EnterpriseGraphQLField" = EnterpriseGraphQLField("updatedAt")
    url: "EnterpriseGraphQLField" = EnterpriseGraphQLField("url")

    @classmethod
    def user_namespace_repositories(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None,
        query: Optional[str] = None
    ) -> "UserNamespaceRepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserNamespaceRepositoryConnectionFields(
            "user_namespace_repositories", arguments=cleared_arguments
        )

    viewer_is_admin: "EnterpriseGraphQLField" = EnterpriseGraphQLField("viewerIsAdmin")
    website_url: "EnterpriseGraphQLField" = EnterpriseGraphQLField("websiteUrl")

    def fields(
        self,
        *subfields: Union[
            EnterpriseGraphQLField,
            "AnnouncementBannerFields",
            "EnterpriseBillingInfoFields",
            "EnterpriseMemberConnectionFields",
            "EnterpriseOwnerInfoFields",
            "OrganizationConnectionFields",
            "RepositoryRulesetConnectionFields",
            "RepositoryRulesetFields",
            "UserNamespaceRepositoryConnectionFields",
        ]
    ) -> "EnterpriseFields":
        """Subfields should come from the EnterpriseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseFields":
        self._alias = alias
        return self


class EnterpriseAdministratorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseAdministratorEdgeFields":
        return EnterpriseAdministratorEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseAdministratorConnectionGraphQLField" = (
        EnterpriseAdministratorConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseAdministratorConnectionGraphQLField,
            "EnterpriseAdministratorEdgeFields",
            "PageInfoFields",
            "UserFields",
        ]
    ) -> "EnterpriseAdministratorConnectionFields":
        """Subfields should come from the EnterpriseAdministratorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseAdministratorConnectionFields":
        self._alias = alias
        return self


class EnterpriseAdministratorEdgeFields(GraphQLField):
    cursor: "EnterpriseAdministratorEdgeGraphQLField" = (
        EnterpriseAdministratorEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    role: "EnterpriseAdministratorEdgeGraphQLField" = (
        EnterpriseAdministratorEdgeGraphQLField("role")
    )

    def fields(
        self, *subfields: Union[EnterpriseAdministratorEdgeGraphQLField, "UserFields"]
    ) -> "EnterpriseAdministratorEdgeFields":
        """Subfields should come from the EnterpriseAdministratorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseAdministratorEdgeFields":
        self._alias = alias
        return self


class EnterpriseAdministratorInvitationFields(GraphQLField):
    created_at: "EnterpriseAdministratorInvitationGraphQLField" = (
        EnterpriseAdministratorInvitationGraphQLField("createdAt")
    )
    email: "EnterpriseAdministratorInvitationGraphQLField" = (
        EnterpriseAdministratorInvitationGraphQLField("email")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    id: "EnterpriseAdministratorInvitationGraphQLField" = (
        EnterpriseAdministratorInvitationGraphQLField("id")
    )

    @classmethod
    def invitee(cls) -> "UserFields":
        return UserFields("invitee")

    @classmethod
    def inviter(cls) -> "UserFields":
        return UserFields("inviter")

    role: "EnterpriseAdministratorInvitationGraphQLField" = (
        EnterpriseAdministratorInvitationGraphQLField("role")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseAdministratorInvitationGraphQLField,
            "EnterpriseFields",
            "UserFields",
        ]
    ) -> "EnterpriseAdministratorInvitationFields":
        """Subfields should come from the EnterpriseAdministratorInvitationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseAdministratorInvitationFields":
        self._alias = alias
        return self


class EnterpriseAdministratorInvitationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseAdministratorInvitationEdgeFields":
        return EnterpriseAdministratorInvitationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseAdministratorInvitationFields":
        return EnterpriseAdministratorInvitationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseAdministratorInvitationConnectionGraphQLField" = (
        EnterpriseAdministratorInvitationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseAdministratorInvitationConnectionGraphQLField,
            "EnterpriseAdministratorInvitationEdgeFields",
            "EnterpriseAdministratorInvitationFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseAdministratorInvitationConnectionFields":
        """Subfields should come from the EnterpriseAdministratorInvitationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseAdministratorInvitationConnectionFields":
        self._alias = alias
        return self


class EnterpriseAdministratorInvitationEdgeFields(GraphQLField):
    cursor: "EnterpriseAdministratorInvitationEdgeGraphQLField" = (
        EnterpriseAdministratorInvitationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "EnterpriseAdministratorInvitationFields":
        return EnterpriseAdministratorInvitationFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterpriseAdministratorInvitationEdgeGraphQLField,
            "EnterpriseAdministratorInvitationFields",
        ]
    ) -> "EnterpriseAdministratorInvitationEdgeFields":
        """Subfields should come from the EnterpriseAdministratorInvitationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseAdministratorInvitationEdgeFields":
        self._alias = alias
        return self


class EnterpriseAuditEntryDataInterface(GraphQLField):
    enterprise_resource_path: "EnterpriseAuditEntryDataGraphQLField" = (
        EnterpriseAuditEntryDataGraphQLField("enterpriseResourcePath")
    )
    enterprise_slug: "EnterpriseAuditEntryDataGraphQLField" = (
        EnterpriseAuditEntryDataGraphQLField("enterpriseSlug")
    )
    enterprise_url: "EnterpriseAuditEntryDataGraphQLField" = (
        EnterpriseAuditEntryDataGraphQLField("enterpriseUrl")
    )

    def fields(
        self, *subfields: EnterpriseAuditEntryDataGraphQLField
    ) -> "EnterpriseAuditEntryDataInterface":
        """Subfields should come from the EnterpriseAuditEntryDataInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseAuditEntryDataInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "EnterpriseAuditEntryDataInterface":
        self._inline_fragments[type_name] = subfields
        return self


class EnterpriseBillingInfoFields(GraphQLField):
    all_licensable_users_count: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("allLicensableUsersCount")
    )
    asset_packs: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("assetPacks")
    )
    bandwidth_quota: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("bandwidthQuota")
    )
    bandwidth_usage: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("bandwidthUsage")
    )
    bandwidth_usage_percentage: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("bandwidthUsagePercentage")
    )
    storage_quota: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("storageQuota")
    )
    storage_usage: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("storageUsage")
    )
    storage_usage_percentage: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("storageUsagePercentage")
    )
    total_available_licenses: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("totalAvailableLicenses")
    )
    total_licenses: "EnterpriseBillingInfoGraphQLField" = (
        EnterpriseBillingInfoGraphQLField("totalLicenses")
    )

    def fields(
        self, *subfields: EnterpriseBillingInfoGraphQLField
    ) -> "EnterpriseBillingInfoFields":
        """Subfields should come from the EnterpriseBillingInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseBillingInfoFields":
        self._alias = alias
        return self


class EnterpriseConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseEdgeFields":
        return EnterpriseEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseFields":
        return EnterpriseFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseConnectionGraphQLField" = EnterpriseConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseConnectionGraphQLField,
            "EnterpriseEdgeFields",
            "EnterpriseFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseConnectionFields":
        """Subfields should come from the EnterpriseConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseConnectionFields":
        self._alias = alias
        return self


class EnterpriseEdgeFields(GraphQLField):
    cursor: "EnterpriseEdgeGraphQLField" = EnterpriseEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "EnterpriseFields":
        return EnterpriseFields("node")

    def fields(
        self, *subfields: Union[EnterpriseEdgeGraphQLField, "EnterpriseFields"]
    ) -> "EnterpriseEdgeFields":
        """Subfields should come from the EnterpriseEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseEdgeFields":
        self._alias = alias
        return self


class EnterpriseFailedInvitationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseFailedInvitationEdgeFields":
        return EnterpriseFailedInvitationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "OrganizationInvitationFields":
        return OrganizationInvitationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseFailedInvitationConnectionGraphQLField" = (
        EnterpriseFailedInvitationConnectionGraphQLField("totalCount")
    )
    total_unique_user_count: "EnterpriseFailedInvitationConnectionGraphQLField" = (
        EnterpriseFailedInvitationConnectionGraphQLField("totalUniqueUserCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseFailedInvitationConnectionGraphQLField,
            "EnterpriseFailedInvitationEdgeFields",
            "OrganizationInvitationFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseFailedInvitationConnectionFields":
        """Subfields should come from the EnterpriseFailedInvitationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseFailedInvitationConnectionFields":
        self._alias = alias
        return self


class EnterpriseFailedInvitationEdgeFields(GraphQLField):
    cursor: "EnterpriseFailedInvitationEdgeGraphQLField" = (
        EnterpriseFailedInvitationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "OrganizationInvitationFields":
        return OrganizationInvitationFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterpriseFailedInvitationEdgeGraphQLField, "OrganizationInvitationFields"
        ]
    ) -> "EnterpriseFailedInvitationEdgeFields":
        """Subfields should come from the EnterpriseFailedInvitationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseFailedInvitationEdgeFields":
        self._alias = alias
        return self


class EnterpriseIdentityProviderFields(GraphQLField):
    digest_method: "EnterpriseIdentityProviderGraphQLField" = (
        EnterpriseIdentityProviderGraphQLField("digestMethod")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    @classmethod
    def external_identities(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        login: Optional[str] = None,
        members_only: Optional[bool] = None,
        user_name: Optional[str] = None
    ) -> "ExternalIdentityConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "login": {"type": "String", "value": login},
            "membersOnly": {"type": "Boolean", "value": members_only},
            "userName": {"type": "String", "value": user_name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExternalIdentityConnectionFields(
            "external_identities", arguments=cleared_arguments
        )

    id: "EnterpriseIdentityProviderGraphQLField" = (
        EnterpriseIdentityProviderGraphQLField("id")
    )
    idp_certificate: "EnterpriseIdentityProviderGraphQLField" = (
        EnterpriseIdentityProviderGraphQLField("idpCertificate")
    )
    issuer: "EnterpriseIdentityProviderGraphQLField" = (
        EnterpriseIdentityProviderGraphQLField("issuer")
    )
    recovery_codes: "EnterpriseIdentityProviderGraphQLField" = (
        EnterpriseIdentityProviderGraphQLField("recoveryCodes")
    )
    signature_method: "EnterpriseIdentityProviderGraphQLField" = (
        EnterpriseIdentityProviderGraphQLField("signatureMethod")
    )
    sso_url: "EnterpriseIdentityProviderGraphQLField" = (
        EnterpriseIdentityProviderGraphQLField("ssoUrl")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseIdentityProviderGraphQLField,
            "EnterpriseFields",
            "ExternalIdentityConnectionFields",
        ]
    ) -> "EnterpriseIdentityProviderFields":
        """Subfields should come from the EnterpriseIdentityProviderFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseIdentityProviderFields":
        self._alias = alias
        return self


class EnterpriseMemberConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseMemberEdgeFields":
        return EnterpriseMemberEdgeFields("edges")

    nodes: "EnterpriseMemberUnion" = EnterpriseMemberUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseMemberConnectionGraphQLField" = (
        EnterpriseMemberConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseMemberConnectionGraphQLField,
            "EnterpriseMemberEdgeFields",
            "EnterpriseMemberUnion",
            "PageInfoFields",
        ]
    ) -> "EnterpriseMemberConnectionFields":
        """Subfields should come from the EnterpriseMemberConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseMemberConnectionFields":
        self._alias = alias
        return self


class EnterpriseMemberEdgeFields(GraphQLField):
    cursor: "EnterpriseMemberEdgeGraphQLField" = EnterpriseMemberEdgeGraphQLField(
        "cursor"
    )
    node: "EnterpriseMemberUnion" = EnterpriseMemberUnion("node")

    def fields(
        self,
        *subfields: Union[EnterpriseMemberEdgeGraphQLField, "EnterpriseMemberUnion"]
    ) -> "EnterpriseMemberEdgeFields":
        """Subfields should come from the EnterpriseMemberEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseMemberEdgeFields":
        self._alias = alias
        return self


class EnterpriseMemberInvitationFields(GraphQLField):
    created_at: "EnterpriseMemberInvitationGraphQLField" = (
        EnterpriseMemberInvitationGraphQLField("createdAt")
    )
    email: "EnterpriseMemberInvitationGraphQLField" = (
        EnterpriseMemberInvitationGraphQLField("email")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    id: "EnterpriseMemberInvitationGraphQLField" = (
        EnterpriseMemberInvitationGraphQLField("id")
    )

    @classmethod
    def invitee(cls) -> "UserFields":
        return UserFields("invitee")

    @classmethod
    def inviter(cls) -> "UserFields":
        return UserFields("inviter")

    def fields(
        self,
        *subfields: Union[
            EnterpriseMemberInvitationGraphQLField, "EnterpriseFields", "UserFields"
        ]
    ) -> "EnterpriseMemberInvitationFields":
        """Subfields should come from the EnterpriseMemberInvitationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseMemberInvitationFields":
        self._alias = alias
        return self


class EnterpriseMemberInvitationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseMemberInvitationEdgeFields":
        return EnterpriseMemberInvitationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseMemberInvitationFields":
        return EnterpriseMemberInvitationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseMemberInvitationConnectionGraphQLField" = (
        EnterpriseMemberInvitationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseMemberInvitationConnectionGraphQLField,
            "EnterpriseMemberInvitationEdgeFields",
            "EnterpriseMemberInvitationFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseMemberInvitationConnectionFields":
        """Subfields should come from the EnterpriseMemberInvitationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseMemberInvitationConnectionFields":
        self._alias = alias
        return self


class EnterpriseMemberInvitationEdgeFields(GraphQLField):
    cursor: "EnterpriseMemberInvitationEdgeGraphQLField" = (
        EnterpriseMemberInvitationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "EnterpriseMemberInvitationFields":
        return EnterpriseMemberInvitationFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterpriseMemberInvitationEdgeGraphQLField,
            "EnterpriseMemberInvitationFields",
        ]
    ) -> "EnterpriseMemberInvitationEdgeFields":
        """Subfields should come from the EnterpriseMemberInvitationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseMemberInvitationEdgeFields":
        self._alias = alias
        return self


class EnterpriseOrganizationMembershipConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseOrganizationMembershipEdgeFields":
        return EnterpriseOrganizationMembershipEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "OrganizationFields":
        return OrganizationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseOrganizationMembershipConnectionGraphQLField" = (
        EnterpriseOrganizationMembershipConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseOrganizationMembershipConnectionGraphQLField,
            "EnterpriseOrganizationMembershipEdgeFields",
            "OrganizationFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseOrganizationMembershipConnectionFields":
        """Subfields should come from the EnterpriseOrganizationMembershipConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseOrganizationMembershipConnectionFields":
        self._alias = alias
        return self


class EnterpriseOrganizationMembershipEdgeFields(GraphQLField):
    cursor: "EnterpriseOrganizationMembershipEdgeGraphQLField" = (
        EnterpriseOrganizationMembershipEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "OrganizationFields":
        return OrganizationFields("node")

    role: "EnterpriseOrganizationMembershipEdgeGraphQLField" = (
        EnterpriseOrganizationMembershipEdgeGraphQLField("role")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseOrganizationMembershipEdgeGraphQLField, "OrganizationFields"
        ]
    ) -> "EnterpriseOrganizationMembershipEdgeFields":
        """Subfields should come from the EnterpriseOrganizationMembershipEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseOrganizationMembershipEdgeFields":
        self._alias = alias
        return self


class EnterpriseOutsideCollaboratorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseOutsideCollaboratorEdgeFields":
        return EnterpriseOutsideCollaboratorEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseOutsideCollaboratorConnectionGraphQLField" = (
        EnterpriseOutsideCollaboratorConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseOutsideCollaboratorConnectionGraphQLField,
            "EnterpriseOutsideCollaboratorEdgeFields",
            "PageInfoFields",
            "UserFields",
        ]
    ) -> "EnterpriseOutsideCollaboratorConnectionFields":
        """Subfields should come from the EnterpriseOutsideCollaboratorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseOutsideCollaboratorConnectionFields":
        self._alias = alias
        return self


class EnterpriseOutsideCollaboratorEdgeFields(GraphQLField):
    cursor: "EnterpriseOutsideCollaboratorEdgeGraphQLField" = (
        EnterpriseOutsideCollaboratorEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    @classmethod
    def repositories(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None
    ) -> "EnterpriseRepositoryInfoConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseRepositoryInfoConnectionFields(
            "repositories", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            EnterpriseOutsideCollaboratorEdgeGraphQLField,
            "EnterpriseRepositoryInfoConnectionFields",
            "UserFields",
        ]
    ) -> "EnterpriseOutsideCollaboratorEdgeFields":
        """Subfields should come from the EnterpriseOutsideCollaboratorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseOutsideCollaboratorEdgeFields":
        self._alias = alias
        return self


class EnterpriseOwnerInfoFields(GraphQLField):
    @classmethod
    def admins(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        has_two_factor_enabled: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseMemberOrder] = None,
        organization_logins: Optional[str] = None,
        query: Optional[str] = None,
        role: Optional[EnterpriseAdministratorRole] = None,
        two_factor_method_security: Optional[TwoFactorCredentialSecurityType] = None
    ) -> "EnterpriseAdministratorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "hasTwoFactorEnabled": {"type": "Boolean", "value": has_two_factor_enabled},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "EnterpriseMemberOrder", "value": order_by},
            "organizationLogins": {"type": "String", "value": organization_logins},
            "query": {"type": "String", "value": query},
            "role": {"type": "EnterpriseAdministratorRole", "value": role},
            "twoFactorMethodSecurity": {
                "type": "TwoFactorCredentialSecurityType",
                "value": two_factor_method_security,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseAdministratorConnectionFields(
            "admins", arguments=cleared_arguments
        )

    @classmethod
    def affiliated_users_with_two_factor_disabled(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields(
            "affiliated_users_with_two_factor_disabled", arguments=cleared_arguments
        )

    affiliated_users_with_two_factor_disabled_exist: (
        "EnterpriseOwnerInfoGraphQLField"
    ) = EnterpriseOwnerInfoGraphQLField("affiliatedUsersWithTwoFactorDisabledExist")
    allow_private_repository_forking_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("allowPrivateRepositoryForkingSetting")
    )

    @classmethod
    def allow_private_repository_forking_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "allow_private_repository_forking_setting_organizations",
            arguments=cleared_arguments,
        )

    allow_private_repository_forking_setting_policy_value: (
        "EnterpriseOwnerInfoGraphQLField"
    ) = EnterpriseOwnerInfoGraphQLField(
        "allowPrivateRepositoryForkingSettingPolicyValue"
    )
    default_repository_permission_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("defaultRepositoryPermissionSetting")
    )

    @classmethod
    def default_repository_permission_setting_organizations(
        cls,
        value: DefaultRepositoryPermissionField,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "DefaultRepositoryPermissionField!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "default_repository_permission_setting_organizations",
            arguments=cleared_arguments,
        )

    @classmethod
    def domains(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        is_approved: Optional[bool] = None,
        is_verified: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[VerifiableDomainOrder] = None
    ) -> "VerifiableDomainConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "isApproved": {"type": "Boolean", "value": is_approved},
            "isVerified": {"type": "Boolean", "value": is_verified},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "VerifiableDomainOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VerifiableDomainConnectionFields("domains", arguments=cleared_arguments)

    @classmethod
    def enterprise_server_installations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        connected_only: Optional[bool] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseServerInstallationOrder] = None
    ) -> "EnterpriseServerInstallationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "connectedOnly": {"type": "Boolean", "value": connected_only},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "EnterpriseServerInstallationOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseServerInstallationConnectionFields(
            "enterprise_server_installations", arguments=cleared_arguments
        )

    @classmethod
    def failed_invitations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        query: Optional[str] = None
    ) -> "EnterpriseFailedInvitationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseFailedInvitationConnectionFields(
            "failed_invitations", arguments=cleared_arguments
        )

    ip_allow_list_enabled_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("ipAllowListEnabledSetting")
    )

    @classmethod
    def ip_allow_list_entries(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IpAllowListEntryOrder] = None
    ) -> "IpAllowListEntryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IpAllowListEntryOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IpAllowListEntryConnectionFields(
            "ip_allow_list_entries", arguments=cleared_arguments
        )

    ip_allow_list_for_installed_apps_enabled_setting: (
        "EnterpriseOwnerInfoGraphQLField"
    ) = EnterpriseOwnerInfoGraphQLField("ipAllowListForInstalledAppsEnabledSetting")
    is_updating_default_repository_permission: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("isUpdatingDefaultRepositoryPermission")
    )
    is_updating_two_factor_requirement: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("isUpdatingTwoFactorRequirement")
    )
    members_can_change_repository_visibility_setting: (
        "EnterpriseOwnerInfoGraphQLField"
    ) = EnterpriseOwnerInfoGraphQLField("membersCanChangeRepositoryVisibilitySetting")

    @classmethod
    def members_can_change_repository_visibility_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "members_can_change_repository_visibility_setting_organizations",
            arguments=cleared_arguments,
        )

    members_can_create_internal_repositories_setting: (
        "EnterpriseOwnerInfoGraphQLField"
    ) = EnterpriseOwnerInfoGraphQLField("membersCanCreateInternalRepositoriesSetting")
    members_can_create_private_repositories_setting: (
        "EnterpriseOwnerInfoGraphQLField"
    ) = EnterpriseOwnerInfoGraphQLField("membersCanCreatePrivateRepositoriesSetting")
    members_can_create_public_repositories_setting: (
        "EnterpriseOwnerInfoGraphQLField"
    ) = EnterpriseOwnerInfoGraphQLField("membersCanCreatePublicRepositoriesSetting")
    members_can_create_repositories_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("membersCanCreateRepositoriesSetting")
    )

    @classmethod
    def members_can_create_repositories_setting_organizations(
        cls,
        value: OrganizationMembersCanCreateRepositoriesSettingValue,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {
                "type": "OrganizationMembersCanCreateRepositoriesSettingValue!",
                "value": value,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "members_can_create_repositories_setting_organizations",
            arguments=cleared_arguments,
        )

    members_can_delete_issues_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("membersCanDeleteIssuesSetting")
    )

    @classmethod
    def members_can_delete_issues_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "members_can_delete_issues_setting_organizations",
            arguments=cleared_arguments,
        )

    members_can_delete_repositories_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("membersCanDeleteRepositoriesSetting")
    )

    @classmethod
    def members_can_delete_repositories_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "members_can_delete_repositories_setting_organizations",
            arguments=cleared_arguments,
        )

    members_can_invite_collaborators_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("membersCanInviteCollaboratorsSetting")
    )

    @classmethod
    def members_can_invite_collaborators_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "members_can_invite_collaborators_setting_organizations",
            arguments=cleared_arguments,
        )

    members_can_make_purchases_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("membersCanMakePurchasesSetting")
    )
    members_can_update_protected_branches_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("membersCanUpdateProtectedBranchesSetting")
    )

    @classmethod
    def members_can_update_protected_branches_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "members_can_update_protected_branches_setting_organizations",
            arguments=cleared_arguments,
        )

    members_can_view_dependency_insights_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("membersCanViewDependencyInsightsSetting")
    )

    @classmethod
    def members_can_view_dependency_insights_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "members_can_view_dependency_insights_setting_organizations",
            arguments=cleared_arguments,
        )

    notification_delivery_restriction_enabled_setting: (
        "EnterpriseOwnerInfoGraphQLField"
    ) = EnterpriseOwnerInfoGraphQLField("notificationDeliveryRestrictionEnabledSetting")

    @classmethod
    def oidc_provider(cls) -> "OIDCProviderFields":
        return OIDCProviderFields("oidc_provider")

    organization_projects_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("organizationProjectsSetting")
    )

    @classmethod
    def organization_projects_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "organization_projects_setting_organizations", arguments=cleared_arguments
        )

    @classmethod
    def outside_collaborators(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        has_two_factor_enabled: Optional[bool] = None,
        last: Optional[int] = None,
        login: Optional[str] = None,
        order_by: Optional[EnterpriseMemberOrder] = None,
        organization_logins: Optional[str] = None,
        query: Optional[str] = None,
        two_factor_method_security: Optional[TwoFactorCredentialSecurityType] = None,
        visibility: Optional[RepositoryVisibility] = None
    ) -> "EnterpriseOutsideCollaboratorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "hasTwoFactorEnabled": {"type": "Boolean", "value": has_two_factor_enabled},
            "last": {"type": "Int", "value": last},
            "login": {"type": "String", "value": login},
            "orderBy": {"type": "EnterpriseMemberOrder", "value": order_by},
            "organizationLogins": {"type": "String", "value": organization_logins},
            "query": {"type": "String", "value": query},
            "twoFactorMethodSecurity": {
                "type": "TwoFactorCredentialSecurityType",
                "value": two_factor_method_security,
            },
            "visibility": {"type": "RepositoryVisibility", "value": visibility},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseOutsideCollaboratorConnectionFields(
            "outside_collaborators", arguments=cleared_arguments
        )

    @classmethod
    def pending_admin_invitations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseAdministratorInvitationOrder] = None,
        query: Optional[str] = None,
        role: Optional[EnterpriseAdministratorRole] = None
    ) -> "EnterpriseAdministratorInvitationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {
                "type": "EnterpriseAdministratorInvitationOrder",
                "value": order_by,
            },
            "query": {"type": "String", "value": query},
            "role": {"type": "EnterpriseAdministratorRole", "value": role},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseAdministratorInvitationConnectionFields(
            "pending_admin_invitations", arguments=cleared_arguments
        )

    @classmethod
    def pending_collaborator_invitations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryInvitationOrder] = None,
        query: Optional[str] = None
    ) -> "RepositoryInvitationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryInvitationOrder", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryInvitationConnectionFields(
            "pending_collaborator_invitations", arguments=cleared_arguments
        )

    @classmethod
    def pending_member_invitations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        invitation_source: Optional[OrganizationInvitationSource] = None,
        last: Optional[int] = None,
        organization_logins: Optional[str] = None,
        query: Optional[str] = None
    ) -> "EnterprisePendingMemberInvitationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "invitationSource": {
                "type": "OrganizationInvitationSource",
                "value": invitation_source,
            },
            "last": {"type": "Int", "value": last},
            "organizationLogins": {"type": "String", "value": organization_logins},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterprisePendingMemberInvitationConnectionFields(
            "pending_member_invitations", arguments=cleared_arguments
        )

    @classmethod
    def pending_unaffiliated_member_invitations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseMemberInvitationOrder] = None,
        query: Optional[str] = None
    ) -> "EnterpriseMemberInvitationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "EnterpriseMemberInvitationOrder", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseMemberInvitationConnectionFields(
            "pending_unaffiliated_member_invitations", arguments=cleared_arguments
        )

    repository_deploy_key_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("repositoryDeployKeySetting")
    )

    @classmethod
    def repository_deploy_key_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "repository_deploy_key_setting_organizations", arguments=cleared_arguments
        )

    repository_projects_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("repositoryProjectsSetting")
    )

    @classmethod
    def repository_projects_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "repository_projects_setting_organizations", arguments=cleared_arguments
        )

    @classmethod
    def saml_identity_provider(cls) -> "EnterpriseIdentityProviderFields":
        return EnterpriseIdentityProviderFields("saml_identity_provider")

    @classmethod
    def saml_identity_provider_setting_organizations(
        cls,
        value: IdentityProviderConfigurationState,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "IdentityProviderConfigurationState!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "saml_identity_provider_setting_organizations", arguments=cleared_arguments
        )

    @classmethod
    def support_entitlements(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseMemberOrder] = None
    ) -> "EnterpriseMemberConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "EnterpriseMemberOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseMemberConnectionFields(
            "support_entitlements", arguments=cleared_arguments
        )

    team_discussions_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("teamDiscussionsSetting")
    )

    @classmethod
    def team_discussions_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "team_discussions_setting_organizations", arguments=cleared_arguments
        )

    two_factor_disallowed_methods_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("twoFactorDisallowedMethodsSetting")
    )
    two_factor_required_setting: "EnterpriseOwnerInfoGraphQLField" = (
        EnterpriseOwnerInfoGraphQLField("twoFactorRequiredSetting")
    )

    @classmethod
    def two_factor_required_setting_organizations(
        cls,
        value: bool,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "value": {"type": "Boolean!", "value": value},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "two_factor_required_setting_organizations", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            EnterpriseOwnerInfoGraphQLField,
            "EnterpriseAdministratorConnectionFields",
            "EnterpriseAdministratorInvitationConnectionFields",
            "EnterpriseFailedInvitationConnectionFields",
            "EnterpriseIdentityProviderFields",
            "EnterpriseMemberConnectionFields",
            "EnterpriseMemberInvitationConnectionFields",
            "EnterpriseOutsideCollaboratorConnectionFields",
            "EnterprisePendingMemberInvitationConnectionFields",
            "EnterpriseServerInstallationConnectionFields",
            "IpAllowListEntryConnectionFields",
            "OIDCProviderFields",
            "OrganizationConnectionFields",
            "RepositoryInvitationConnectionFields",
            "UserConnectionFields",
            "VerifiableDomainConnectionFields",
        ]
    ) -> "EnterpriseOwnerInfoFields":
        """Subfields should come from the EnterpriseOwnerInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseOwnerInfoFields":
        self._alias = alias
        return self


class EnterprisePendingMemberInvitationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterprisePendingMemberInvitationEdgeFields":
        return EnterprisePendingMemberInvitationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "OrganizationInvitationFields":
        return OrganizationInvitationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterprisePendingMemberInvitationConnectionGraphQLField" = (
        EnterprisePendingMemberInvitationConnectionGraphQLField("totalCount")
    )
    total_unique_user_count: (
        "EnterprisePendingMemberInvitationConnectionGraphQLField"
    ) = EnterprisePendingMemberInvitationConnectionGraphQLField("totalUniqueUserCount")

    def fields(
        self,
        *subfields: Union[
            EnterprisePendingMemberInvitationConnectionGraphQLField,
            "EnterprisePendingMemberInvitationEdgeFields",
            "OrganizationInvitationFields",
            "PageInfoFields",
        ]
    ) -> "EnterprisePendingMemberInvitationConnectionFields":
        """Subfields should come from the EnterprisePendingMemberInvitationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterprisePendingMemberInvitationConnectionFields":
        self._alias = alias
        return self


class EnterprisePendingMemberInvitationEdgeFields(GraphQLField):
    cursor: "EnterprisePendingMemberInvitationEdgeGraphQLField" = (
        EnterprisePendingMemberInvitationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "OrganizationInvitationFields":
        return OrganizationInvitationFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterprisePendingMemberInvitationEdgeGraphQLField,
            "OrganizationInvitationFields",
        ]
    ) -> "EnterprisePendingMemberInvitationEdgeFields":
        """Subfields should come from the EnterprisePendingMemberInvitationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterprisePendingMemberInvitationEdgeFields":
        self._alias = alias
        return self


class EnterpriseRepositoryInfoFields(GraphQLField):
    id: "EnterpriseRepositoryInfoGraphQLField" = EnterpriseRepositoryInfoGraphQLField(
        "id"
    )
    is_private: "EnterpriseRepositoryInfoGraphQLField" = (
        EnterpriseRepositoryInfoGraphQLField("isPrivate")
    )
    name: "EnterpriseRepositoryInfoGraphQLField" = EnterpriseRepositoryInfoGraphQLField(
        "name"
    )
    name_with_owner: "EnterpriseRepositoryInfoGraphQLField" = (
        EnterpriseRepositoryInfoGraphQLField("nameWithOwner")
    )

    def fields(
        self, *subfields: EnterpriseRepositoryInfoGraphQLField
    ) -> "EnterpriseRepositoryInfoFields":
        """Subfields should come from the EnterpriseRepositoryInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseRepositoryInfoFields":
        self._alias = alias
        return self


class EnterpriseRepositoryInfoConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseRepositoryInfoEdgeFields":
        return EnterpriseRepositoryInfoEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseRepositoryInfoFields":
        return EnterpriseRepositoryInfoFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseRepositoryInfoConnectionGraphQLField" = (
        EnterpriseRepositoryInfoConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseRepositoryInfoConnectionGraphQLField,
            "EnterpriseRepositoryInfoEdgeFields",
            "EnterpriseRepositoryInfoFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseRepositoryInfoConnectionFields":
        """Subfields should come from the EnterpriseRepositoryInfoConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseRepositoryInfoConnectionFields":
        self._alias = alias
        return self


class EnterpriseRepositoryInfoEdgeFields(GraphQLField):
    cursor: "EnterpriseRepositoryInfoEdgeGraphQLField" = (
        EnterpriseRepositoryInfoEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "EnterpriseRepositoryInfoFields":
        return EnterpriseRepositoryInfoFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterpriseRepositoryInfoEdgeGraphQLField, "EnterpriseRepositoryInfoFields"
        ]
    ) -> "EnterpriseRepositoryInfoEdgeFields":
        """Subfields should come from the EnterpriseRepositoryInfoEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseRepositoryInfoEdgeFields":
        self._alias = alias
        return self


class EnterpriseServerInstallationFields(GraphQLField):
    created_at: "EnterpriseServerInstallationGraphQLField" = (
        EnterpriseServerInstallationGraphQLField("createdAt")
    )
    customer_name: "EnterpriseServerInstallationGraphQLField" = (
        EnterpriseServerInstallationGraphQLField("customerName")
    )
    host_name: "EnterpriseServerInstallationGraphQLField" = (
        EnterpriseServerInstallationGraphQLField("hostName")
    )
    id: "EnterpriseServerInstallationGraphQLField" = (
        EnterpriseServerInstallationGraphQLField("id")
    )
    is_connected: "EnterpriseServerInstallationGraphQLField" = (
        EnterpriseServerInstallationGraphQLField("isConnected")
    )
    updated_at: "EnterpriseServerInstallationGraphQLField" = (
        EnterpriseServerInstallationGraphQLField("updatedAt")
    )

    @classmethod
    def user_accounts(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseServerUserAccountOrder] = None
    ) -> "EnterpriseServerUserAccountConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "EnterpriseServerUserAccountOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseServerUserAccountConnectionFields(
            "user_accounts", arguments=cleared_arguments
        )

    @classmethod
    def user_accounts_uploads(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseServerUserAccountsUploadOrder] = None
    ) -> "EnterpriseServerUserAccountsUploadConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {
                "type": "EnterpriseServerUserAccountsUploadOrder",
                "value": order_by,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseServerUserAccountsUploadConnectionFields(
            "user_accounts_uploads", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerInstallationGraphQLField,
            "EnterpriseServerUserAccountConnectionFields",
            "EnterpriseServerUserAccountsUploadConnectionFields",
        ]
    ) -> "EnterpriseServerInstallationFields":
        """Subfields should come from the EnterpriseServerInstallationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerInstallationFields":
        self._alias = alias
        return self


class EnterpriseServerInstallationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseServerInstallationEdgeFields":
        return EnterpriseServerInstallationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseServerInstallationFields":
        return EnterpriseServerInstallationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseServerInstallationConnectionGraphQLField" = (
        EnterpriseServerInstallationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerInstallationConnectionGraphQLField,
            "EnterpriseServerInstallationEdgeFields",
            "EnterpriseServerInstallationFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseServerInstallationConnectionFields":
        """Subfields should come from the EnterpriseServerInstallationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerInstallationConnectionFields":
        self._alias = alias
        return self


class EnterpriseServerInstallationEdgeFields(GraphQLField):
    cursor: "EnterpriseServerInstallationEdgeGraphQLField" = (
        EnterpriseServerInstallationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "EnterpriseServerInstallationFields":
        return EnterpriseServerInstallationFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerInstallationEdgeGraphQLField,
            "EnterpriseServerInstallationFields",
        ]
    ) -> "EnterpriseServerInstallationEdgeFields":
        """Subfields should come from the EnterpriseServerInstallationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerInstallationEdgeFields":
        self._alias = alias
        return self


class EnterpriseServerInstallationMembershipConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseServerInstallationMembershipEdgeFields":
        return EnterpriseServerInstallationMembershipEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseServerInstallationFields":
        return EnterpriseServerInstallationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseServerInstallationMembershipConnectionGraphQLField" = (
        EnterpriseServerInstallationMembershipConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerInstallationMembershipConnectionGraphQLField,
            "EnterpriseServerInstallationFields",
            "EnterpriseServerInstallationMembershipEdgeFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseServerInstallationMembershipConnectionFields":
        """Subfields should come from the EnterpriseServerInstallationMembershipConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "EnterpriseServerInstallationMembershipConnectionFields":
        self._alias = alias
        return self


class EnterpriseServerInstallationMembershipEdgeFields(GraphQLField):
    cursor: "EnterpriseServerInstallationMembershipEdgeGraphQLField" = (
        EnterpriseServerInstallationMembershipEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "EnterpriseServerInstallationFields":
        return EnterpriseServerInstallationFields("node")

    role: "EnterpriseServerInstallationMembershipEdgeGraphQLField" = (
        EnterpriseServerInstallationMembershipEdgeGraphQLField("role")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerInstallationMembershipEdgeGraphQLField,
            "EnterpriseServerInstallationFields",
        ]
    ) -> "EnterpriseServerInstallationMembershipEdgeFields":
        """Subfields should come from the EnterpriseServerInstallationMembershipEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerInstallationMembershipEdgeFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountFields(GraphQLField):
    created_at: "EnterpriseServerUserAccountGraphQLField" = (
        EnterpriseServerUserAccountGraphQLField("createdAt")
    )

    @classmethod
    def emails(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseServerUserAccountEmailOrder] = None
    ) -> "EnterpriseServerUserAccountEmailConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {
                "type": "EnterpriseServerUserAccountEmailOrder",
                "value": order_by,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseServerUserAccountEmailConnectionFields(
            "emails", arguments=cleared_arguments
        )

    @classmethod
    def enterprise_server_installation(cls) -> "EnterpriseServerInstallationFields":
        return EnterpriseServerInstallationFields("enterprise_server_installation")

    id: "EnterpriseServerUserAccountGraphQLField" = (
        EnterpriseServerUserAccountGraphQLField("id")
    )
    is_site_admin: "EnterpriseServerUserAccountGraphQLField" = (
        EnterpriseServerUserAccountGraphQLField("isSiteAdmin")
    )
    login: "EnterpriseServerUserAccountGraphQLField" = (
        EnterpriseServerUserAccountGraphQLField("login")
    )
    profile_name: "EnterpriseServerUserAccountGraphQLField" = (
        EnterpriseServerUserAccountGraphQLField("profileName")
    )
    remote_created_at: "EnterpriseServerUserAccountGraphQLField" = (
        EnterpriseServerUserAccountGraphQLField("remoteCreatedAt")
    )
    remote_user_id: "EnterpriseServerUserAccountGraphQLField" = (
        EnterpriseServerUserAccountGraphQLField("remoteUserId")
    )
    updated_at: "EnterpriseServerUserAccountGraphQLField" = (
        EnterpriseServerUserAccountGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountGraphQLField,
            "EnterpriseServerInstallationFields",
            "EnterpriseServerUserAccountEmailConnectionFields",
        ]
    ) -> "EnterpriseServerUserAccountFields":
        """Subfields should come from the EnterpriseServerUserAccountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseServerUserAccountEdgeFields":
        return EnterpriseServerUserAccountEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseServerUserAccountFields":
        return EnterpriseServerUserAccountFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseServerUserAccountConnectionGraphQLField" = (
        EnterpriseServerUserAccountConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountConnectionGraphQLField,
            "EnterpriseServerUserAccountEdgeFields",
            "EnterpriseServerUserAccountFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseServerUserAccountConnectionFields":
        """Subfields should come from the EnterpriseServerUserAccountConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountConnectionFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountEdgeFields(GraphQLField):
    cursor: "EnterpriseServerUserAccountEdgeGraphQLField" = (
        EnterpriseServerUserAccountEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "EnterpriseServerUserAccountFields":
        return EnterpriseServerUserAccountFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountEdgeGraphQLField,
            "EnterpriseServerUserAccountFields",
        ]
    ) -> "EnterpriseServerUserAccountEdgeFields":
        """Subfields should come from the EnterpriseServerUserAccountEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountEdgeFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountEmailFields(GraphQLField):
    created_at: "EnterpriseServerUserAccountEmailGraphQLField" = (
        EnterpriseServerUserAccountEmailGraphQLField("createdAt")
    )
    email: "EnterpriseServerUserAccountEmailGraphQLField" = (
        EnterpriseServerUserAccountEmailGraphQLField("email")
    )
    id: "EnterpriseServerUserAccountEmailGraphQLField" = (
        EnterpriseServerUserAccountEmailGraphQLField("id")
    )
    is_primary: "EnterpriseServerUserAccountEmailGraphQLField" = (
        EnterpriseServerUserAccountEmailGraphQLField("isPrimary")
    )
    updated_at: "EnterpriseServerUserAccountEmailGraphQLField" = (
        EnterpriseServerUserAccountEmailGraphQLField("updatedAt")
    )

    @classmethod
    def user_account(cls) -> "EnterpriseServerUserAccountFields":
        return EnterpriseServerUserAccountFields("user_account")

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountEmailGraphQLField,
            "EnterpriseServerUserAccountFields",
        ]
    ) -> "EnterpriseServerUserAccountEmailFields":
        """Subfields should come from the EnterpriseServerUserAccountEmailFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountEmailFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountEmailConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseServerUserAccountEmailEdgeFields":
        return EnterpriseServerUserAccountEmailEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseServerUserAccountEmailFields":
        return EnterpriseServerUserAccountEmailFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseServerUserAccountEmailConnectionGraphQLField" = (
        EnterpriseServerUserAccountEmailConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountEmailConnectionGraphQLField,
            "EnterpriseServerUserAccountEmailEdgeFields",
            "EnterpriseServerUserAccountEmailFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseServerUserAccountEmailConnectionFields":
        """Subfields should come from the EnterpriseServerUserAccountEmailConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountEmailConnectionFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountEmailEdgeFields(GraphQLField):
    cursor: "EnterpriseServerUserAccountEmailEdgeGraphQLField" = (
        EnterpriseServerUserAccountEmailEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "EnterpriseServerUserAccountEmailFields":
        return EnterpriseServerUserAccountEmailFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountEmailEdgeGraphQLField,
            "EnterpriseServerUserAccountEmailFields",
        ]
    ) -> "EnterpriseServerUserAccountEmailEdgeFields":
        """Subfields should come from the EnterpriseServerUserAccountEmailEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountEmailEdgeFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountsUploadFields(GraphQLField):
    created_at: "EnterpriseServerUserAccountsUploadGraphQLField" = (
        EnterpriseServerUserAccountsUploadGraphQLField("createdAt")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    @classmethod
    def enterprise_server_installation(cls) -> "EnterpriseServerInstallationFields":
        return EnterpriseServerInstallationFields("enterprise_server_installation")

    id: "EnterpriseServerUserAccountsUploadGraphQLField" = (
        EnterpriseServerUserAccountsUploadGraphQLField("id")
    )
    name: "EnterpriseServerUserAccountsUploadGraphQLField" = (
        EnterpriseServerUserAccountsUploadGraphQLField("name")
    )
    sync_state: "EnterpriseServerUserAccountsUploadGraphQLField" = (
        EnterpriseServerUserAccountsUploadGraphQLField("syncState")
    )
    updated_at: "EnterpriseServerUserAccountsUploadGraphQLField" = (
        EnterpriseServerUserAccountsUploadGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountsUploadGraphQLField,
            "EnterpriseFields",
            "EnterpriseServerInstallationFields",
        ]
    ) -> "EnterpriseServerUserAccountsUploadFields":
        """Subfields should come from the EnterpriseServerUserAccountsUploadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountsUploadFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountsUploadConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnterpriseServerUserAccountsUploadEdgeFields":
        return EnterpriseServerUserAccountsUploadEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnterpriseServerUserAccountsUploadFields":
        return EnterpriseServerUserAccountsUploadFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnterpriseServerUserAccountsUploadConnectionGraphQLField" = (
        EnterpriseServerUserAccountsUploadConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountsUploadConnectionGraphQLField,
            "EnterpriseServerUserAccountsUploadEdgeFields",
            "EnterpriseServerUserAccountsUploadFields",
            "PageInfoFields",
        ]
    ) -> "EnterpriseServerUserAccountsUploadConnectionFields":
        """Subfields should come from the EnterpriseServerUserAccountsUploadConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountsUploadConnectionFields":
        self._alias = alias
        return self


class EnterpriseServerUserAccountsUploadEdgeFields(GraphQLField):
    cursor: "EnterpriseServerUserAccountsUploadEdgeGraphQLField" = (
        EnterpriseServerUserAccountsUploadEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "EnterpriseServerUserAccountsUploadFields":
        return EnterpriseServerUserAccountsUploadFields("node")

    def fields(
        self,
        *subfields: Union[
            EnterpriseServerUserAccountsUploadEdgeGraphQLField,
            "EnterpriseServerUserAccountsUploadFields",
        ]
    ) -> "EnterpriseServerUserAccountsUploadEdgeFields":
        """Subfields should come from the EnterpriseServerUserAccountsUploadEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseServerUserAccountsUploadEdgeFields":
        self._alias = alias
        return self


class EnterpriseUserAccountFields(GraphQLField):
    @classmethod
    def avatar_url(
        cls, *, size: Optional[int] = None
    ) -> "EnterpriseUserAccountGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseUserAccountGraphQLField(
            "avatar_url", arguments=cleared_arguments
        )

    created_at: "EnterpriseUserAccountGraphQLField" = EnterpriseUserAccountGraphQLField(
        "createdAt"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    @classmethod
    def enterprise_installations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[EnterpriseServerInstallationOrder] = None,
        query: Optional[str] = None,
        role: Optional[EnterpriseUserAccountMembershipRole] = None
    ) -> "EnterpriseServerInstallationMembershipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "EnterpriseServerInstallationOrder", "value": order_by},
            "query": {"type": "String", "value": query},
            "role": {"type": "EnterpriseUserAccountMembershipRole", "value": role},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseServerInstallationMembershipConnectionFields(
            "enterprise_installations", arguments=cleared_arguments
        )

    id: "EnterpriseUserAccountGraphQLField" = EnterpriseUserAccountGraphQLField("id")
    login: "EnterpriseUserAccountGraphQLField" = EnterpriseUserAccountGraphQLField(
        "login"
    )
    name: "EnterpriseUserAccountGraphQLField" = EnterpriseUserAccountGraphQLField(
        "name"
    )

    @classmethod
    def organizations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None,
        query: Optional[str] = None,
        role: Optional[EnterpriseUserAccountMembershipRole] = None
    ) -> "EnterpriseOrganizationMembershipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
            "query": {"type": "String", "value": query},
            "role": {"type": "EnterpriseUserAccountMembershipRole", "value": role},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseOrganizationMembershipConnectionFields(
            "organizations", arguments=cleared_arguments
        )

    resource_path: "EnterpriseUserAccountGraphQLField" = (
        EnterpriseUserAccountGraphQLField("resourcePath")
    )
    updated_at: "EnterpriseUserAccountGraphQLField" = EnterpriseUserAccountGraphQLField(
        "updatedAt"
    )
    url: "EnterpriseUserAccountGraphQLField" = EnterpriseUserAccountGraphQLField("url")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            EnterpriseUserAccountGraphQLField,
            "EnterpriseFields",
            "EnterpriseOrganizationMembershipConnectionFields",
            "EnterpriseServerInstallationMembershipConnectionFields",
            "UserFields",
        ]
    ) -> "EnterpriseUserAccountFields":
        """Subfields should come from the EnterpriseUserAccountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnterpriseUserAccountFields":
        self._alias = alias
        return self


class EnvironmentFields(GraphQLField):
    database_id: "EnvironmentGraphQLField" = EnvironmentGraphQLField("databaseId")
    id: "EnvironmentGraphQLField" = EnvironmentGraphQLField("id")
    is_pinned: "EnvironmentGraphQLField" = EnvironmentGraphQLField("isPinned")

    @classmethod
    def latest_completed_deployment(cls) -> "DeploymentFields":
        return DeploymentFields("latest_completed_deployment")

    name: "EnvironmentGraphQLField" = EnvironmentGraphQLField("name")
    pinned_position: "EnvironmentGraphQLField" = EnvironmentGraphQLField(
        "pinnedPosition"
    )

    @classmethod
    def protection_rules(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DeploymentProtectionRuleConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentProtectionRuleConnectionFields(
            "protection_rules", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            EnvironmentGraphQLField,
            "DeploymentFields",
            "DeploymentProtectionRuleConnectionFields",
        ]
    ) -> "EnvironmentFields":
        """Subfields should come from the EnvironmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnvironmentFields":
        self._alias = alias
        return self


class EnvironmentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "EnvironmentEdgeFields":
        return EnvironmentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "EnvironmentFields":
        return EnvironmentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EnvironmentConnectionGraphQLField" = (
        EnvironmentConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EnvironmentConnectionGraphQLField,
            "EnvironmentEdgeFields",
            "EnvironmentFields",
            "PageInfoFields",
        ]
    ) -> "EnvironmentConnectionFields":
        """Subfields should come from the EnvironmentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnvironmentConnectionFields":
        self._alias = alias
        return self


class EnvironmentEdgeFields(GraphQLField):
    cursor: "EnvironmentEdgeGraphQLField" = EnvironmentEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "EnvironmentFields":
        return EnvironmentFields("node")

    def fields(
        self, *subfields: Union[EnvironmentEdgeGraphQLField, "EnvironmentFields"]
    ) -> "EnvironmentEdgeFields":
        """Subfields should come from the EnvironmentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EnvironmentEdgeFields":
        self._alias = alias
        return self


class ExternalIdentityFields(GraphQLField):
    guid: "ExternalIdentityGraphQLField" = ExternalIdentityGraphQLField("guid")
    id: "ExternalIdentityGraphQLField" = ExternalIdentityGraphQLField("id")

    @classmethod
    def organization_invitation(cls) -> "OrganizationInvitationFields":
        return OrganizationInvitationFields("organization_invitation")

    @classmethod
    def saml_identity(cls) -> "ExternalIdentitySamlAttributesFields":
        return ExternalIdentitySamlAttributesFields("saml_identity")

    @classmethod
    def scim_identity(cls) -> "ExternalIdentityScimAttributesFields":
        return ExternalIdentityScimAttributesFields("scim_identity")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            ExternalIdentityGraphQLField,
            "ExternalIdentitySamlAttributesFields",
            "ExternalIdentityScimAttributesFields",
            "OrganizationInvitationFields",
            "UserFields",
        ]
    ) -> "ExternalIdentityFields":
        """Subfields should come from the ExternalIdentityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalIdentityFields":
        self._alias = alias
        return self


class ExternalIdentityAttributeFields(GraphQLField):
    metadata: "ExternalIdentityAttributeGraphQLField" = (
        ExternalIdentityAttributeGraphQLField("metadata")
    )
    name: "ExternalIdentityAttributeGraphQLField" = (
        ExternalIdentityAttributeGraphQLField("name")
    )
    value: "ExternalIdentityAttributeGraphQLField" = (
        ExternalIdentityAttributeGraphQLField("value")
    )

    def fields(
        self, *subfields: ExternalIdentityAttributeGraphQLField
    ) -> "ExternalIdentityAttributeFields":
        """Subfields should come from the ExternalIdentityAttributeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalIdentityAttributeFields":
        self._alias = alias
        return self


class ExternalIdentityConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ExternalIdentityEdgeFields":
        return ExternalIdentityEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ExternalIdentityFields":
        return ExternalIdentityFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ExternalIdentityConnectionGraphQLField" = (
        ExternalIdentityConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ExternalIdentityConnectionGraphQLField,
            "ExternalIdentityEdgeFields",
            "ExternalIdentityFields",
            "PageInfoFields",
        ]
    ) -> "ExternalIdentityConnectionFields":
        """Subfields should come from the ExternalIdentityConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalIdentityConnectionFields":
        self._alias = alias
        return self


class ExternalIdentityEdgeFields(GraphQLField):
    cursor: "ExternalIdentityEdgeGraphQLField" = ExternalIdentityEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "ExternalIdentityFields":
        return ExternalIdentityFields("node")

    def fields(
        self,
        *subfields: Union[ExternalIdentityEdgeGraphQLField, "ExternalIdentityFields"]
    ) -> "ExternalIdentityEdgeFields":
        """Subfields should come from the ExternalIdentityEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalIdentityEdgeFields":
        self._alias = alias
        return self


class ExternalIdentitySamlAttributesFields(GraphQLField):
    @classmethod
    def attributes(cls) -> "ExternalIdentityAttributeFields":
        return ExternalIdentityAttributeFields("attributes")

    @classmethod
    def emails(cls) -> "UserEmailMetadataFields":
        return UserEmailMetadataFields("emails")

    family_name: "ExternalIdentitySamlAttributesGraphQLField" = (
        ExternalIdentitySamlAttributesGraphQLField("familyName")
    )
    given_name: "ExternalIdentitySamlAttributesGraphQLField" = (
        ExternalIdentitySamlAttributesGraphQLField("givenName")
    )
    groups: "ExternalIdentitySamlAttributesGraphQLField" = (
        ExternalIdentitySamlAttributesGraphQLField("groups")
    )
    name_id: "ExternalIdentitySamlAttributesGraphQLField" = (
        ExternalIdentitySamlAttributesGraphQLField("nameId")
    )
    username: "ExternalIdentitySamlAttributesGraphQLField" = (
        ExternalIdentitySamlAttributesGraphQLField("username")
    )

    def fields(
        self,
        *subfields: Union[
            ExternalIdentitySamlAttributesGraphQLField,
            "ExternalIdentityAttributeFields",
            "UserEmailMetadataFields",
        ]
    ) -> "ExternalIdentitySamlAttributesFields":
        """Subfields should come from the ExternalIdentitySamlAttributesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalIdentitySamlAttributesFields":
        self._alias = alias
        return self


class ExternalIdentityScimAttributesFields(GraphQLField):
    @classmethod
    def emails(cls) -> "UserEmailMetadataFields":
        return UserEmailMetadataFields("emails")

    family_name: "ExternalIdentityScimAttributesGraphQLField" = (
        ExternalIdentityScimAttributesGraphQLField("familyName")
    )
    given_name: "ExternalIdentityScimAttributesGraphQLField" = (
        ExternalIdentityScimAttributesGraphQLField("givenName")
    )
    groups: "ExternalIdentityScimAttributesGraphQLField" = (
        ExternalIdentityScimAttributesGraphQLField("groups")
    )
    username: "ExternalIdentityScimAttributesGraphQLField" = (
        ExternalIdentityScimAttributesGraphQLField("username")
    )

    def fields(
        self,
        *subfields: Union[
            ExternalIdentityScimAttributesGraphQLField, "UserEmailMetadataFields"
        ]
    ) -> "ExternalIdentityScimAttributesFields":
        """Subfields should come from the ExternalIdentityScimAttributesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalIdentityScimAttributesFields":
        self._alias = alias
        return self


class FileExtensionRestrictionParametersFields(GraphQLField):
    restricted_file_extensions: "FileExtensionRestrictionParametersGraphQLField" = (
        FileExtensionRestrictionParametersGraphQLField("restrictedFileExtensions")
    )

    def fields(
        self, *subfields: FileExtensionRestrictionParametersGraphQLField
    ) -> "FileExtensionRestrictionParametersFields":
        """Subfields should come from the FileExtensionRestrictionParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FileExtensionRestrictionParametersFields":
        self._alias = alias
        return self


class FilePathRestrictionParametersFields(GraphQLField):
    restricted_file_paths: "FilePathRestrictionParametersGraphQLField" = (
        FilePathRestrictionParametersGraphQLField("restrictedFilePaths")
    )

    def fields(
        self, *subfields: FilePathRestrictionParametersGraphQLField
    ) -> "FilePathRestrictionParametersFields":
        """Subfields should come from the FilePathRestrictionParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FilePathRestrictionParametersFields":
        self._alias = alias
        return self


class FollowOrganizationPayloadFields(GraphQLField):
    client_mutation_id: "FollowOrganizationPayloadGraphQLField" = (
        FollowOrganizationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    def fields(
        self,
        *subfields: Union[FollowOrganizationPayloadGraphQLField, "OrganizationFields"]
    ) -> "FollowOrganizationPayloadFields":
        """Subfields should come from the FollowOrganizationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FollowOrganizationPayloadFields":
        self._alias = alias
        return self


class FollowUserPayloadFields(GraphQLField):
    client_mutation_id: "FollowUserPayloadGraphQLField" = FollowUserPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[FollowUserPayloadGraphQLField, "UserFields"]
    ) -> "FollowUserPayloadFields":
        """Subfields should come from the FollowUserPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FollowUserPayloadFields":
        self._alias = alias
        return self


class FollowerConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserEdgeFields":
        return UserEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FollowerConnectionGraphQLField" = FollowerConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            FollowerConnectionGraphQLField,
            "PageInfoFields",
            "UserEdgeFields",
            "UserFields",
        ]
    ) -> "FollowerConnectionFields":
        """Subfields should come from the FollowerConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FollowerConnectionFields":
        self._alias = alias
        return self


class FollowingConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserEdgeFields":
        return UserEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FollowingConnectionGraphQLField" = FollowingConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            FollowingConnectionGraphQLField,
            "PageInfoFields",
            "UserEdgeFields",
            "UserFields",
        ]
    ) -> "FollowingConnectionFields":
        """Subfields should come from the FollowingConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FollowingConnectionFields":
        self._alias = alias
        return self


class FundingLinkFields(GraphQLField):
    platform: "FundingLinkGraphQLField" = FundingLinkGraphQLField("platform")
    url: "FundingLinkGraphQLField" = FundingLinkGraphQLField("url")

    def fields(self, *subfields: FundingLinkGraphQLField) -> "FundingLinkFields":
        """Subfields should come from the FundingLinkFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FundingLinkFields":
        self._alias = alias
        return self


class GistFields(GraphQLField):
    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "GistCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GistCommentConnectionFields("comments", arguments=cleared_arguments)

    created_at: "GistGraphQLField" = GistGraphQLField("createdAt")
    description: "GistGraphQLField" = GistGraphQLField("description")

    @classmethod
    def files(
        cls, *, limit: Optional[int] = None, oid: Optional[Any] = None
    ) -> "GistFileFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "limit": {"type": "Int", "value": limit},
            "oid": {"type": "GitObjectID", "value": oid},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GistFileFields("files", arguments=cleared_arguments)

    @classmethod
    def forks(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[GistOrder] = None
    ) -> "GistConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "GistOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GistConnectionFields("forks", arguments=cleared_arguments)

    id: "GistGraphQLField" = GistGraphQLField("id")
    is_fork: "GistGraphQLField" = GistGraphQLField("isFork")
    is_public: "GistGraphQLField" = GistGraphQLField("isPublic")
    name: "GistGraphQLField" = GistGraphQLField("name")

    @classmethod
    def owner(cls) -> "RepositoryOwnerInterface":
        return RepositoryOwnerInterface("owner")

    pushed_at: "GistGraphQLField" = GistGraphQLField("pushedAt")
    resource_path: "GistGraphQLField" = GistGraphQLField("resourcePath")
    stargazer_count: "GistGraphQLField" = GistGraphQLField("stargazerCount")

    @classmethod
    def stargazers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[StarOrder] = None
    ) -> "StargazerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "StarOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StargazerConnectionFields("stargazers", arguments=cleared_arguments)

    updated_at: "GistGraphQLField" = GistGraphQLField("updatedAt")
    url: "GistGraphQLField" = GistGraphQLField("url")
    viewer_has_starred: "GistGraphQLField" = GistGraphQLField("viewerHasStarred")

    def fields(
        self,
        *subfields: Union[
            GistGraphQLField,
            "GistCommentConnectionFields",
            "GistConnectionFields",
            "GistFileFields",
            "RepositoryOwnerInterface",
            "StargazerConnectionFields",
        ]
    ) -> "GistFields":
        """Subfields should come from the GistFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GistFields":
        self._alias = alias
        return self


class GistCommentFields(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "authorAssociation"
    )
    body: "GistCommentGraphQLField" = GistCommentGraphQLField("body")
    body_html: "GistCommentGraphQLField" = GistCommentGraphQLField("bodyHTML")
    body_text: "GistCommentGraphQLField" = GistCommentGraphQLField("bodyText")
    created_at: "GistCommentGraphQLField" = GistCommentGraphQLField("createdAt")
    created_via_email: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "createdViaEmail"
    )
    database_id: "GistCommentGraphQLField" = GistCommentGraphQLField("databaseId")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    @classmethod
    def gist(cls) -> "GistFields":
        return GistFields("gist")

    id: "GistCommentGraphQLField" = GistCommentGraphQLField("id")
    includes_created_edit: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "includesCreatedEdit"
    )
    is_minimized: "GistCommentGraphQLField" = GistCommentGraphQLField("isMinimized")
    last_edited_at: "GistCommentGraphQLField" = GistCommentGraphQLField("lastEditedAt")
    minimized_reason: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "minimizedReason"
    )
    published_at: "GistCommentGraphQLField" = GistCommentGraphQLField("publishedAt")
    updated_at: "GistCommentGraphQLField" = GistCommentGraphQLField("updatedAt")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_delete: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "viewerCanDelete"
    )
    viewer_can_minimize: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "viewerCanMinimize"
    )
    viewer_can_update: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "viewerCanUpdate"
    )
    viewer_cannot_update_reasons: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "viewerCannotUpdateReasons"
    )
    viewer_did_author: "GistCommentGraphQLField" = GistCommentGraphQLField(
        "viewerDidAuthor"
    )

    def fields(
        self,
        *subfields: Union[
            GistCommentGraphQLField,
            "ActorInterface",
            "GistFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "GistCommentFields":
        """Subfields should come from the GistCommentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GistCommentFields":
        self._alias = alias
        return self


class GistCommentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "GistCommentEdgeFields":
        return GistCommentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "GistCommentFields":
        return GistCommentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "GistCommentConnectionGraphQLField" = (
        GistCommentConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            GistCommentConnectionGraphQLField,
            "GistCommentEdgeFields",
            "GistCommentFields",
            "PageInfoFields",
        ]
    ) -> "GistCommentConnectionFields":
        """Subfields should come from the GistCommentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GistCommentConnectionFields":
        self._alias = alias
        return self


class GistCommentEdgeFields(GraphQLField):
    cursor: "GistCommentEdgeGraphQLField" = GistCommentEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "GistCommentFields":
        return GistCommentFields("node")

    def fields(
        self, *subfields: Union[GistCommentEdgeGraphQLField, "GistCommentFields"]
    ) -> "GistCommentEdgeFields":
        """Subfields should come from the GistCommentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GistCommentEdgeFields":
        self._alias = alias
        return self


class GistConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "GistEdgeFields":
        return GistEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "GistFields":
        return GistFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "GistConnectionGraphQLField" = GistConnectionGraphQLField("totalCount")

    def fields(
        self,
        *subfields: Union[
            GistConnectionGraphQLField, "GistEdgeFields", "GistFields", "PageInfoFields"
        ]
    ) -> "GistConnectionFields":
        """Subfields should come from the GistConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GistConnectionFields":
        self._alias = alias
        return self


class GistEdgeFields(GraphQLField):
    cursor: "GistEdgeGraphQLField" = GistEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "GistFields":
        return GistFields("node")

    def fields(
        self, *subfields: Union[GistEdgeGraphQLField, "GistFields"]
    ) -> "GistEdgeFields":
        """Subfields should come from the GistEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GistEdgeFields":
        self._alias = alias
        return self


class GistFileFields(GraphQLField):
    encoded_name: "GistFileGraphQLField" = GistFileGraphQLField("encodedName")
    encoding: "GistFileGraphQLField" = GistFileGraphQLField("encoding")
    extension: "GistFileGraphQLField" = GistFileGraphQLField("extension")
    is_image: "GistFileGraphQLField" = GistFileGraphQLField("isImage")
    is_truncated: "GistFileGraphQLField" = GistFileGraphQLField("isTruncated")

    @classmethod
    def language(cls) -> "LanguageFields":
        return LanguageFields("language")

    name: "GistFileGraphQLField" = GistFileGraphQLField("name")
    size: "GistFileGraphQLField" = GistFileGraphQLField("size")

    @classmethod
    def text(cls, *, truncate: Optional[int] = None) -> "GistFileGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "truncate": {"type": "Int", "value": truncate}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GistFileGraphQLField("text", arguments=cleared_arguments)

    def fields(
        self, *subfields: Union[GistFileGraphQLField, "LanguageFields"]
    ) -> "GistFileFields":
        """Subfields should come from the GistFileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GistFileFields":
        self._alias = alias
        return self


class GitActorFields(GraphQLField):
    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "GitActorGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GitActorGraphQLField("avatar_url", arguments=cleared_arguments)

    date: "GitActorGraphQLField" = GitActorGraphQLField("date")
    email: "GitActorGraphQLField" = GitActorGraphQLField("email")
    name: "GitActorGraphQLField" = GitActorGraphQLField("name")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[GitActorGraphQLField, "UserFields"]
    ) -> "GitActorFields":
        """Subfields should come from the GitActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GitActorFields":
        self._alias = alias
        return self


class GitActorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "GitActorEdgeFields":
        return GitActorEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "GitActorFields":
        return GitActorFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "GitActorConnectionGraphQLField" = GitActorConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            GitActorConnectionGraphQLField,
            "GitActorEdgeFields",
            "GitActorFields",
            "PageInfoFields",
        ]
    ) -> "GitActorConnectionFields":
        """Subfields should come from the GitActorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GitActorConnectionFields":
        self._alias = alias
        return self


class GitActorEdgeFields(GraphQLField):
    cursor: "GitActorEdgeGraphQLField" = GitActorEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "GitActorFields":
        return GitActorFields("node")

    def fields(
        self, *subfields: Union[GitActorEdgeGraphQLField, "GitActorFields"]
    ) -> "GitActorEdgeFields":
        """Subfields should come from the GitActorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GitActorEdgeFields":
        self._alias = alias
        return self


class GitHubMetadataFields(GraphQLField):
    git_hub_services_sha: "GitHubMetadataGraphQLField" = GitHubMetadataGraphQLField(
        "gitHubServicesSha"
    )
    git_ip_addresses: "GitHubMetadataGraphQLField" = GitHubMetadataGraphQLField(
        "gitIpAddresses"
    )
    github_enterprise_importer_ip_addresses: "GitHubMetadataGraphQLField" = (
        GitHubMetadataGraphQLField("githubEnterpriseImporterIpAddresses")
    )
    hook_ip_addresses: "GitHubMetadataGraphQLField" = GitHubMetadataGraphQLField(
        "hookIpAddresses"
    )
    importer_ip_addresses: "GitHubMetadataGraphQLField" = GitHubMetadataGraphQLField(
        "importerIpAddresses"
    )
    is_password_authentication_verifiable: "GitHubMetadataGraphQLField" = (
        GitHubMetadataGraphQLField("isPasswordAuthenticationVerifiable")
    )
    pages_ip_addresses: "GitHubMetadataGraphQLField" = GitHubMetadataGraphQLField(
        "pagesIpAddresses"
    )

    def fields(self, *subfields: GitHubMetadataGraphQLField) -> "GitHubMetadataFields":
        """Subfields should come from the GitHubMetadataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GitHubMetadataFields":
        self._alias = alias
        return self


class GitObjectInterface(GraphQLField):
    abbreviated_oid: "GitObjectGraphQLField" = GitObjectGraphQLField("abbreviatedOid")
    commit_resource_path: "GitObjectGraphQLField" = GitObjectGraphQLField(
        "commitResourcePath"
    )
    commit_url: "GitObjectGraphQLField" = GitObjectGraphQLField("commitUrl")
    id: "GitObjectGraphQLField" = GitObjectGraphQLField("id")
    oid: "GitObjectGraphQLField" = GitObjectGraphQLField("oid")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[GitObjectGraphQLField, "RepositoryFields"]
    ) -> "GitObjectInterface":
        """Subfields should come from the GitObjectInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GitObjectInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "GitObjectInterface":
        self._inline_fragments[type_name] = subfields
        return self


class GrantEnterpriseOrganizationsMigratorRolePayloadFields(GraphQLField):
    client_mutation_id: (
        "GrantEnterpriseOrganizationsMigratorRolePayloadGraphQLField"
    ) = GrantEnterpriseOrganizationsMigratorRolePayloadGraphQLField("clientMutationId")

    @classmethod
    def organizations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "organizations", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            GrantEnterpriseOrganizationsMigratorRolePayloadGraphQLField,
            "OrganizationConnectionFields",
        ]
    ) -> "GrantEnterpriseOrganizationsMigratorRolePayloadFields":
        """Subfields should come from the GrantEnterpriseOrganizationsMigratorRolePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "GrantEnterpriseOrganizationsMigratorRolePayloadFields":
        self._alias = alias
        return self


class GrantMigratorRolePayloadFields(GraphQLField):
    client_mutation_id: "GrantMigratorRolePayloadGraphQLField" = (
        GrantMigratorRolePayloadGraphQLField("clientMutationId")
    )
    success: "GrantMigratorRolePayloadGraphQLField" = (
        GrantMigratorRolePayloadGraphQLField("success")
    )

    def fields(
        self, *subfields: GrantMigratorRolePayloadGraphQLField
    ) -> "GrantMigratorRolePayloadFields":
        """Subfields should come from the GrantMigratorRolePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GrantMigratorRolePayloadFields":
        self._alias = alias
        return self


class HeadRefDeletedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "HeadRefDeletedEventGraphQLField" = HeadRefDeletedEventGraphQLField(
        "createdAt"
    )

    @classmethod
    def head_ref(cls) -> "RefFields":
        return RefFields("head_ref")

    head_ref_name: "HeadRefDeletedEventGraphQLField" = HeadRefDeletedEventGraphQLField(
        "headRefName"
    )
    id: "HeadRefDeletedEventGraphQLField" = HeadRefDeletedEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            HeadRefDeletedEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
            "RefFields",
        ]
    ) -> "HeadRefDeletedEventFields":
        """Subfields should come from the HeadRefDeletedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HeadRefDeletedEventFields":
        self._alias = alias
        return self


class HeadRefForcePushedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def after_commit(cls) -> "CommitFields":
        return CommitFields("after_commit")

    @classmethod
    def before_commit(cls) -> "CommitFields":
        return CommitFields("before_commit")

    created_at: "HeadRefForcePushedEventGraphQLField" = (
        HeadRefForcePushedEventGraphQLField("createdAt")
    )
    id: "HeadRefForcePushedEventGraphQLField" = HeadRefForcePushedEventGraphQLField(
        "id"
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    def fields(
        self,
        *subfields: Union[
            HeadRefForcePushedEventGraphQLField,
            "ActorInterface",
            "CommitFields",
            "PullRequestFields",
            "RefFields",
        ]
    ) -> "HeadRefForcePushedEventFields":
        """Subfields should come from the HeadRefForcePushedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HeadRefForcePushedEventFields":
        self._alias = alias
        return self


class HeadRefRestoredEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "HeadRefRestoredEventGraphQLField" = HeadRefRestoredEventGraphQLField(
        "createdAt"
    )
    id: "HeadRefRestoredEventGraphQLField" = HeadRefRestoredEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            HeadRefRestoredEventGraphQLField, "ActorInterface", "PullRequestFields"
        ]
    ) -> "HeadRefRestoredEventFields":
        """Subfields should come from the HeadRefRestoredEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HeadRefRestoredEventFields":
        self._alias = alias
        return self


class HovercardFields(GraphQLField):
    @classmethod
    def contexts(cls) -> "HovercardContextInterface":
        return HovercardContextInterface("contexts")

    def fields(
        self, *subfields: Union[HovercardGraphQLField, "HovercardContextInterface"]
    ) -> "HovercardFields":
        """Subfields should come from the HovercardFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HovercardFields":
        self._alias = alias
        return self


class ImportProjectPayloadFields(GraphQLField):
    client_mutation_id: "ImportProjectPayloadGraphQLField" = (
        ImportProjectPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    def fields(
        self, *subfields: Union[ImportProjectPayloadGraphQLField, "ProjectFields"]
    ) -> "ImportProjectPayloadFields":
        """Subfields should come from the ImportProjectPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ImportProjectPayloadFields":
        self._alias = alias
        return self


class InviteEnterpriseAdminPayloadFields(GraphQLField):
    client_mutation_id: "InviteEnterpriseAdminPayloadGraphQLField" = (
        InviteEnterpriseAdminPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def invitation(cls) -> "EnterpriseAdministratorInvitationFields":
        return EnterpriseAdministratorInvitationFields("invitation")

    def fields(
        self,
        *subfields: Union[
            InviteEnterpriseAdminPayloadGraphQLField,
            "EnterpriseAdministratorInvitationFields",
        ]
    ) -> "InviteEnterpriseAdminPayloadFields":
        """Subfields should come from the InviteEnterpriseAdminPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "InviteEnterpriseAdminPayloadFields":
        self._alias = alias
        return self


class InviteEnterpriseMemberPayloadFields(GraphQLField):
    client_mutation_id: "InviteEnterpriseMemberPayloadGraphQLField" = (
        InviteEnterpriseMemberPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def invitation(cls) -> "EnterpriseMemberInvitationFields":
        return EnterpriseMemberInvitationFields("invitation")

    def fields(
        self,
        *subfields: Union[
            InviteEnterpriseMemberPayloadGraphQLField,
            "EnterpriseMemberInvitationFields",
        ]
    ) -> "InviteEnterpriseMemberPayloadFields":
        """Subfields should come from the InviteEnterpriseMemberPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "InviteEnterpriseMemberPayloadFields":
        self._alias = alias
        return self


class IpAllowListEntryFields(GraphQLField):
    allow_list_value: "IpAllowListEntryGraphQLField" = IpAllowListEntryGraphQLField(
        "allowListValue"
    )
    created_at: "IpAllowListEntryGraphQLField" = IpAllowListEntryGraphQLField(
        "createdAt"
    )
    id: "IpAllowListEntryGraphQLField" = IpAllowListEntryGraphQLField("id")
    is_active: "IpAllowListEntryGraphQLField" = IpAllowListEntryGraphQLField("isActive")
    name: "IpAllowListEntryGraphQLField" = IpAllowListEntryGraphQLField("name")
    owner: "IpAllowListOwnerUnion" = IpAllowListOwnerUnion("owner")
    updated_at: "IpAllowListEntryGraphQLField" = IpAllowListEntryGraphQLField(
        "updatedAt"
    )

    def fields(
        self, *subfields: Union[IpAllowListEntryGraphQLField, "IpAllowListOwnerUnion"]
    ) -> "IpAllowListEntryFields":
        """Subfields should come from the IpAllowListEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IpAllowListEntryFields":
        self._alias = alias
        return self


class IpAllowListEntryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "IpAllowListEntryEdgeFields":
        return IpAllowListEntryEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "IpAllowListEntryFields":
        return IpAllowListEntryFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "IpAllowListEntryConnectionGraphQLField" = (
        IpAllowListEntryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            IpAllowListEntryConnectionGraphQLField,
            "IpAllowListEntryEdgeFields",
            "IpAllowListEntryFields",
            "PageInfoFields",
        ]
    ) -> "IpAllowListEntryConnectionFields":
        """Subfields should come from the IpAllowListEntryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IpAllowListEntryConnectionFields":
        self._alias = alias
        return self


class IpAllowListEntryEdgeFields(GraphQLField):
    cursor: "IpAllowListEntryEdgeGraphQLField" = IpAllowListEntryEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "IpAllowListEntryFields":
        return IpAllowListEntryFields("node")

    def fields(
        self,
        *subfields: Union[IpAllowListEntryEdgeGraphQLField, "IpAllowListEntryFields"]
    ) -> "IpAllowListEntryEdgeFields":
        """Subfields should come from the IpAllowListEntryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IpAllowListEntryEdgeFields":
        self._alias = alias
        return self


class IssueFields(GraphQLField):
    active_lock_reason: "IssueGraphQLField" = IssueGraphQLField("activeLockReason")

    @classmethod
    def assigned_actors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "AssigneeConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AssigneeConnectionFields("assigned_actors", arguments=cleared_arguments)

    @classmethod
    def assignees(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("assignees", arguments=cleared_arguments)

    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "IssueGraphQLField" = IssueGraphQLField("authorAssociation")
    body: "IssueGraphQLField" = IssueGraphQLField("body")
    body_html: "IssueGraphQLField" = IssueGraphQLField("bodyHTML")
    body_resource_path: "IssueGraphQLField" = IssueGraphQLField("bodyResourcePath")
    body_text: "IssueGraphQLField" = IssueGraphQLField("bodyText")
    body_url: "IssueGraphQLField" = IssueGraphQLField("bodyUrl")
    closed: "IssueGraphQLField" = IssueGraphQLField("closed")
    closed_at: "IssueGraphQLField" = IssueGraphQLField("closedAt")

    @classmethod
    def closed_by_pull_requests_references(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_closed_prs: Optional[bool] = None,
        last: Optional[int] = None,
        order_by_state: Optional[bool] = None,
        user_linked_only: Optional[bool] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeClosedPrs": {"type": "Boolean", "value": include_closed_prs},
            "last": {"type": "Int", "value": last},
            "orderByState": {"type": "Boolean", "value": order_by_state},
            "userLinkedOnly": {"type": "Boolean", "value": user_linked_only},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields(
            "closed_by_pull_requests_references", arguments=cleared_arguments
        )

    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueCommentOrder] = None
    ) -> "IssueCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueCommentOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueCommentConnectionFields("comments", arguments=cleared_arguments)

    created_at: "IssueGraphQLField" = IssueGraphQLField("createdAt")
    created_via_email: "IssueGraphQLField" = IssueGraphQLField("createdViaEmail")
    database_id: "IssueGraphQLField" = IssueGraphQLField("databaseId")

    @classmethod
    def duplicate_of(cls) -> "IssueFields":
        return IssueFields("duplicate_of")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    full_database_id: "IssueGraphQLField" = IssueGraphQLField("fullDatabaseId")

    @classmethod
    def hovercard(
        cls, *, include_notification_contexts: Optional[bool] = None
    ) -> "HovercardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeNotificationContexts": {
                "type": "Boolean",
                "value": include_notification_contexts,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HovercardFields("hovercard", arguments=cleared_arguments)

    id: "IssueGraphQLField" = IssueGraphQLField("id")
    includes_created_edit: "IssueGraphQLField" = IssueGraphQLField(
        "includesCreatedEdit"
    )
    is_pinned: "IssueGraphQLField" = IssueGraphQLField("isPinned")
    is_read_by_viewer: "IssueGraphQLField" = IssueGraphQLField("isReadByViewer")

    @classmethod
    def issue_type(cls) -> "IssueTypeFields":
        return IssueTypeFields("issue_type")

    @classmethod
    def labels(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[LabelOrder] = None
    ) -> "LabelConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "LabelOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelConnectionFields("labels", arguments=cleared_arguments)

    last_edited_at: "IssueGraphQLField" = IssueGraphQLField("lastEditedAt")

    @classmethod
    def linked_branches(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "LinkedBranchConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LinkedBranchConnectionFields(
            "linked_branches", arguments=cleared_arguments
        )

    locked: "IssueGraphQLField" = IssueGraphQLField("locked")

    @classmethod
    def milestone(cls) -> "MilestoneFields":
        return MilestoneFields("milestone")

    number: "IssueGraphQLField" = IssueGraphQLField("number")

    @classmethod
    def parent(cls) -> "IssueFields":
        return IssueFields("parent")

    @classmethod
    def participants(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("participants", arguments=cleared_arguments)

    @classmethod
    def project_cards(
        cls,
        *,
        after: Optional[str] = None,
        archived_states: Optional[ProjectCardArchivedState] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectCardConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "archivedStates": {
                "type": "ProjectCardArchivedState",
                "value": archived_states,
            },
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectCardConnectionFields("project_cards", arguments=cleared_arguments)

    @classmethod
    def project_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_archived: Optional[bool] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeArchived": {"type": "Boolean", "value": include_archived},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ItemConnectionFields(
            "project_items", arguments=cleared_arguments
        )

    @classmethod
    def project_v_2(cls, number: int) -> "ProjectV2Fields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2Fields("project_v_2", arguments=cleared_arguments)

    @classmethod
    def projects_v_2(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        min_permission_level: Optional[ProjectV2PermissionLevel] = None,
        order_by: Optional[ProjectV2Order] = None,
        query: Optional[str] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "minPermissionLevel": {
                "type": "ProjectV2PermissionLevel",
                "value": min_permission_level,
            },
            "orderBy": {"type": "ProjectV2Order", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("projects_v_2", arguments=cleared_arguments)

    published_at: "IssueGraphQLField" = IssueGraphQLField("publishedAt")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "IssueGraphQLField" = IssueGraphQLField("resourcePath")
    state: "IssueGraphQLField" = IssueGraphQLField("state")

    @classmethod
    def state_reason(
        cls, *, enable_duplicate: Optional[bool] = None
    ) -> "IssueGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "enableDuplicate": {"type": "Boolean", "value": enable_duplicate}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueGraphQLField("state_reason", arguments=cleared_arguments)

    @classmethod
    def sub_issues(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields("sub_issues", arguments=cleared_arguments)

    @classmethod
    def sub_issues_summary(cls) -> "SubIssuesSummaryFields":
        return SubIssuesSummaryFields("sub_issues_summary")

    @classmethod
    def suggested_actors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        query: Optional[str] = None
    ) -> "AssigneeConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AssigneeConnectionFields("suggested_actors", arguments=cleared_arguments)

    @classmethod
    def timeline(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        since: Optional[Any] = None
    ) -> "IssueTimelineConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "since": {"type": "DateTime", "value": since},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueTimelineConnectionFields("timeline", arguments=cleared_arguments)

    @classmethod
    def timeline_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        item_types: Optional[IssueTimelineItemsItemType] = None,
        last: Optional[int] = None,
        since: Optional[Any] = None,
        skip: Optional[int] = None
    ) -> "IssueTimelineItemsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "itemTypes": {"type": "IssueTimelineItemsItemType", "value": item_types},
            "last": {"type": "Int", "value": last},
            "since": {"type": "DateTime", "value": since},
            "skip": {"type": "Int", "value": skip},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueTimelineItemsConnectionFields(
            "timeline_items", arguments=cleared_arguments
        )

    title: "IssueGraphQLField" = IssueGraphQLField("title")
    title_html: "IssueGraphQLField" = IssueGraphQLField("titleHTML")

    @classmethod
    def tracked_in_issues(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields("tracked_in_issues", arguments=cleared_arguments)

    @classmethod
    def tracked_issues(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields("tracked_issues", arguments=cleared_arguments)

    @classmethod
    def tracked_issues_count(
        cls, *, states: Optional[TrackedIssueStates] = None
    ) -> "IssueGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "states": {"type": "TrackedIssueStates", "value": states}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueGraphQLField("tracked_issues_count", arguments=cleared_arguments)

    updated_at: "IssueGraphQLField" = IssueGraphQLField("updatedAt")
    url: "IssueGraphQLField" = IssueGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_close: "IssueGraphQLField" = IssueGraphQLField("viewerCanClose")
    viewer_can_delete: "IssueGraphQLField" = IssueGraphQLField("viewerCanDelete")
    viewer_can_label: "IssueGraphQLField" = IssueGraphQLField("viewerCanLabel")
    viewer_can_react: "IssueGraphQLField" = IssueGraphQLField("viewerCanReact")
    viewer_can_reopen: "IssueGraphQLField" = IssueGraphQLField("viewerCanReopen")
    viewer_can_subscribe: "IssueGraphQLField" = IssueGraphQLField("viewerCanSubscribe")
    viewer_can_update: "IssueGraphQLField" = IssueGraphQLField("viewerCanUpdate")
    viewer_cannot_update_reasons: "IssueGraphQLField" = IssueGraphQLField(
        "viewerCannotUpdateReasons"
    )
    viewer_did_author: "IssueGraphQLField" = IssueGraphQLField("viewerDidAuthor")
    viewer_subscription: "IssueGraphQLField" = IssueGraphQLField("viewerSubscription")
    viewer_thread_subscription_form_action: "IssueGraphQLField" = IssueGraphQLField(
        "viewerThreadSubscriptionFormAction"
    )
    viewer_thread_subscription_status: "IssueGraphQLField" = IssueGraphQLField(
        "viewerThreadSubscriptionStatus"
    )

    def fields(
        self,
        *subfields: Union[
            IssueGraphQLField,
            "ActorInterface",
            "AssigneeConnectionFields",
            "HovercardFields",
            "IssueCommentConnectionFields",
            "IssueConnectionFields",
            "IssueFields",
            "IssueTimelineConnectionFields",
            "IssueTimelineItemsConnectionFields",
            "IssueTypeFields",
            "LabelConnectionFields",
            "LinkedBranchConnectionFields",
            "MilestoneFields",
            "ProjectCardConnectionFields",
            "ProjectV2ConnectionFields",
            "ProjectV2Fields",
            "ProjectV2ItemConnectionFields",
            "PullRequestConnectionFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "RepositoryFields",
            "SubIssuesSummaryFields",
            "UserConnectionFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "IssueFields":
        """Subfields should come from the IssueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueFields":
        self._alias = alias
        return self


class IssueCommentFields(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "authorAssociation"
    )
    body: "IssueCommentGraphQLField" = IssueCommentGraphQLField("body")
    body_html: "IssueCommentGraphQLField" = IssueCommentGraphQLField("bodyHTML")
    body_text: "IssueCommentGraphQLField" = IssueCommentGraphQLField("bodyText")
    created_at: "IssueCommentGraphQLField" = IssueCommentGraphQLField("createdAt")
    created_via_email: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "createdViaEmail"
    )
    database_id: "IssueCommentGraphQLField" = IssueCommentGraphQLField("databaseId")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    full_database_id: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "fullDatabaseId"
    )
    id: "IssueCommentGraphQLField" = IssueCommentGraphQLField("id")
    includes_created_edit: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "includesCreatedEdit"
    )
    is_minimized: "IssueCommentGraphQLField" = IssueCommentGraphQLField("isMinimized")

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    last_edited_at: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "lastEditedAt"
    )
    minimized_reason: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "minimizedReason"
    )
    published_at: "IssueCommentGraphQLField" = IssueCommentGraphQLField("publishedAt")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "IssueCommentGraphQLField" = IssueCommentGraphQLField("resourcePath")
    updated_at: "IssueCommentGraphQLField" = IssueCommentGraphQLField("updatedAt")
    url: "IssueCommentGraphQLField" = IssueCommentGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_delete: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "viewerCanDelete"
    )
    viewer_can_minimize: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "viewerCanMinimize"
    )
    viewer_can_react: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "viewerCanReact"
    )
    viewer_can_update: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "viewerCanUpdate"
    )
    viewer_cannot_update_reasons: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "viewerCannotUpdateReasons"
    )
    viewer_did_author: "IssueCommentGraphQLField" = IssueCommentGraphQLField(
        "viewerDidAuthor"
    )

    def fields(
        self,
        *subfields: Union[
            IssueCommentGraphQLField,
            "ActorInterface",
            "IssueFields",
            "PullRequestFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "RepositoryFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "IssueCommentFields":
        """Subfields should come from the IssueCommentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueCommentFields":
        self._alias = alias
        return self


class IssueCommentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "IssueCommentEdgeFields":
        return IssueCommentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "IssueCommentFields":
        return IssueCommentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "IssueCommentConnectionGraphQLField" = (
        IssueCommentConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            IssueCommentConnectionGraphQLField,
            "IssueCommentEdgeFields",
            "IssueCommentFields",
            "PageInfoFields",
        ]
    ) -> "IssueCommentConnectionFields":
        """Subfields should come from the IssueCommentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueCommentConnectionFields":
        self._alias = alias
        return self


class IssueCommentEdgeFields(GraphQLField):
    cursor: "IssueCommentEdgeGraphQLField" = IssueCommentEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "IssueCommentFields":
        return IssueCommentFields("node")

    def fields(
        self, *subfields: Union[IssueCommentEdgeGraphQLField, "IssueCommentFields"]
    ) -> "IssueCommentEdgeFields":
        """Subfields should come from the IssueCommentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueCommentEdgeFields":
        self._alias = alias
        return self


class IssueConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "IssueEdgeFields":
        return IssueEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "IssueFields":
        return IssueFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "IssueConnectionGraphQLField" = IssueConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            IssueConnectionGraphQLField,
            "IssueEdgeFields",
            "IssueFields",
            "PageInfoFields",
        ]
    ) -> "IssueConnectionFields":
        """Subfields should come from the IssueConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueConnectionFields":
        self._alias = alias
        return self


class IssueContributionsByRepositoryFields(GraphQLField):
    @classmethod
    def contributions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ContributionOrder] = None
    ) -> "CreatedIssueContributionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ContributionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatedIssueContributionConnectionFields(
            "contributions", arguments=cleared_arguments
        )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            IssueContributionsByRepositoryGraphQLField,
            "CreatedIssueContributionConnectionFields",
            "RepositoryFields",
        ]
    ) -> "IssueContributionsByRepositoryFields":
        """Subfields should come from the IssueContributionsByRepositoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueContributionsByRepositoryFields":
        self._alias = alias
        return self


class IssueEdgeFields(GraphQLField):
    cursor: "IssueEdgeGraphQLField" = IssueEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "IssueFields":
        return IssueFields("node")

    def fields(
        self, *subfields: Union[IssueEdgeGraphQLField, "IssueFields"]
    ) -> "IssueEdgeFields":
        """Subfields should come from the IssueEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueEdgeFields":
        self._alias = alias
        return self


class IssueTemplateFields(GraphQLField):
    about: "IssueTemplateGraphQLField" = IssueTemplateGraphQLField("about")

    @classmethod
    def assignees(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("assignees", arguments=cleared_arguments)

    body: "IssueTemplateGraphQLField" = IssueTemplateGraphQLField("body")
    filename: "IssueTemplateGraphQLField" = IssueTemplateGraphQLField("filename")

    @classmethod
    def labels(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[LabelOrder] = None
    ) -> "LabelConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "LabelOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelConnectionFields("labels", arguments=cleared_arguments)

    name: "IssueTemplateGraphQLField" = IssueTemplateGraphQLField("name")
    title: "IssueTemplateGraphQLField" = IssueTemplateGraphQLField("title")

    @classmethod
    def type(cls) -> "IssueTypeFields":
        return IssueTypeFields("type")

    def fields(
        self,
        *subfields: Union[
            IssueTemplateGraphQLField,
            "IssueTypeFields",
            "LabelConnectionFields",
            "UserConnectionFields",
        ]
    ) -> "IssueTemplateFields":
        """Subfields should come from the IssueTemplateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTemplateFields":
        self._alias = alias
        return self


class IssueTimelineConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "IssueTimelineItemEdgeFields":
        return IssueTimelineItemEdgeFields("edges")

    nodes: "IssueTimelineItemUnion" = IssueTimelineItemUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "IssueTimelineConnectionGraphQLField" = (
        IssueTimelineConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            IssueTimelineConnectionGraphQLField,
            "IssueTimelineItemEdgeFields",
            "IssueTimelineItemUnion",
            "PageInfoFields",
        ]
    ) -> "IssueTimelineConnectionFields":
        """Subfields should come from the IssueTimelineConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTimelineConnectionFields":
        self._alias = alias
        return self


class IssueTimelineItemEdgeFields(GraphQLField):
    cursor: "IssueTimelineItemEdgeGraphQLField" = IssueTimelineItemEdgeGraphQLField(
        "cursor"
    )
    node: "IssueTimelineItemUnion" = IssueTimelineItemUnion("node")

    def fields(
        self,
        *subfields: Union[IssueTimelineItemEdgeGraphQLField, "IssueTimelineItemUnion"]
    ) -> "IssueTimelineItemEdgeFields":
        """Subfields should come from the IssueTimelineItemEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTimelineItemEdgeFields":
        self._alias = alias
        return self


class IssueTimelineItemsConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "IssueTimelineItemsEdgeFields":
        return IssueTimelineItemsEdgeFields("edges")

    filtered_count: "IssueTimelineItemsConnectionGraphQLField" = (
        IssueTimelineItemsConnectionGraphQLField("filteredCount")
    )
    nodes: "IssueTimelineItemsUnion" = IssueTimelineItemsUnion("nodes")
    page_count: "IssueTimelineItemsConnectionGraphQLField" = (
        IssueTimelineItemsConnectionGraphQLField("pageCount")
    )

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "IssueTimelineItemsConnectionGraphQLField" = (
        IssueTimelineItemsConnectionGraphQLField("totalCount")
    )
    updated_at: "IssueTimelineItemsConnectionGraphQLField" = (
        IssueTimelineItemsConnectionGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            IssueTimelineItemsConnectionGraphQLField,
            "IssueTimelineItemsEdgeFields",
            "IssueTimelineItemsUnion",
            "PageInfoFields",
        ]
    ) -> "IssueTimelineItemsConnectionFields":
        """Subfields should come from the IssueTimelineItemsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTimelineItemsConnectionFields":
        self._alias = alias
        return self


class IssueTimelineItemsEdgeFields(GraphQLField):
    cursor: "IssueTimelineItemsEdgeGraphQLField" = IssueTimelineItemsEdgeGraphQLField(
        "cursor"
    )
    node: "IssueTimelineItemsUnion" = IssueTimelineItemsUnion("node")

    def fields(
        self,
        *subfields: Union[IssueTimelineItemsEdgeGraphQLField, "IssueTimelineItemsUnion"]
    ) -> "IssueTimelineItemsEdgeFields":
        """Subfields should come from the IssueTimelineItemsEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTimelineItemsEdgeFields":
        self._alias = alias
        return self


class IssueTypeFields(GraphQLField):
    color: "IssueTypeGraphQLField" = IssueTypeGraphQLField("color")
    description: "IssueTypeGraphQLField" = IssueTypeGraphQLField("description")
    id: "IssueTypeGraphQLField" = IssueTypeGraphQLField("id")
    is_enabled: "IssueTypeGraphQLField" = IssueTypeGraphQLField("isEnabled")
    is_private: "IssueTypeGraphQLField" = IssueTypeGraphQLField("isPrivate")

    @classmethod
    def issues(
        cls,
        repository_id: str,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by: Optional[IssueFilters] = None,
        first: Optional[int] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[IssueState] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterBy": {"type": "IssueFilters", "value": filter_by},
            "first": {"type": "Int", "value": first},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "repositoryId": {"type": "ID!", "value": repository_id},
            "states": {"type": "IssueState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields("issues", arguments=cleared_arguments)

    name: "IssueTypeGraphQLField" = IssueTypeGraphQLField("name")

    def fields(
        self, *subfields: Union[IssueTypeGraphQLField, "IssueConnectionFields"]
    ) -> "IssueTypeFields":
        """Subfields should come from the IssueTypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTypeFields":
        self._alias = alias
        return self


class IssueTypeAddedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "IssueTypeAddedEventGraphQLField" = IssueTypeAddedEventGraphQLField(
        "createdAt"
    )
    id: "IssueTypeAddedEventGraphQLField" = IssueTypeAddedEventGraphQLField("id")

    @classmethod
    def issue_type(cls) -> "IssueTypeFields":
        return IssueTypeFields("issue_type")

    def fields(
        self,
        *subfields: Union[
            IssueTypeAddedEventGraphQLField, "ActorInterface", "IssueTypeFields"
        ]
    ) -> "IssueTypeAddedEventFields":
        """Subfields should come from the IssueTypeAddedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTypeAddedEventFields":
        self._alias = alias
        return self


class IssueTypeChangedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "IssueTypeChangedEventGraphQLField" = IssueTypeChangedEventGraphQLField(
        "createdAt"
    )
    id: "IssueTypeChangedEventGraphQLField" = IssueTypeChangedEventGraphQLField("id")

    @classmethod
    def issue_type(cls) -> "IssueTypeFields":
        return IssueTypeFields("issue_type")

    @classmethod
    def prev_issue_type(cls) -> "IssueTypeFields":
        return IssueTypeFields("prev_issue_type")

    def fields(
        self,
        *subfields: Union[
            IssueTypeChangedEventGraphQLField, "ActorInterface", "IssueTypeFields"
        ]
    ) -> "IssueTypeChangedEventFields":
        """Subfields should come from the IssueTypeChangedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTypeChangedEventFields":
        self._alias = alias
        return self


class IssueTypeConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "IssueTypeEdgeFields":
        return IssueTypeEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "IssueTypeFields":
        return IssueTypeFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "IssueTypeConnectionGraphQLField" = IssueTypeConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            IssueTypeConnectionGraphQLField,
            "IssueTypeEdgeFields",
            "IssueTypeFields",
            "PageInfoFields",
        ]
    ) -> "IssueTypeConnectionFields":
        """Subfields should come from the IssueTypeConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTypeConnectionFields":
        self._alias = alias
        return self


class IssueTypeEdgeFields(GraphQLField):
    cursor: "IssueTypeEdgeGraphQLField" = IssueTypeEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "IssueTypeFields":
        return IssueTypeFields("node")

    def fields(
        self, *subfields: Union[IssueTypeEdgeGraphQLField, "IssueTypeFields"]
    ) -> "IssueTypeEdgeFields":
        """Subfields should come from the IssueTypeEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTypeEdgeFields":
        self._alias = alias
        return self


class IssueTypeRemovedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "IssueTypeRemovedEventGraphQLField" = IssueTypeRemovedEventGraphQLField(
        "createdAt"
    )
    id: "IssueTypeRemovedEventGraphQLField" = IssueTypeRemovedEventGraphQLField("id")

    @classmethod
    def issue_type(cls) -> "IssueTypeFields":
        return IssueTypeFields("issue_type")

    def fields(
        self,
        *subfields: Union[
            IssueTypeRemovedEventGraphQLField, "ActorInterface", "IssueTypeFields"
        ]
    ) -> "IssueTypeRemovedEventFields":
        """Subfields should come from the IssueTypeRemovedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IssueTypeRemovedEventFields":
        self._alias = alias
        return self


class JoinedGitHubContributionFields(GraphQLField):
    is_restricted: "JoinedGitHubContributionGraphQLField" = (
        JoinedGitHubContributionGraphQLField("isRestricted")
    )
    occurred_at: "JoinedGitHubContributionGraphQLField" = (
        JoinedGitHubContributionGraphQLField("occurredAt")
    )
    resource_path: "JoinedGitHubContributionGraphQLField" = (
        JoinedGitHubContributionGraphQLField("resourcePath")
    )
    url: "JoinedGitHubContributionGraphQLField" = JoinedGitHubContributionGraphQLField(
        "url"
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[JoinedGitHubContributionGraphQLField, "UserFields"]
    ) -> "JoinedGitHubContributionFields":
        """Subfields should come from the JoinedGitHubContributionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JoinedGitHubContributionFields":
        self._alias = alias
        return self


class LabelFields(GraphQLField):
    color: "LabelGraphQLField" = LabelGraphQLField("color")
    created_at: "LabelGraphQLField" = LabelGraphQLField("createdAt")
    description: "LabelGraphQLField" = LabelGraphQLField("description")
    id: "LabelGraphQLField" = LabelGraphQLField("id")
    is_default: "LabelGraphQLField" = LabelGraphQLField("isDefault")

    @classmethod
    def issues(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by: Optional[IssueFilters] = None,
        first: Optional[int] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[IssueState] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterBy": {"type": "IssueFilters", "value": filter_by},
            "first": {"type": "Int", "value": first},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "IssueState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields("issues", arguments=cleared_arguments)

    name: "LabelGraphQLField" = LabelGraphQLField("name")

    @classmethod
    def pull_requests(
        cls,
        *,
        after: Optional[str] = None,
        base_ref_name: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        head_ref_name: Optional[str] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[PullRequestState] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "baseRefName": {"type": "String", "value": base_ref_name},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "headRefName": {"type": "String", "value": head_ref_name},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "PullRequestState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields("pull_requests", arguments=cleared_arguments)

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "LabelGraphQLField" = LabelGraphQLField("resourcePath")
    updated_at: "LabelGraphQLField" = LabelGraphQLField("updatedAt")
    url: "LabelGraphQLField" = LabelGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            LabelGraphQLField,
            "IssueConnectionFields",
            "PullRequestConnectionFields",
            "RepositoryFields",
        ]
    ) -> "LabelFields":
        """Subfields should come from the LabelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelFields":
        self._alias = alias
        return self


class LabelConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "LabelEdgeFields":
        return LabelEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "LabelFields":
        return LabelFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "LabelConnectionGraphQLField" = LabelConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            LabelConnectionGraphQLField,
            "LabelEdgeFields",
            "LabelFields",
            "PageInfoFields",
        ]
    ) -> "LabelConnectionFields":
        """Subfields should come from the LabelConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelConnectionFields":
        self._alias = alias
        return self


class LabelEdgeFields(GraphQLField):
    cursor: "LabelEdgeGraphQLField" = LabelEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "LabelFields":
        return LabelFields("node")

    def fields(
        self, *subfields: Union[LabelEdgeGraphQLField, "LabelFields"]
    ) -> "LabelEdgeFields":
        """Subfields should come from the LabelEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelEdgeFields":
        self._alias = alias
        return self


class LabelableInterface(GraphQLField):
    @classmethod
    def labels(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[LabelOrder] = None
    ) -> "LabelConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "LabelOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelConnectionFields("labels", arguments=cleared_arguments)

    viewer_can_label: "LabelableGraphQLField" = LabelableGraphQLField("viewerCanLabel")

    def fields(
        self, *subfields: Union[LabelableGraphQLField, "LabelConnectionFields"]
    ) -> "LabelableInterface":
        """Subfields should come from the LabelableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "LabelableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class LabeledEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "LabeledEventGraphQLField" = LabeledEventGraphQLField("createdAt")
    id: "LabeledEventGraphQLField" = LabeledEventGraphQLField("id")

    @classmethod
    def label(cls) -> "LabelFields":
        return LabelFields("label")

    @classmethod
    def labelable(cls) -> "LabelableInterface":
        return LabelableInterface("labelable")

    def fields(
        self,
        *subfields: Union[
            LabeledEventGraphQLField,
            "ActorInterface",
            "LabelFields",
            "LabelableInterface",
        ]
    ) -> "LabeledEventFields":
        """Subfields should come from the LabeledEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabeledEventFields":
        self._alias = alias
        return self


class LanguageFields(GraphQLField):
    color: "LanguageGraphQLField" = LanguageGraphQLField("color")
    id: "LanguageGraphQLField" = LanguageGraphQLField("id")
    name: "LanguageGraphQLField" = LanguageGraphQLField("name")

    def fields(self, *subfields: LanguageGraphQLField) -> "LanguageFields":
        """Subfields should come from the LanguageFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LanguageFields":
        self._alias = alias
        return self


class LanguageConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "LanguageEdgeFields":
        return LanguageEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "LanguageFields":
        return LanguageFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "LanguageConnectionGraphQLField" = LanguageConnectionGraphQLField(
        "totalCount"
    )
    total_size: "LanguageConnectionGraphQLField" = LanguageConnectionGraphQLField(
        "totalSize"
    )

    def fields(
        self,
        *subfields: Union[
            LanguageConnectionGraphQLField,
            "LanguageEdgeFields",
            "LanguageFields",
            "PageInfoFields",
        ]
    ) -> "LanguageConnectionFields":
        """Subfields should come from the LanguageConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LanguageConnectionFields":
        self._alias = alias
        return self


class LanguageEdgeFields(GraphQLField):
    cursor: "LanguageEdgeGraphQLField" = LanguageEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "LanguageFields":
        return LanguageFields("node")

    size: "LanguageEdgeGraphQLField" = LanguageEdgeGraphQLField("size")

    def fields(
        self, *subfields: Union[LanguageEdgeGraphQLField, "LanguageFields"]
    ) -> "LanguageEdgeFields":
        """Subfields should come from the LanguageEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LanguageEdgeFields":
        self._alias = alias
        return self


class LicenseFields(GraphQLField):
    body: "LicenseGraphQLField" = LicenseGraphQLField("body")

    @classmethod
    def conditions(cls) -> "LicenseRuleFields":
        return LicenseRuleFields("conditions")

    description: "LicenseGraphQLField" = LicenseGraphQLField("description")
    featured: "LicenseGraphQLField" = LicenseGraphQLField("featured")
    hidden: "LicenseGraphQLField" = LicenseGraphQLField("hidden")
    id: "LicenseGraphQLField" = LicenseGraphQLField("id")
    implementation: "LicenseGraphQLField" = LicenseGraphQLField("implementation")
    key: "LicenseGraphQLField" = LicenseGraphQLField("key")

    @classmethod
    def limitations(cls) -> "LicenseRuleFields":
        return LicenseRuleFields("limitations")

    name: "LicenseGraphQLField" = LicenseGraphQLField("name")
    nickname: "LicenseGraphQLField" = LicenseGraphQLField("nickname")

    @classmethod
    def permissions(cls) -> "LicenseRuleFields":
        return LicenseRuleFields("permissions")

    pseudo_license: "LicenseGraphQLField" = LicenseGraphQLField("pseudoLicense")
    spdx_id: "LicenseGraphQLField" = LicenseGraphQLField("spdxId")
    url: "LicenseGraphQLField" = LicenseGraphQLField("url")

    def fields(
        self, *subfields: Union[LicenseGraphQLField, "LicenseRuleFields"]
    ) -> "LicenseFields":
        """Subfields should come from the LicenseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LicenseFields":
        self._alias = alias
        return self


class LicenseRuleFields(GraphQLField):
    description: "LicenseRuleGraphQLField" = LicenseRuleGraphQLField("description")
    key: "LicenseRuleGraphQLField" = LicenseRuleGraphQLField("key")
    label: "LicenseRuleGraphQLField" = LicenseRuleGraphQLField("label")

    def fields(self, *subfields: LicenseRuleGraphQLField) -> "LicenseRuleFields":
        """Subfields should come from the LicenseRuleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LicenseRuleFields":
        self._alias = alias
        return self


class LinkProjectV2ToRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "LinkProjectV2ToRepositoryPayloadGraphQLField" = (
        LinkProjectV2ToRepositoryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            LinkProjectV2ToRepositoryPayloadGraphQLField, "RepositoryFields"
        ]
    ) -> "LinkProjectV2ToRepositoryPayloadFields":
        """Subfields should come from the LinkProjectV2ToRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkProjectV2ToRepositoryPayloadFields":
        self._alias = alias
        return self


class LinkProjectV2ToTeamPayloadFields(GraphQLField):
    client_mutation_id: "LinkProjectV2ToTeamPayloadGraphQLField" = (
        LinkProjectV2ToTeamPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    def fields(
        self, *subfields: Union[LinkProjectV2ToTeamPayloadGraphQLField, "TeamFields"]
    ) -> "LinkProjectV2ToTeamPayloadFields":
        """Subfields should come from the LinkProjectV2ToTeamPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkProjectV2ToTeamPayloadFields":
        self._alias = alias
        return self


class LinkRepositoryToProjectPayloadFields(GraphQLField):
    client_mutation_id: "LinkRepositoryToProjectPayloadGraphQLField" = (
        LinkRepositoryToProjectPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            LinkRepositoryToProjectPayloadGraphQLField,
            "ProjectFields",
            "RepositoryFields",
        ]
    ) -> "LinkRepositoryToProjectPayloadFields":
        """Subfields should come from the LinkRepositoryToProjectPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkRepositoryToProjectPayloadFields":
        self._alias = alias
        return self


class LinkedBranchFields(GraphQLField):
    id: "LinkedBranchGraphQLField" = LinkedBranchGraphQLField("id")

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    def fields(
        self, *subfields: Union[LinkedBranchGraphQLField, "RefFields"]
    ) -> "LinkedBranchFields":
        """Subfields should come from the LinkedBranchFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkedBranchFields":
        self._alias = alias
        return self


class LinkedBranchConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "LinkedBranchEdgeFields":
        return LinkedBranchEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "LinkedBranchFields":
        return LinkedBranchFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "LinkedBranchConnectionGraphQLField" = (
        LinkedBranchConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            LinkedBranchConnectionGraphQLField,
            "LinkedBranchEdgeFields",
            "LinkedBranchFields",
            "PageInfoFields",
        ]
    ) -> "LinkedBranchConnectionFields":
        """Subfields should come from the LinkedBranchConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkedBranchConnectionFields":
        self._alias = alias
        return self


class LinkedBranchEdgeFields(GraphQLField):
    cursor: "LinkedBranchEdgeGraphQLField" = LinkedBranchEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "LinkedBranchFields":
        return LinkedBranchFields("node")

    def fields(
        self, *subfields: Union[LinkedBranchEdgeGraphQLField, "LinkedBranchFields"]
    ) -> "LinkedBranchEdgeFields":
        """Subfields should come from the LinkedBranchEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkedBranchEdgeFields":
        self._alias = alias
        return self


class LockLockablePayloadFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    client_mutation_id: "LockLockablePayloadGraphQLField" = (
        LockLockablePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def locked_record(cls) -> "LockableInterface":
        return LockableInterface("locked_record")

    def fields(
        self,
        *subfields: Union[
            LockLockablePayloadGraphQLField, "ActorInterface", "LockableInterface"
        ]
    ) -> "LockLockablePayloadFields":
        """Subfields should come from the LockLockablePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LockLockablePayloadFields":
        self._alias = alias
        return self


class LockableInterface(GraphQLField):
    active_lock_reason: "LockableGraphQLField" = LockableGraphQLField(
        "activeLockReason"
    )
    locked: "LockableGraphQLField" = LockableGraphQLField("locked")

    def fields(self, *subfields: LockableGraphQLField) -> "LockableInterface":
        """Subfields should come from the LockableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LockableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "LockableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class LockedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "LockedEventGraphQLField" = LockedEventGraphQLField("createdAt")
    id: "LockedEventGraphQLField" = LockedEventGraphQLField("id")
    lock_reason: "LockedEventGraphQLField" = LockedEventGraphQLField("lockReason")

    @classmethod
    def lockable(cls) -> "LockableInterface":
        return LockableInterface("lockable")

    def fields(
        self,
        *subfields: Union[
            LockedEventGraphQLField, "ActorInterface", "LockableInterface"
        ]
    ) -> "LockedEventFields":
        """Subfields should come from the LockedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LockedEventFields":
        self._alias = alias
        return self


class MannequinFields(GraphQLField):
    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "MannequinGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MannequinGraphQLField("avatar_url", arguments=cleared_arguments)

    @classmethod
    def claimant(cls) -> "UserFields":
        return UserFields("claimant")

    created_at: "MannequinGraphQLField" = MannequinGraphQLField("createdAt")
    database_id: "MannequinGraphQLField" = MannequinGraphQLField("databaseId")
    email: "MannequinGraphQLField" = MannequinGraphQLField("email")
    id: "MannequinGraphQLField" = MannequinGraphQLField("id")
    login: "MannequinGraphQLField" = MannequinGraphQLField("login")
    resource_path: "MannequinGraphQLField" = MannequinGraphQLField("resourcePath")
    updated_at: "MannequinGraphQLField" = MannequinGraphQLField("updatedAt")
    url: "MannequinGraphQLField" = MannequinGraphQLField("url")

    def fields(
        self, *subfields: Union[MannequinGraphQLField, "UserFields"]
    ) -> "MannequinFields":
        """Subfields should come from the MannequinFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MannequinFields":
        self._alias = alias
        return self


class MannequinConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "MannequinEdgeFields":
        return MannequinEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "MannequinFields":
        return MannequinFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "MannequinConnectionGraphQLField" = MannequinConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            MannequinConnectionGraphQLField,
            "MannequinEdgeFields",
            "MannequinFields",
            "PageInfoFields",
        ]
    ) -> "MannequinConnectionFields":
        """Subfields should come from the MannequinConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MannequinConnectionFields":
        self._alias = alias
        return self


class MannequinEdgeFields(GraphQLField):
    cursor: "MannequinEdgeGraphQLField" = MannequinEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "MannequinFields":
        return MannequinFields("node")

    def fields(
        self, *subfields: Union[MannequinEdgeGraphQLField, "MannequinFields"]
    ) -> "MannequinEdgeFields":
        """Subfields should come from the MannequinEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MannequinEdgeFields":
        self._alias = alias
        return self


class MarkDiscussionCommentAsAnswerPayloadFields(GraphQLField):
    client_mutation_id: "MarkDiscussionCommentAsAnswerPayloadGraphQLField" = (
        MarkDiscussionCommentAsAnswerPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    def fields(
        self,
        *subfields: Union[
            MarkDiscussionCommentAsAnswerPayloadGraphQLField, "DiscussionFields"
        ]
    ) -> "MarkDiscussionCommentAsAnswerPayloadFields":
        """Subfields should come from the MarkDiscussionCommentAsAnswerPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkDiscussionCommentAsAnswerPayloadFields":
        self._alias = alias
        return self


class MarkFileAsViewedPayloadFields(GraphQLField):
    client_mutation_id: "MarkFileAsViewedPayloadGraphQLField" = (
        MarkFileAsViewedPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[MarkFileAsViewedPayloadGraphQLField, "PullRequestFields"]
    ) -> "MarkFileAsViewedPayloadFields":
        """Subfields should come from the MarkFileAsViewedPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkFileAsViewedPayloadFields":
        self._alias = alias
        return self


class MarkProjectV2AsTemplatePayloadFields(GraphQLField):
    client_mutation_id: "MarkProjectV2AsTemplatePayloadGraphQLField" = (
        MarkProjectV2AsTemplatePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_v_2(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project_v_2")

    def fields(
        self,
        *subfields: Union[MarkProjectV2AsTemplatePayloadGraphQLField, "ProjectV2Fields"]
    ) -> "MarkProjectV2AsTemplatePayloadFields":
        """Subfields should come from the MarkProjectV2AsTemplatePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkProjectV2AsTemplatePayloadFields":
        self._alias = alias
        return self


class MarkPullRequestReadyForReviewPayloadFields(GraphQLField):
    client_mutation_id: "MarkPullRequestReadyForReviewPayloadGraphQLField" = (
        MarkPullRequestReadyForReviewPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            MarkPullRequestReadyForReviewPayloadGraphQLField, "PullRequestFields"
        ]
    ) -> "MarkPullRequestReadyForReviewPayloadFields":
        """Subfields should come from the MarkPullRequestReadyForReviewPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkPullRequestReadyForReviewPayloadFields":
        self._alias = alias
        return self


class MarkedAsDuplicateEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    canonical: "IssueOrPullRequestUnion" = IssueOrPullRequestUnion("canonical")
    created_at: "MarkedAsDuplicateEventGraphQLField" = (
        MarkedAsDuplicateEventGraphQLField("createdAt")
    )
    duplicate: "IssueOrPullRequestUnion" = IssueOrPullRequestUnion("duplicate")
    id: "MarkedAsDuplicateEventGraphQLField" = MarkedAsDuplicateEventGraphQLField("id")
    is_cross_repository: "MarkedAsDuplicateEventGraphQLField" = (
        MarkedAsDuplicateEventGraphQLField("isCrossRepository")
    )

    def fields(
        self,
        *subfields: Union[
            MarkedAsDuplicateEventGraphQLField,
            "ActorInterface",
            "IssueOrPullRequestUnion",
        ]
    ) -> "MarkedAsDuplicateEventFields":
        """Subfields should come from the MarkedAsDuplicateEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkedAsDuplicateEventFields":
        self._alias = alias
        return self


class MarketplaceCategoryFields(GraphQLField):
    description: "MarketplaceCategoryGraphQLField" = MarketplaceCategoryGraphQLField(
        "description"
    )
    how_it_works: "MarketplaceCategoryGraphQLField" = MarketplaceCategoryGraphQLField(
        "howItWorks"
    )
    id: "MarketplaceCategoryGraphQLField" = MarketplaceCategoryGraphQLField("id")
    name: "MarketplaceCategoryGraphQLField" = MarketplaceCategoryGraphQLField("name")
    primary_listing_count: "MarketplaceCategoryGraphQLField" = (
        MarketplaceCategoryGraphQLField("primaryListingCount")
    )
    resource_path: "MarketplaceCategoryGraphQLField" = MarketplaceCategoryGraphQLField(
        "resourcePath"
    )
    secondary_listing_count: "MarketplaceCategoryGraphQLField" = (
        MarketplaceCategoryGraphQLField("secondaryListingCount")
    )
    slug: "MarketplaceCategoryGraphQLField" = MarketplaceCategoryGraphQLField("slug")
    url: "MarketplaceCategoryGraphQLField" = MarketplaceCategoryGraphQLField("url")

    def fields(
        self, *subfields: MarketplaceCategoryGraphQLField
    ) -> "MarketplaceCategoryFields":
        """Subfields should come from the MarketplaceCategoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarketplaceCategoryFields":
        self._alias = alias
        return self


class MarketplaceListingFields(GraphQLField):
    @classmethod
    def app(cls) -> "AppFields":
        return AppFields("app")

    company_url: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "companyUrl"
    )
    configuration_resource_path: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("configurationResourcePath")
    )
    configuration_url: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("configurationUrl")
    )
    documentation_url: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("documentationUrl")
    )
    extended_description: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("extendedDescription")
    )
    extended_description_html: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("extendedDescriptionHTML")
    )
    full_description: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "fullDescription"
    )
    full_description_html: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("fullDescriptionHTML")
    )
    has_published_free_trial_plans: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("hasPublishedFreeTrialPlans")
    )
    has_terms_of_service: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("hasTermsOfService")
    )
    has_verified_owner: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("hasVerifiedOwner")
    )
    how_it_works: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "howItWorks"
    )
    how_it_works_html: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("howItWorksHTML")
    )
    id: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField("id")
    installation_url: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "installationUrl"
    )
    installed_for_viewer: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("installedForViewer")
    )
    is_archived: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "isArchived"
    )
    is_draft: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "isDraft"
    )
    is_paid: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField("isPaid")
    is_public: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "isPublic"
    )
    is_rejected: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "isRejected"
    )
    is_unverified: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "isUnverified"
    )
    is_unverified_pending: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("isUnverifiedPending")
    )
    is_verification_pending_from_draft: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("isVerificationPendingFromDraft")
    )
    is_verification_pending_from_unverified: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("isVerificationPendingFromUnverified")
    )
    is_verified: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "isVerified"
    )
    logo_background_color: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("logoBackgroundColor")
    )

    @classmethod
    def logo_url(
        cls, *, size: Optional[int] = None
    ) -> "MarketplaceListingGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarketplaceListingGraphQLField("logo_url", arguments=cleared_arguments)

    name: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField("name")
    normalized_short_description: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("normalizedShortDescription")
    )
    pricing_url: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "pricingUrl"
    )

    @classmethod
    def primary_category(cls) -> "MarketplaceCategoryFields":
        return MarketplaceCategoryFields("primary_category")

    privacy_policy_url: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("privacyPolicyUrl")
    )
    resource_path: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "resourcePath"
    )
    screenshot_urls: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "screenshotUrls"
    )

    @classmethod
    def secondary_category(cls) -> "MarketplaceCategoryFields":
        return MarketplaceCategoryFields("secondary_category")

    short_description: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("shortDescription")
    )
    slug: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField("slug")
    status_url: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "statusUrl"
    )
    support_email: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "supportEmail"
    )
    support_url: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "supportUrl"
    )
    terms_of_service_url: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("termsOfServiceUrl")
    )
    url: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField("url")
    viewer_can_add_plans: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerCanAddPlans")
    )
    viewer_can_approve: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerCanApprove")
    )
    viewer_can_delist: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerCanDelist")
    )
    viewer_can_edit: "MarketplaceListingGraphQLField" = MarketplaceListingGraphQLField(
        "viewerCanEdit"
    )
    viewer_can_edit_categories: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerCanEditCategories")
    )
    viewer_can_edit_plans: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerCanEditPlans")
    )
    viewer_can_redraft: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerCanRedraft")
    )
    viewer_can_reject: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerCanReject")
    )
    viewer_can_request_approval: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerCanRequestApproval")
    )
    viewer_has_purchased: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerHasPurchased")
    )
    viewer_has_purchased_for_all_organizations: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerHasPurchasedForAllOrganizations")
    )
    viewer_is_listing_admin: "MarketplaceListingGraphQLField" = (
        MarketplaceListingGraphQLField("viewerIsListingAdmin")
    )

    def fields(
        self,
        *subfields: Union[
            MarketplaceListingGraphQLField, "AppFields", "MarketplaceCategoryFields"
        ]
    ) -> "MarketplaceListingFields":
        """Subfields should come from the MarketplaceListingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarketplaceListingFields":
        self._alias = alias
        return self


class MarketplaceListingConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "MarketplaceListingEdgeFields":
        return MarketplaceListingEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "MarketplaceListingFields":
        return MarketplaceListingFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "MarketplaceListingConnectionGraphQLField" = (
        MarketplaceListingConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            MarketplaceListingConnectionGraphQLField,
            "MarketplaceListingEdgeFields",
            "MarketplaceListingFields",
            "PageInfoFields",
        ]
    ) -> "MarketplaceListingConnectionFields":
        """Subfields should come from the MarketplaceListingConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarketplaceListingConnectionFields":
        self._alias = alias
        return self


class MarketplaceListingEdgeFields(GraphQLField):
    cursor: "MarketplaceListingEdgeGraphQLField" = MarketplaceListingEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "MarketplaceListingFields":
        return MarketplaceListingFields("node")

    def fields(
        self,
        *subfields: Union[
            MarketplaceListingEdgeGraphQLField, "MarketplaceListingFields"
        ]
    ) -> "MarketplaceListingEdgeFields":
        """Subfields should come from the MarketplaceListingEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarketplaceListingEdgeFields":
        self._alias = alias
        return self


class MaxFilePathLengthParametersFields(GraphQLField):
    max_file_path_length: "MaxFilePathLengthParametersGraphQLField" = (
        MaxFilePathLengthParametersGraphQLField("maxFilePathLength")
    )

    def fields(
        self, *subfields: MaxFilePathLengthParametersGraphQLField
    ) -> "MaxFilePathLengthParametersFields":
        """Subfields should come from the MaxFilePathLengthParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MaxFilePathLengthParametersFields":
        self._alias = alias
        return self


class MaxFileSizeParametersFields(GraphQLField):
    max_file_size: "MaxFileSizeParametersGraphQLField" = (
        MaxFileSizeParametersGraphQLField("maxFileSize")
    )

    def fields(
        self, *subfields: MaxFileSizeParametersGraphQLField
    ) -> "MaxFileSizeParametersFields":
        """Subfields should come from the MaxFileSizeParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MaxFileSizeParametersFields":
        self._alias = alias
        return self


class MemberStatusableInterface(GraphQLField):
    @classmethod
    def member_statuses(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[UserStatusOrder] = None
    ) -> "UserStatusConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "UserStatusOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserStatusConnectionFields(
            "member_statuses", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[MemberStatusableGraphQLField, "UserStatusConnectionFields"]
    ) -> "MemberStatusableInterface":
        """Subfields should come from the MemberStatusableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MemberStatusableInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "MemberStatusableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class MembersCanDeleteReposClearAuditEntryFields(GraphQLField):
    action: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("actorUrl")
    )
    created_at: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("createdAt")
    )
    enterprise_resource_path: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("enterpriseResourcePath")
    )
    enterprise_slug: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("enterpriseSlug")
    )
    enterprise_url: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("enterpriseUrl")
    )
    id: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("id")
    )
    operation_type: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "MembersCanDeleteReposClearAuditEntryGraphQLField" = (
        MembersCanDeleteReposClearAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            MembersCanDeleteReposClearAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "MembersCanDeleteReposClearAuditEntryFields":
        """Subfields should come from the MembersCanDeleteReposClearAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MembersCanDeleteReposClearAuditEntryFields":
        self._alias = alias
        return self


class MembersCanDeleteReposDisableAuditEntryFields(GraphQLField):
    action: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("actorUrl")
    )
    created_at: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("createdAt")
    )
    enterprise_resource_path: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("enterpriseResourcePath")
    )
    enterprise_slug: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("enterpriseSlug")
    )
    enterprise_url: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("enterpriseUrl")
    )
    id: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("id")
    )
    operation_type: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "MembersCanDeleteReposDisableAuditEntryGraphQLField" = (
        MembersCanDeleteReposDisableAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            MembersCanDeleteReposDisableAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "MembersCanDeleteReposDisableAuditEntryFields":
        """Subfields should come from the MembersCanDeleteReposDisableAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MembersCanDeleteReposDisableAuditEntryFields":
        self._alias = alias
        return self


class MembersCanDeleteReposEnableAuditEntryFields(GraphQLField):
    action: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("actorUrl")
    )
    created_at: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("createdAt")
    )
    enterprise_resource_path: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("enterpriseResourcePath")
    )
    enterprise_slug: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("enterpriseSlug")
    )
    enterprise_url: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("enterpriseUrl")
    )
    id: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("id")
    )
    operation_type: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "MembersCanDeleteReposEnableAuditEntryGraphQLField" = (
        MembersCanDeleteReposEnableAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            MembersCanDeleteReposEnableAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "MembersCanDeleteReposEnableAuditEntryFields":
        """Subfields should come from the MembersCanDeleteReposEnableAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MembersCanDeleteReposEnableAuditEntryFields":
        self._alias = alias
        return self


class MentionedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "MentionedEventGraphQLField" = MentionedEventGraphQLField("createdAt")
    database_id: "MentionedEventGraphQLField" = MentionedEventGraphQLField("databaseId")
    id: "MentionedEventGraphQLField" = MentionedEventGraphQLField("id")

    def fields(
        self, *subfields: Union[MentionedEventGraphQLField, "ActorInterface"]
    ) -> "MentionedEventFields":
        """Subfields should come from the MentionedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MentionedEventFields":
        self._alias = alias
        return self


class MergeBranchPayloadFields(GraphQLField):
    client_mutation_id: "MergeBranchPayloadGraphQLField" = (
        MergeBranchPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def merge_commit(cls) -> "CommitFields":
        return CommitFields("merge_commit")

    def fields(
        self, *subfields: Union[MergeBranchPayloadGraphQLField, "CommitFields"]
    ) -> "MergeBranchPayloadFields":
        """Subfields should come from the MergeBranchPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergeBranchPayloadFields":
        self._alias = alias
        return self


class MergePullRequestPayloadFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    client_mutation_id: "MergePullRequestPayloadGraphQLField" = (
        MergePullRequestPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            MergePullRequestPayloadGraphQLField, "ActorInterface", "PullRequestFields"
        ]
    ) -> "MergePullRequestPayloadFields":
        """Subfields should come from the MergePullRequestPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergePullRequestPayloadFields":
        self._alias = alias
        return self


class MergeQueueFields(GraphQLField):
    @classmethod
    def configuration(cls) -> "MergeQueueConfigurationFields":
        return MergeQueueConfigurationFields("configuration")

    @classmethod
    def entries(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "MergeQueueEntryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MergeQueueEntryConnectionFields("entries", arguments=cleared_arguments)

    id: "MergeQueueGraphQLField" = MergeQueueGraphQLField("id")
    next_entry_estimated_time_to_merge: "MergeQueueGraphQLField" = (
        MergeQueueGraphQLField("nextEntryEstimatedTimeToMerge")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "MergeQueueGraphQLField" = MergeQueueGraphQLField("resourcePath")
    url: "MergeQueueGraphQLField" = MergeQueueGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            MergeQueueGraphQLField,
            "MergeQueueConfigurationFields",
            "MergeQueueEntryConnectionFields",
            "RepositoryFields",
        ]
    ) -> "MergeQueueFields":
        """Subfields should come from the MergeQueueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergeQueueFields":
        self._alias = alias
        return self


class MergeQueueConfigurationFields(GraphQLField):
    check_response_timeout: "MergeQueueConfigurationGraphQLField" = (
        MergeQueueConfigurationGraphQLField("checkResponseTimeout")
    )
    maximum_entries_to_build: "MergeQueueConfigurationGraphQLField" = (
        MergeQueueConfigurationGraphQLField("maximumEntriesToBuild")
    )
    maximum_entries_to_merge: "MergeQueueConfigurationGraphQLField" = (
        MergeQueueConfigurationGraphQLField("maximumEntriesToMerge")
    )
    merge_method: "MergeQueueConfigurationGraphQLField" = (
        MergeQueueConfigurationGraphQLField("mergeMethod")
    )
    merging_strategy: "MergeQueueConfigurationGraphQLField" = (
        MergeQueueConfigurationGraphQLField("mergingStrategy")
    )
    minimum_entries_to_merge: "MergeQueueConfigurationGraphQLField" = (
        MergeQueueConfigurationGraphQLField("minimumEntriesToMerge")
    )
    minimum_entries_to_merge_wait_time: "MergeQueueConfigurationGraphQLField" = (
        MergeQueueConfigurationGraphQLField("minimumEntriesToMergeWaitTime")
    )

    def fields(
        self, *subfields: MergeQueueConfigurationGraphQLField
    ) -> "MergeQueueConfigurationFields":
        """Subfields should come from the MergeQueueConfigurationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergeQueueConfigurationFields":
        self._alias = alias
        return self


class MergeQueueEntryFields(GraphQLField):
    @classmethod
    def base_commit(cls) -> "CommitFields":
        return CommitFields("base_commit")

    enqueued_at: "MergeQueueEntryGraphQLField" = MergeQueueEntryGraphQLField(
        "enqueuedAt"
    )

    @classmethod
    def enqueuer(cls) -> "ActorInterface":
        return ActorInterface("enqueuer")

    estimated_time_to_merge: "MergeQueueEntryGraphQLField" = (
        MergeQueueEntryGraphQLField("estimatedTimeToMerge")
    )

    @classmethod
    def head_commit(cls) -> "CommitFields":
        return CommitFields("head_commit")

    id: "MergeQueueEntryGraphQLField" = MergeQueueEntryGraphQLField("id")
    jump: "MergeQueueEntryGraphQLField" = MergeQueueEntryGraphQLField("jump")

    @classmethod
    def merge_queue(cls) -> "MergeQueueFields":
        return MergeQueueFields("merge_queue")

    position: "MergeQueueEntryGraphQLField" = MergeQueueEntryGraphQLField("position")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    solo: "MergeQueueEntryGraphQLField" = MergeQueueEntryGraphQLField("solo")
    state: "MergeQueueEntryGraphQLField" = MergeQueueEntryGraphQLField("state")

    def fields(
        self,
        *subfields: Union[
            MergeQueueEntryGraphQLField,
            "ActorInterface",
            "CommitFields",
            "MergeQueueFields",
            "PullRequestFields",
        ]
    ) -> "MergeQueueEntryFields":
        """Subfields should come from the MergeQueueEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergeQueueEntryFields":
        self._alias = alias
        return self


class MergeQueueEntryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "MergeQueueEntryEdgeFields":
        return MergeQueueEntryEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "MergeQueueEntryFields":
        return MergeQueueEntryFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "MergeQueueEntryConnectionGraphQLField" = (
        MergeQueueEntryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            MergeQueueEntryConnectionGraphQLField,
            "MergeQueueEntryEdgeFields",
            "MergeQueueEntryFields",
            "PageInfoFields",
        ]
    ) -> "MergeQueueEntryConnectionFields":
        """Subfields should come from the MergeQueueEntryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergeQueueEntryConnectionFields":
        self._alias = alias
        return self


class MergeQueueEntryEdgeFields(GraphQLField):
    cursor: "MergeQueueEntryEdgeGraphQLField" = MergeQueueEntryEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "MergeQueueEntryFields":
        return MergeQueueEntryFields("node")

    def fields(
        self,
        *subfields: Union[MergeQueueEntryEdgeGraphQLField, "MergeQueueEntryFields"]
    ) -> "MergeQueueEntryEdgeFields":
        """Subfields should come from the MergeQueueEntryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergeQueueEntryEdgeFields":
        self._alias = alias
        return self


class MergeQueueParametersFields(GraphQLField):
    check_response_timeout_minutes: "MergeQueueParametersGraphQLField" = (
        MergeQueueParametersGraphQLField("checkResponseTimeoutMinutes")
    )
    grouping_strategy: "MergeQueueParametersGraphQLField" = (
        MergeQueueParametersGraphQLField("groupingStrategy")
    )
    max_entries_to_build: "MergeQueueParametersGraphQLField" = (
        MergeQueueParametersGraphQLField("maxEntriesToBuild")
    )
    max_entries_to_merge: "MergeQueueParametersGraphQLField" = (
        MergeQueueParametersGraphQLField("maxEntriesToMerge")
    )
    merge_method: "MergeQueueParametersGraphQLField" = MergeQueueParametersGraphQLField(
        "mergeMethod"
    )
    min_entries_to_merge: "MergeQueueParametersGraphQLField" = (
        MergeQueueParametersGraphQLField("minEntriesToMerge")
    )
    min_entries_to_merge_wait_minutes: "MergeQueueParametersGraphQLField" = (
        MergeQueueParametersGraphQLField("minEntriesToMergeWaitMinutes")
    )

    def fields(
        self, *subfields: MergeQueueParametersGraphQLField
    ) -> "MergeQueueParametersFields":
        """Subfields should come from the MergeQueueParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergeQueueParametersFields":
        self._alias = alias
        return self


class MergedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    created_at: "MergedEventGraphQLField" = MergedEventGraphQLField("createdAt")
    id: "MergedEventGraphQLField" = MergedEventGraphQLField("id")

    @classmethod
    def merge_ref(cls) -> "RefFields":
        return RefFields("merge_ref")

    merge_ref_name: "MergedEventGraphQLField" = MergedEventGraphQLField("mergeRefName")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    resource_path: "MergedEventGraphQLField" = MergedEventGraphQLField("resourcePath")
    url: "MergedEventGraphQLField" = MergedEventGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            MergedEventGraphQLField,
            "ActorInterface",
            "CommitFields",
            "PullRequestFields",
            "RefFields",
        ]
    ) -> "MergedEventFields":
        """Subfields should come from the MergedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MergedEventFields":
        self._alias = alias
        return self


class MigrationInterface(GraphQLField):
    continue_on_error: "MigrationGraphQLField" = MigrationGraphQLField(
        "continueOnError"
    )
    created_at: "MigrationGraphQLField" = MigrationGraphQLField("createdAt")
    database_id: "MigrationGraphQLField" = MigrationGraphQLField("databaseId")
    failure_reason: "MigrationGraphQLField" = MigrationGraphQLField("failureReason")
    id: "MigrationGraphQLField" = MigrationGraphQLField("id")
    migration_log_url: "MigrationGraphQLField" = MigrationGraphQLField(
        "migrationLogUrl"
    )

    @classmethod
    def migration_source(cls) -> "MigrationSourceFields":
        return MigrationSourceFields("migration_source")

    repository_name: "MigrationGraphQLField" = MigrationGraphQLField("repositoryName")
    source_url: "MigrationGraphQLField" = MigrationGraphQLField("sourceUrl")
    state: "MigrationGraphQLField" = MigrationGraphQLField("state")
    warnings_count: "MigrationGraphQLField" = MigrationGraphQLField("warningsCount")

    def fields(
        self, *subfields: Union[MigrationGraphQLField, "MigrationSourceFields"]
    ) -> "MigrationInterface":
        """Subfields should come from the MigrationInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MigrationInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "MigrationInterface":
        self._inline_fragments[type_name] = subfields
        return self


class MigrationSourceFields(GraphQLField):
    id: "MigrationSourceGraphQLField" = MigrationSourceGraphQLField("id")
    name: "MigrationSourceGraphQLField" = MigrationSourceGraphQLField("name")
    type: "MigrationSourceGraphQLField" = MigrationSourceGraphQLField("type")
    url: "MigrationSourceGraphQLField" = MigrationSourceGraphQLField("url")

    def fields(
        self, *subfields: MigrationSourceGraphQLField
    ) -> "MigrationSourceFields":
        """Subfields should come from the MigrationSourceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MigrationSourceFields":
        self._alias = alias
        return self


class MilestoneFields(GraphQLField):
    closed: "MilestoneGraphQLField" = MilestoneGraphQLField("closed")
    closed_at: "MilestoneGraphQLField" = MilestoneGraphQLField("closedAt")
    closed_issue_count: "MilestoneGraphQLField" = MilestoneGraphQLField(
        "closedIssueCount"
    )
    created_at: "MilestoneGraphQLField" = MilestoneGraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    description: "MilestoneGraphQLField" = MilestoneGraphQLField("description")
    description_html: "MilestoneGraphQLField" = MilestoneGraphQLField("descriptionHTML")
    due_on: "MilestoneGraphQLField" = MilestoneGraphQLField("dueOn")
    id: "MilestoneGraphQLField" = MilestoneGraphQLField("id")

    @classmethod
    def issues(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by: Optional[IssueFilters] = None,
        first: Optional[int] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[IssueState] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterBy": {"type": "IssueFilters", "value": filter_by},
            "first": {"type": "Int", "value": first},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "IssueState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields("issues", arguments=cleared_arguments)

    number: "MilestoneGraphQLField" = MilestoneGraphQLField("number")
    open_issue_count: "MilestoneGraphQLField" = MilestoneGraphQLField("openIssueCount")
    progress_percentage: "MilestoneGraphQLField" = MilestoneGraphQLField(
        "progressPercentage"
    )

    @classmethod
    def pull_requests(
        cls,
        *,
        after: Optional[str] = None,
        base_ref_name: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        head_ref_name: Optional[str] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[PullRequestState] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "baseRefName": {"type": "String", "value": base_ref_name},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "headRefName": {"type": "String", "value": head_ref_name},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "PullRequestState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields("pull_requests", arguments=cleared_arguments)

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "MilestoneGraphQLField" = MilestoneGraphQLField("resourcePath")
    state: "MilestoneGraphQLField" = MilestoneGraphQLField("state")
    title: "MilestoneGraphQLField" = MilestoneGraphQLField("title")
    updated_at: "MilestoneGraphQLField" = MilestoneGraphQLField("updatedAt")
    url: "MilestoneGraphQLField" = MilestoneGraphQLField("url")
    viewer_can_close: "MilestoneGraphQLField" = MilestoneGraphQLField("viewerCanClose")
    viewer_can_reopen: "MilestoneGraphQLField" = MilestoneGraphQLField(
        "viewerCanReopen"
    )

    def fields(
        self,
        *subfields: Union[
            MilestoneGraphQLField,
            "ActorInterface",
            "IssueConnectionFields",
            "PullRequestConnectionFields",
            "RepositoryFields",
        ]
    ) -> "MilestoneFields":
        """Subfields should come from the MilestoneFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MilestoneFields":
        self._alias = alias
        return self


class MilestoneConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "MilestoneEdgeFields":
        return MilestoneEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "MilestoneFields":
        return MilestoneFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "MilestoneConnectionGraphQLField" = MilestoneConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            MilestoneConnectionGraphQLField,
            "MilestoneEdgeFields",
            "MilestoneFields",
            "PageInfoFields",
        ]
    ) -> "MilestoneConnectionFields":
        """Subfields should come from the MilestoneConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MilestoneConnectionFields":
        self._alias = alias
        return self


class MilestoneEdgeFields(GraphQLField):
    cursor: "MilestoneEdgeGraphQLField" = MilestoneEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "MilestoneFields":
        return MilestoneFields("node")

    def fields(
        self, *subfields: Union[MilestoneEdgeGraphQLField, "MilestoneFields"]
    ) -> "MilestoneEdgeFields":
        """Subfields should come from the MilestoneEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MilestoneEdgeFields":
        self._alias = alias
        return self


class MilestonedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "MilestonedEventGraphQLField" = MilestonedEventGraphQLField("createdAt")
    id: "MilestonedEventGraphQLField" = MilestonedEventGraphQLField("id")
    milestone_title: "MilestonedEventGraphQLField" = MilestonedEventGraphQLField(
        "milestoneTitle"
    )
    subject: "MilestoneItemUnion" = MilestoneItemUnion("subject")

    def fields(
        self,
        *subfields: Union[
            MilestonedEventGraphQLField, "ActorInterface", "MilestoneItemUnion"
        ]
    ) -> "MilestonedEventFields":
        """Subfields should come from the MilestonedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MilestonedEventFields":
        self._alias = alias
        return self


class MinimizableInterface(GraphQLField):
    is_minimized: "MinimizableGraphQLField" = MinimizableGraphQLField("isMinimized")
    minimized_reason: "MinimizableGraphQLField" = MinimizableGraphQLField(
        "minimizedReason"
    )
    viewer_can_minimize: "MinimizableGraphQLField" = MinimizableGraphQLField(
        "viewerCanMinimize"
    )

    def fields(self, *subfields: MinimizableGraphQLField) -> "MinimizableInterface":
        """Subfields should come from the MinimizableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MinimizableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "MinimizableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class MinimizeCommentPayloadFields(GraphQLField):
    client_mutation_id: "MinimizeCommentPayloadGraphQLField" = (
        MinimizeCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def minimized_comment(cls) -> "MinimizableInterface":
        return MinimizableInterface("minimized_comment")

    def fields(
        self,
        *subfields: Union[MinimizeCommentPayloadGraphQLField, "MinimizableInterface"]
    ) -> "MinimizeCommentPayloadFields":
        """Subfields should come from the MinimizeCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MinimizeCommentPayloadFields":
        self._alias = alias
        return self


class MoveProjectCardPayloadFields(GraphQLField):
    @classmethod
    def card_edge(cls) -> "ProjectCardEdgeFields":
        return ProjectCardEdgeFields("card_edge")

    client_mutation_id: "MoveProjectCardPayloadGraphQLField" = (
        MoveProjectCardPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self,
        *subfields: Union[MoveProjectCardPayloadGraphQLField, "ProjectCardEdgeFields"]
    ) -> "MoveProjectCardPayloadFields":
        """Subfields should come from the MoveProjectCardPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MoveProjectCardPayloadFields":
        self._alias = alias
        return self


class MoveProjectColumnPayloadFields(GraphQLField):
    client_mutation_id: "MoveProjectColumnPayloadGraphQLField" = (
        MoveProjectColumnPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def column_edge(cls) -> "ProjectColumnEdgeFields":
        return ProjectColumnEdgeFields("column_edge")

    def fields(
        self,
        *subfields: Union[
            MoveProjectColumnPayloadGraphQLField, "ProjectColumnEdgeFields"
        ]
    ) -> "MoveProjectColumnPayloadFields":
        """Subfields should come from the MoveProjectColumnPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MoveProjectColumnPayloadFields":
        self._alias = alias
        return self


class MovedColumnsInProjectEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "MovedColumnsInProjectEventGraphQLField" = (
        MovedColumnsInProjectEventGraphQLField("createdAt")
    )
    database_id: "MovedColumnsInProjectEventGraphQLField" = (
        MovedColumnsInProjectEventGraphQLField("databaseId")
    )
    id: "MovedColumnsInProjectEventGraphQLField" = (
        MovedColumnsInProjectEventGraphQLField("id")
    )
    previous_project_column_name: "MovedColumnsInProjectEventGraphQLField" = (
        MovedColumnsInProjectEventGraphQLField("previousProjectColumnName")
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def project_card(cls) -> "ProjectCardFields":
        return ProjectCardFields("project_card")

    project_column_name: "MovedColumnsInProjectEventGraphQLField" = (
        MovedColumnsInProjectEventGraphQLField("projectColumnName")
    )

    def fields(
        self,
        *subfields: Union[
            MovedColumnsInProjectEventGraphQLField,
            "ActorInterface",
            "ProjectCardFields",
            "ProjectFields",
        ]
    ) -> "MovedColumnsInProjectEventFields":
        """Subfields should come from the MovedColumnsInProjectEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MovedColumnsInProjectEventFields":
        self._alias = alias
        return self


class NodeInterface(GraphQLField):
    id: "NodeGraphQLField" = NodeGraphQLField("id")

    def fields(self, *subfields: NodeGraphQLField) -> "NodeInterface":
        """Subfields should come from the NodeInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NodeInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "NodeInterface":
        self._inline_fragments[type_name] = subfields
        return self


class OIDCProviderFields(GraphQLField):
    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    @classmethod
    def external_identities(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        login: Optional[str] = None,
        members_only: Optional[bool] = None,
        user_name: Optional[str] = None
    ) -> "ExternalIdentityConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "login": {"type": "String", "value": login},
            "membersOnly": {"type": "Boolean", "value": members_only},
            "userName": {"type": "String", "value": user_name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExternalIdentityConnectionFields(
            "external_identities", arguments=cleared_arguments
        )

    id: "OIDCProviderGraphQLField" = OIDCProviderGraphQLField("id")
    provider_type: "OIDCProviderGraphQLField" = OIDCProviderGraphQLField("providerType")
    tenant_id: "OIDCProviderGraphQLField" = OIDCProviderGraphQLField("tenantId")

    def fields(
        self,
        *subfields: Union[
            OIDCProviderGraphQLField,
            "EnterpriseFields",
            "ExternalIdentityConnectionFields",
        ]
    ) -> "OIDCProviderFields":
        """Subfields should come from the OIDCProviderFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OIDCProviderFields":
        self._alias = alias
        return self


class OauthApplicationAuditEntryDataInterface(GraphQLField):
    oauth_application_name: "OauthApplicationAuditEntryDataGraphQLField" = (
        OauthApplicationAuditEntryDataGraphQLField("oauthApplicationName")
    )
    oauth_application_resource_path: "OauthApplicationAuditEntryDataGraphQLField" = (
        OauthApplicationAuditEntryDataGraphQLField("oauthApplicationResourcePath")
    )
    oauth_application_url: "OauthApplicationAuditEntryDataGraphQLField" = (
        OauthApplicationAuditEntryDataGraphQLField("oauthApplicationUrl")
    )

    def fields(
        self, *subfields: OauthApplicationAuditEntryDataGraphQLField
    ) -> "OauthApplicationAuditEntryDataInterface":
        """Subfields should come from the OauthApplicationAuditEntryDataInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OauthApplicationAuditEntryDataInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "OauthApplicationAuditEntryDataInterface":
        self._inline_fragments[type_name] = subfields
        return self


class OauthApplicationCreateAuditEntryFields(GraphQLField):
    action: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("actorUrl")
    )
    application_url: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("applicationUrl")
    )
    callback_url: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("callbackUrl")
    )
    created_at: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("createdAt")
    )
    id: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("id")
    )
    oauth_application_name: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("oauthApplicationName")
    )
    oauth_application_resource_path: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("oauthApplicationResourcePath")
    )
    oauth_application_url: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("oauthApplicationUrl")
    )
    operation_type: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("organizationUrl")
    )
    rate_limit: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("rateLimit")
    )
    state: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("state")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OauthApplicationCreateAuditEntryGraphQLField" = (
        OauthApplicationCreateAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OauthApplicationCreateAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OauthApplicationCreateAuditEntryFields":
        """Subfields should come from the OauthApplicationCreateAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OauthApplicationCreateAuditEntryFields":
        self._alias = alias
        return self


class OrgAddBillingManagerAuditEntryFields(GraphQLField):
    action: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("createdAt")
    )
    id: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("id")
    )
    invitation_email: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("invitationEmail")
    )
    operation_type: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgAddBillingManagerAuditEntryGraphQLField" = (
        OrgAddBillingManagerAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgAddBillingManagerAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgAddBillingManagerAuditEntryFields":
        """Subfields should come from the OrgAddBillingManagerAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgAddBillingManagerAuditEntryFields":
        self._alias = alias
        return self


class OrgAddMemberAuditEntryFields(GraphQLField):
    action: "OrgAddMemberAuditEntryGraphQLField" = OrgAddMemberAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgAddMemberAuditEntryGraphQLField" = OrgAddMemberAuditEntryGraphQLField(
        "actorIp"
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("createdAt")
    )
    id: "OrgAddMemberAuditEntryGraphQLField" = OrgAddMemberAuditEntryGraphQLField("id")
    operation_type: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("organizationUrl")
    )
    permission: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("permission")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgAddMemberAuditEntryGraphQLField" = (
        OrgAddMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgAddMemberAuditEntryGraphQLField" = OrgAddMemberAuditEntryGraphQLField(
        "userUrl"
    )

    def fields(
        self,
        *subfields: Union[
            OrgAddMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgAddMemberAuditEntryFields":
        """Subfields should come from the OrgAddMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgAddMemberAuditEntryFields":
        self._alias = alias
        return self


class OrgBlockUserAuditEntryFields(GraphQLField):
    action: "OrgBlockUserAuditEntryGraphQLField" = OrgBlockUserAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgBlockUserAuditEntryGraphQLField" = OrgBlockUserAuditEntryGraphQLField(
        "actorIp"
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("actorUrl")
    )

    @classmethod
    def blocked_user(cls) -> "UserFields":
        return UserFields("blocked_user")

    blocked_user_name: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("blockedUserName")
    )
    blocked_user_resource_path: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("blockedUserResourcePath")
    )
    blocked_user_url: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("blockedUserUrl")
    )
    created_at: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("createdAt")
    )
    id: "OrgBlockUserAuditEntryGraphQLField" = OrgBlockUserAuditEntryGraphQLField("id")
    operation_type: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgBlockUserAuditEntryGraphQLField" = (
        OrgBlockUserAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgBlockUserAuditEntryGraphQLField" = OrgBlockUserAuditEntryGraphQLField(
        "userUrl"
    )

    def fields(
        self,
        *subfields: Union[
            OrgBlockUserAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgBlockUserAuditEntryFields":
        """Subfields should come from the OrgBlockUserAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgBlockUserAuditEntryFields":
        self._alias = alias
        return self


class OrgConfigDisableCollaboratorsOnlyAuditEntryFields(GraphQLField):
    action: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("createdAt")
    )
    id: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("id")
    )
    operation_type: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField"
    ) = OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgConfigDisableCollaboratorsOnlyAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgConfigDisableCollaboratorsOnlyAuditEntryFields":
        """Subfields should come from the OrgConfigDisableCollaboratorsOnlyAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgConfigDisableCollaboratorsOnlyAuditEntryFields":
        self._alias = alias
        return self


class OrgConfigEnableCollaboratorsOnlyAuditEntryFields(GraphQLField):
    action: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("createdAt")
    )
    id: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("id")
    )
    operation_type: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField"
    ) = OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgConfigEnableCollaboratorsOnlyAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgConfigEnableCollaboratorsOnlyAuditEntryFields":
        """Subfields should come from the OrgConfigEnableCollaboratorsOnlyAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgConfigEnableCollaboratorsOnlyAuditEntryFields":
        self._alias = alias
        return self


class OrgCreateAuditEntryFields(GraphQLField):
    action: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "actorIp"
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "actorLogin"
    )
    actor_resource_path: "OrgCreateAuditEntryGraphQLField" = (
        OrgCreateAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "actorUrl"
    )
    billing_plan: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "billingPlan"
    )
    created_at: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "createdAt"
    )
    id: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField("id")
    operation_type: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "operationType"
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgCreateAuditEntryGraphQLField" = (
        OrgCreateAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgCreateAuditEntryGraphQLField" = (
        OrgCreateAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgCreateAuditEntryGraphQLField" = (
        OrgCreateAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "userLogin"
    )
    user_resource_path: "OrgCreateAuditEntryGraphQLField" = (
        OrgCreateAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgCreateAuditEntryGraphQLField" = OrgCreateAuditEntryGraphQLField(
        "userUrl"
    )

    def fields(
        self,
        *subfields: Union[
            OrgCreateAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgCreateAuditEntryFields":
        """Subfields should come from the OrgCreateAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgCreateAuditEntryFields":
        self._alias = alias
        return self


class OrgDisableOauthAppRestrictionsAuditEntryFields(GraphQLField):
    action: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("createdAt")
    )
    id: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("id")
    )
    operation_type: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField"
    ) = OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("organizationResourcePath")
    organization_url: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgDisableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgDisableOauthAppRestrictionsAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgDisableOauthAppRestrictionsAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgDisableOauthAppRestrictionsAuditEntryFields":
        """Subfields should come from the OrgDisableOauthAppRestrictionsAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgDisableOauthAppRestrictionsAuditEntryFields":
        self._alias = alias
        return self


class OrgDisableSamlAuditEntryFields(GraphQLField):
    action: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("createdAt")
    )
    digest_method_url: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("digestMethodUrl")
    )
    id: "OrgDisableSamlAuditEntryGraphQLField" = OrgDisableSamlAuditEntryGraphQLField(
        "id"
    )
    issuer_url: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("issuerUrl")
    )
    operation_type: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("organizationUrl")
    )
    signature_method_url: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("signatureMethodUrl")
    )
    single_sign_on_url: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("singleSignOnUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgDisableSamlAuditEntryGraphQLField" = (
        OrgDisableSamlAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgDisableSamlAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgDisableSamlAuditEntryFields":
        """Subfields should come from the OrgDisableSamlAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgDisableSamlAuditEntryFields":
        self._alias = alias
        return self


class OrgDisableTwoFactorRequirementAuditEntryFields(GraphQLField):
    action: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("createdAt")
    )
    id: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("id")
    )
    operation_type: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "OrgDisableTwoFactorRequirementAuditEntryGraphQLField"
    ) = OrgDisableTwoFactorRequirementAuditEntryGraphQLField("organizationResourcePath")
    organization_url: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgDisableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgDisableTwoFactorRequirementAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgDisableTwoFactorRequirementAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgDisableTwoFactorRequirementAuditEntryFields":
        """Subfields should come from the OrgDisableTwoFactorRequirementAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgDisableTwoFactorRequirementAuditEntryFields":
        self._alias = alias
        return self


class OrgEnableOauthAppRestrictionsAuditEntryFields(GraphQLField):
    action: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("createdAt")
    )
    id: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("id")
    )
    operation_type: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField"
    ) = OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("organizationResourcePath")
    organization_url: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgEnableOauthAppRestrictionsAuditEntryGraphQLField" = (
        OrgEnableOauthAppRestrictionsAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgEnableOauthAppRestrictionsAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgEnableOauthAppRestrictionsAuditEntryFields":
        """Subfields should come from the OrgEnableOauthAppRestrictionsAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgEnableOauthAppRestrictionsAuditEntryFields":
        self._alias = alias
        return self


class OrgEnableSamlAuditEntryFields(GraphQLField):
    action: "OrgEnableSamlAuditEntryGraphQLField" = OrgEnableSamlAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("createdAt")
    )
    digest_method_url: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("digestMethodUrl")
    )
    id: "OrgEnableSamlAuditEntryGraphQLField" = OrgEnableSamlAuditEntryGraphQLField(
        "id"
    )
    issuer_url: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("issuerUrl")
    )
    operation_type: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("organizationUrl")
    )
    signature_method_url: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("signatureMethodUrl")
    )
    single_sign_on_url: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("singleSignOnUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgEnableSamlAuditEntryGraphQLField" = (
        OrgEnableSamlAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgEnableSamlAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgEnableSamlAuditEntryFields":
        """Subfields should come from the OrgEnableSamlAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgEnableSamlAuditEntryFields":
        self._alias = alias
        return self


class OrgEnableTwoFactorRequirementAuditEntryFields(GraphQLField):
    action: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("createdAt")
    )
    id: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("id")
    )
    operation_type: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "OrgEnableTwoFactorRequirementAuditEntryGraphQLField"
    ) = OrgEnableTwoFactorRequirementAuditEntryGraphQLField("organizationResourcePath")
    organization_url: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgEnableTwoFactorRequirementAuditEntryGraphQLField" = (
        OrgEnableTwoFactorRequirementAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgEnableTwoFactorRequirementAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgEnableTwoFactorRequirementAuditEntryFields":
        """Subfields should come from the OrgEnableTwoFactorRequirementAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgEnableTwoFactorRequirementAuditEntryFields":
        self._alias = alias
        return self


class OrgInviteMemberAuditEntryFields(GraphQLField):
    action: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("createdAt")
    )
    email: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("email")
    )
    id: "OrgInviteMemberAuditEntryGraphQLField" = OrgInviteMemberAuditEntryGraphQLField(
        "id"
    )
    operation_type: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    @classmethod
    def organization_invitation(cls) -> "OrganizationInvitationFields":
        return OrganizationInvitationFields("organization_invitation")

    organization_name: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgInviteMemberAuditEntryGraphQLField" = (
        OrgInviteMemberAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgInviteMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "OrganizationInvitationFields",
            "UserFields",
        ]
    ) -> "OrgInviteMemberAuditEntryFields":
        """Subfields should come from the OrgInviteMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgInviteMemberAuditEntryFields":
        self._alias = alias
        return self


class OrgInviteToBusinessAuditEntryFields(GraphQLField):
    action: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("createdAt")
    )
    enterprise_resource_path: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("enterpriseResourcePath")
    )
    enterprise_slug: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("enterpriseSlug")
    )
    enterprise_url: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("enterpriseUrl")
    )
    id: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("id")
    )
    operation_type: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgInviteToBusinessAuditEntryGraphQLField" = (
        OrgInviteToBusinessAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgInviteToBusinessAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgInviteToBusinessAuditEntryFields":
        """Subfields should come from the OrgInviteToBusinessAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgInviteToBusinessAuditEntryFields":
        self._alias = alias
        return self


class OrgOauthAppAccessApprovedAuditEntryFields(GraphQLField):
    action: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("createdAt")
    )
    id: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("id")
    )
    oauth_application_name: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("oauthApplicationName")
    )
    oauth_application_resource_path: (
        "OrgOauthAppAccessApprovedAuditEntryGraphQLField"
    ) = OrgOauthAppAccessApprovedAuditEntryGraphQLField("oauthApplicationResourcePath")
    oauth_application_url: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("oauthApplicationUrl")
    )
    operation_type: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgOauthAppAccessApprovedAuditEntryGraphQLField" = (
        OrgOauthAppAccessApprovedAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgOauthAppAccessApprovedAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgOauthAppAccessApprovedAuditEntryFields":
        """Subfields should come from the OrgOauthAppAccessApprovedAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgOauthAppAccessApprovedAuditEntryFields":
        self._alias = alias
        return self


class OrgOauthAppAccessBlockedAuditEntryFields(GraphQLField):
    action: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("createdAt")
    )
    id: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("id")
    )
    oauth_application_name: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("oauthApplicationName")
    )
    oauth_application_resource_path: (
        "OrgOauthAppAccessBlockedAuditEntryGraphQLField"
    ) = OrgOauthAppAccessBlockedAuditEntryGraphQLField("oauthApplicationResourcePath")
    oauth_application_url: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("oauthApplicationUrl")
    )
    operation_type: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgOauthAppAccessBlockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessBlockedAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgOauthAppAccessBlockedAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgOauthAppAccessBlockedAuditEntryFields":
        """Subfields should come from the OrgOauthAppAccessBlockedAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgOauthAppAccessBlockedAuditEntryFields":
        self._alias = alias
        return self


class OrgOauthAppAccessDeniedAuditEntryFields(GraphQLField):
    action: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("createdAt")
    )
    id: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("id")
    )
    oauth_application_name: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("oauthApplicationName")
    )
    oauth_application_resource_path: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("oauthApplicationResourcePath")
    )
    oauth_application_url: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("oauthApplicationUrl")
    )
    operation_type: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgOauthAppAccessDeniedAuditEntryGraphQLField" = (
        OrgOauthAppAccessDeniedAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgOauthAppAccessDeniedAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgOauthAppAccessDeniedAuditEntryFields":
        """Subfields should come from the OrgOauthAppAccessDeniedAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgOauthAppAccessDeniedAuditEntryFields":
        self._alias = alias
        return self


class OrgOauthAppAccessRequestedAuditEntryFields(GraphQLField):
    action: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("createdAt")
    )
    id: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("id")
    )
    oauth_application_name: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("oauthApplicationName")
    )
    oauth_application_resource_path: (
        "OrgOauthAppAccessRequestedAuditEntryGraphQLField"
    ) = OrgOauthAppAccessRequestedAuditEntryGraphQLField("oauthApplicationResourcePath")
    oauth_application_url: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("oauthApplicationUrl")
    )
    operation_type: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgOauthAppAccessRequestedAuditEntryGraphQLField" = (
        OrgOauthAppAccessRequestedAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgOauthAppAccessRequestedAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgOauthAppAccessRequestedAuditEntryFields":
        """Subfields should come from the OrgOauthAppAccessRequestedAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgOauthAppAccessRequestedAuditEntryFields":
        self._alias = alias
        return self


class OrgOauthAppAccessUnblockedAuditEntryFields(GraphQLField):
    action: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("createdAt")
    )
    id: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("id")
    )
    oauth_application_name: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("oauthApplicationName")
    )
    oauth_application_resource_path: (
        "OrgOauthAppAccessUnblockedAuditEntryGraphQLField"
    ) = OrgOauthAppAccessUnblockedAuditEntryGraphQLField("oauthApplicationResourcePath")
    oauth_application_url: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("oauthApplicationUrl")
    )
    operation_type: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgOauthAppAccessUnblockedAuditEntryGraphQLField" = (
        OrgOauthAppAccessUnblockedAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgOauthAppAccessUnblockedAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgOauthAppAccessUnblockedAuditEntryFields":
        """Subfields should come from the OrgOauthAppAccessUnblockedAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgOauthAppAccessUnblockedAuditEntryFields":
        self._alias = alias
        return self


class OrgRemoveBillingManagerAuditEntryFields(GraphQLField):
    action: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("createdAt")
    )
    id: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("id")
    )
    operation_type: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("organizationUrl")
    )
    reason: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("reason")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgRemoveBillingManagerAuditEntryGraphQLField" = (
        OrgRemoveBillingManagerAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgRemoveBillingManagerAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgRemoveBillingManagerAuditEntryFields":
        """Subfields should come from the OrgRemoveBillingManagerAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgRemoveBillingManagerAuditEntryFields":
        self._alias = alias
        return self


class OrgRemoveMemberAuditEntryFields(GraphQLField):
    action: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("createdAt")
    )
    id: "OrgRemoveMemberAuditEntryGraphQLField" = OrgRemoveMemberAuditEntryGraphQLField(
        "id"
    )
    membership_types: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("membershipTypes")
    )
    operation_type: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("organizationUrl")
    )
    reason: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("reason")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgRemoveMemberAuditEntryGraphQLField" = (
        OrgRemoveMemberAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgRemoveMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgRemoveMemberAuditEntryFields":
        """Subfields should come from the OrgRemoveMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgRemoveMemberAuditEntryFields":
        self._alias = alias
        return self


class OrgRemoveOutsideCollaboratorAuditEntryFields(GraphQLField):
    action: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("createdAt")
    )
    id: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("id")
    )
    membership_types: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("membershipTypes")
    )
    operation_type: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("organizationUrl")
    )
    reason: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("reason")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgRemoveOutsideCollaboratorAuditEntryGraphQLField" = (
        OrgRemoveOutsideCollaboratorAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgRemoveOutsideCollaboratorAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgRemoveOutsideCollaboratorAuditEntryFields":
        """Subfields should come from the OrgRemoveOutsideCollaboratorAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgRemoveOutsideCollaboratorAuditEntryFields":
        self._alias = alias
        return self


class OrgRestoreMemberAuditEntryFields(GraphQLField):
    action: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("createdAt")
    )
    id: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("id")
    )
    operation_type: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("organizationUrl")
    )
    restored_custom_email_routings_count: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("restoredCustomEmailRoutingsCount")
    )
    restored_issue_assignments_count: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("restoredIssueAssignmentsCount")
    )
    restored_memberships: "OrgRestoreMemberAuditEntryMembershipUnion" = (
        OrgRestoreMemberAuditEntryMembershipUnion("restoredMemberships")
    )
    restored_memberships_count: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("restoredMembershipsCount")
    )
    restored_repositories_count: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("restoredRepositoriesCount")
    )
    restored_repository_stars_count: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("restoredRepositoryStarsCount")
    )
    restored_repository_watches_count: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("restoredRepositoryWatchesCount")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgRestoreMemberAuditEntryGraphQLField" = (
        OrgRestoreMemberAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgRestoreMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrgRestoreMemberAuditEntryMembershipUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgRestoreMemberAuditEntryFields":
        """Subfields should come from the OrgRestoreMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgRestoreMemberAuditEntryFields":
        self._alias = alias
        return self


class OrgRestoreMemberMembershipOrganizationAuditEntryDataFields(GraphQLField):
    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: (
        "OrgRestoreMemberMembershipOrganizationAuditEntryDataGraphQLField"
    ) = OrgRestoreMemberMembershipOrganizationAuditEntryDataGraphQLField(
        "organizationName"
    )
    organization_resource_path: (
        "OrgRestoreMemberMembershipOrganizationAuditEntryDataGraphQLField"
    ) = OrgRestoreMemberMembershipOrganizationAuditEntryDataGraphQLField(
        "organizationResourcePath"
    )
    organization_url: (
        "OrgRestoreMemberMembershipOrganizationAuditEntryDataGraphQLField"
    ) = OrgRestoreMemberMembershipOrganizationAuditEntryDataGraphQLField(
        "organizationUrl"
    )

    def fields(
        self,
        *subfields: Union[
            OrgRestoreMemberMembershipOrganizationAuditEntryDataGraphQLField,
            "OrganizationFields",
        ]
    ) -> "OrgRestoreMemberMembershipOrganizationAuditEntryDataFields":
        """Subfields should come from the OrgRestoreMemberMembershipOrganizationAuditEntryDataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "OrgRestoreMemberMembershipOrganizationAuditEntryDataFields":
        self._alias = alias
        return self


class OrgRestoreMemberMembershipRepositoryAuditEntryDataFields(GraphQLField):
    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: (
        "OrgRestoreMemberMembershipRepositoryAuditEntryDataGraphQLField"
    ) = OrgRestoreMemberMembershipRepositoryAuditEntryDataGraphQLField("repositoryName")
    repository_resource_path: (
        "OrgRestoreMemberMembershipRepositoryAuditEntryDataGraphQLField"
    ) = OrgRestoreMemberMembershipRepositoryAuditEntryDataGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "OrgRestoreMemberMembershipRepositoryAuditEntryDataGraphQLField" = (
        OrgRestoreMemberMembershipRepositoryAuditEntryDataGraphQLField("repositoryUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgRestoreMemberMembershipRepositoryAuditEntryDataGraphQLField,
            "RepositoryFields",
        ]
    ) -> "OrgRestoreMemberMembershipRepositoryAuditEntryDataFields":
        """Subfields should come from the OrgRestoreMemberMembershipRepositoryAuditEntryDataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "OrgRestoreMemberMembershipRepositoryAuditEntryDataFields":
        self._alias = alias
        return self


class OrgRestoreMemberMembershipTeamAuditEntryDataFields(GraphQLField):
    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    team_name: "OrgRestoreMemberMembershipTeamAuditEntryDataGraphQLField" = (
        OrgRestoreMemberMembershipTeamAuditEntryDataGraphQLField("teamName")
    )
    team_resource_path: "OrgRestoreMemberMembershipTeamAuditEntryDataGraphQLField" = (
        OrgRestoreMemberMembershipTeamAuditEntryDataGraphQLField("teamResourcePath")
    )
    team_url: "OrgRestoreMemberMembershipTeamAuditEntryDataGraphQLField" = (
        OrgRestoreMemberMembershipTeamAuditEntryDataGraphQLField("teamUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgRestoreMemberMembershipTeamAuditEntryDataGraphQLField, "TeamFields"
        ]
    ) -> "OrgRestoreMemberMembershipTeamAuditEntryDataFields":
        """Subfields should come from the OrgRestoreMemberMembershipTeamAuditEntryDataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgRestoreMemberMembershipTeamAuditEntryDataFields":
        self._alias = alias
        return self


class OrgUnblockUserAuditEntryFields(GraphQLField):
    action: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("actorUrl")
    )

    @classmethod
    def blocked_user(cls) -> "UserFields":
        return UserFields("blocked_user")

    blocked_user_name: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("blockedUserName")
    )
    blocked_user_resource_path: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("blockedUserResourcePath")
    )
    blocked_user_url: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("blockedUserUrl")
    )
    created_at: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("createdAt")
    )
    id: "OrgUnblockUserAuditEntryGraphQLField" = OrgUnblockUserAuditEntryGraphQLField(
        "id"
    )
    operation_type: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgUnblockUserAuditEntryGraphQLField" = (
        OrgUnblockUserAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgUnblockUserAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgUnblockUserAuditEntryFields":
        """Subfields should come from the OrgUnblockUserAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgUnblockUserAuditEntryFields":
        self._alias = alias
        return self


class OrgUpdateDefaultRepositoryPermissionAuditEntryFields(GraphQLField):
    action: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: (
        "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField"
    ) = OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("actorResourcePath")
    actor_url: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("createdAt")
    )
    id: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("id")
    )
    operation_type: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField"
    ) = OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("organizationUrl")
    )
    permission: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("permission")
    )
    permission_was: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("permissionWas")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField" = (
        OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgUpdateDefaultRepositoryPermissionAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgUpdateDefaultRepositoryPermissionAuditEntryFields":
        """Subfields should come from the OrgUpdateDefaultRepositoryPermissionAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "OrgUpdateDefaultRepositoryPermissionAuditEntryFields":
        self._alias = alias
        return self


class OrgUpdateMemberAuditEntryFields(GraphQLField):
    action: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("createdAt")
    )
    id: "OrgUpdateMemberAuditEntryGraphQLField" = OrgUpdateMemberAuditEntryGraphQLField(
        "id"
    )
    operation_type: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("organizationUrl")
    )
    permission: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("permission")
    )
    permission_was: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("permissionWas")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "OrgUpdateMemberAuditEntryGraphQLField" = (
        OrgUpdateMemberAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgUpdateMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgUpdateMemberAuditEntryFields":
        """Subfields should come from the OrgUpdateMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrgUpdateMemberAuditEntryFields":
        self._alias = alias
        return self


class OrgUpdateMemberRepositoryCreationPermissionAuditEntryFields(GraphQLField):
    action: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: (
        "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField(
        "actorResourcePath"
    )
    actor_url: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("actorUrl")
    )
    can_create_repositories: (
        "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField(
        "canCreateRepositories"
    )
    created_at: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("createdAt")
    )
    id: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("id")
    )
    operation_type: (
        "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField(
        "operationType"
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: (
        "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField(
        "organizationName"
    )
    organization_resource_path: (
        "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: (
        "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField(
        "organizationUrl"
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: (
        "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField(
        "userResourcePath"
    )
    user_url: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("userUrl")
    )
    visibility: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField("visibility")
    )

    def fields(
        self,
        *subfields: Union[
            OrgUpdateMemberRepositoryCreationPermissionAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgUpdateMemberRepositoryCreationPermissionAuditEntryFields":
        """Subfields should come from the OrgUpdateMemberRepositoryCreationPermissionAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "OrgUpdateMemberRepositoryCreationPermissionAuditEntryFields":
        self._alias = alias
        return self


class OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFields(GraphQLField):
    action: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField(
        "actorLogin"
    )
    actor_resource_path: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField(
        "actorResourcePath"
    )
    actor_url: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField("actorUrl")
    )
    can_invite_outside_collaborators_to_repositories: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField(
        "canInviteOutsideCollaboratorsToRepositories"
    )
    created_at: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField("createdAt")
    id: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField("id")
    )
    operation_type: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField(
        "operationType"
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField(
        "organizationName"
    )
    organization_resource_path: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField(
        "organizationUrl"
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField("userLogin")
    user_resource_path: (
        "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField"
    ) = OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField(
        "userResourcePath"
    )
    user_url: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField" = (
        OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFields":
        """Subfields should come from the OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFields":
        self._alias = alias
        return self


class OrganizationFields(GraphQLField):
    @classmethod
    def announcement_banner(cls) -> "AnnouncementBannerFields":
        return AnnouncementBannerFields("announcement_banner")

    @classmethod
    def any_pinnable_items(
        cls, *, type: Optional[PinnableItemType] = None
    ) -> "OrganizationGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "type": {"type": "PinnableItemType", "value": type}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationGraphQLField(
            "any_pinnable_items", arguments=cleared_arguments
        )

    archived_at: "OrganizationGraphQLField" = OrganizationGraphQLField("archivedAt")

    @classmethod
    def audit_log(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[AuditLogOrder] = None,
        query: Optional[str] = None
    ) -> "OrganizationAuditEntryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "AuditLogOrder", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationAuditEntryConnectionFields(
            "audit_log", arguments=cleared_arguments
        )

    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "OrganizationGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationGraphQLField("avatar_url", arguments=cleared_arguments)

    created_at: "OrganizationGraphQLField" = OrganizationGraphQLField("createdAt")
    database_id: "OrganizationGraphQLField" = OrganizationGraphQLField("databaseId")
    description: "OrganizationGraphQLField" = OrganizationGraphQLField("description")
    description_html: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "descriptionHTML"
    )

    @classmethod
    def domains(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        is_approved: Optional[bool] = None,
        is_verified: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[VerifiableDomainOrder] = None
    ) -> "VerifiableDomainConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "isApproved": {"type": "Boolean", "value": is_approved},
            "isVerified": {"type": "Boolean", "value": is_verified},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "VerifiableDomainOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VerifiableDomainConnectionFields("domains", arguments=cleared_arguments)

    email: "OrganizationGraphQLField" = OrganizationGraphQLField("email")

    @classmethod
    def enterprise_owners(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrgEnterpriseOwnerOrder] = None,
        organization_role: Optional[RoleInOrganization] = None,
        query: Optional[str] = None
    ) -> "OrganizationEnterpriseOwnerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrgEnterpriseOwnerOrder", "value": order_by},
            "organizationRole": {
                "type": "RoleInOrganization",
                "value": organization_role,
            },
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationEnterpriseOwnerConnectionFields(
            "enterprise_owners", arguments=cleared_arguments
        )

    estimated_next_sponsors_payout_in_cents: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("estimatedNextSponsorsPayoutInCents")
    )
    has_sponsors_listing: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "hasSponsorsListing"
    )
    id: "OrganizationGraphQLField" = OrganizationGraphQLField("id")

    @classmethod
    def interaction_ability(cls) -> "RepositoryInteractionAbilityFields":
        return RepositoryInteractionAbilityFields("interaction_ability")

    ip_allow_list_enabled_setting: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("ipAllowListEnabledSetting")
    )

    @classmethod
    def ip_allow_list_entries(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IpAllowListEntryOrder] = None
    ) -> "IpAllowListEntryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IpAllowListEntryOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IpAllowListEntryConnectionFields(
            "ip_allow_list_entries", arguments=cleared_arguments
        )

    ip_allow_list_for_installed_apps_enabled_setting: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("ipAllowListForInstalledAppsEnabledSetting")
    )

    @classmethod
    def is_sponsored_by(cls, account_login: str) -> "OrganizationGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "accountLogin": {"type": "String!", "value": account_login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationGraphQLField("is_sponsored_by", arguments=cleared_arguments)

    is_sponsoring_viewer: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "isSponsoringViewer"
    )
    is_verified: "OrganizationGraphQLField" = OrganizationGraphQLField("isVerified")

    @classmethod
    def issue_types(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueTypeOrder] = None
    ) -> "IssueTypeConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueTypeOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueTypeConnectionFields("issue_types", arguments=cleared_arguments)

    @classmethod
    def item_showcase(cls) -> "ProfileItemShowcaseFields":
        return ProfileItemShowcaseFields("item_showcase")

    @classmethod
    def lifetime_received_sponsorship_values(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorAndLifetimeValueOrder] = None
    ) -> "SponsorAndLifetimeValueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorAndLifetimeValueOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorAndLifetimeValueConnectionFields(
            "lifetime_received_sponsorship_values", arguments=cleared_arguments
        )

    location: "OrganizationGraphQLField" = OrganizationGraphQLField("location")
    login: "OrganizationGraphQLField" = OrganizationGraphQLField("login")

    @classmethod
    def mannequins(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        login: Optional[str] = None,
        order_by: Optional[MannequinOrder] = None
    ) -> "MannequinConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "login": {"type": "String", "value": login},
            "orderBy": {"type": "MannequinOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MannequinConnectionFields("mannequins", arguments=cleared_arguments)

    @classmethod
    def member_statuses(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[UserStatusOrder] = None
    ) -> "UserStatusConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "UserStatusOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserStatusConnectionFields(
            "member_statuses", arguments=cleared_arguments
        )

    members_can_fork_private_repositories: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("membersCanForkPrivateRepositories")
    )

    @classmethod
    def members_with_role(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "OrganizationMemberConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationMemberConnectionFields(
            "members_with_role", arguments=cleared_arguments
        )

    monthly_estimated_sponsors_income_in_cents: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("monthlyEstimatedSponsorsIncomeInCents")
    )
    name: "OrganizationGraphQLField" = OrganizationGraphQLField("name")
    new_team_resource_path: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "newTeamResourcePath"
    )
    new_team_url: "OrganizationGraphQLField" = OrganizationGraphQLField("newTeamUrl")
    notification_delivery_restriction_enabled_setting: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("notificationDeliveryRestrictionEnabledSetting")
    )
    organization_billing_email: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "organizationBillingEmail"
    )

    @classmethod
    def packages(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        names: Optional[str] = None,
        order_by: Optional[PackageOrder] = None,
        package_type: Optional[PackageType] = None,
        repository_id: Optional[str] = None
    ) -> "PackageConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "names": {"type": "String", "value": names},
            "orderBy": {"type": "PackageOrder", "value": order_by},
            "packageType": {"type": "PackageType", "value": package_type},
            "repositoryId": {"type": "ID", "value": repository_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PackageConnectionFields("packages", arguments=cleared_arguments)

    @classmethod
    def pending_members(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("pending_members", arguments=cleared_arguments)

    @classmethod
    def pinnable_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        types: Optional[PinnableItemType] = None
    ) -> "PinnableItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "types": {"type": "PinnableItemType", "value": types},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnableItemConnectionFields(
            "pinnable_items", arguments=cleared_arguments
        )

    @classmethod
    def pinned_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        types: Optional[PinnableItemType] = None
    ) -> "PinnableItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "types": {"type": "PinnableItemType", "value": types},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnableItemConnectionFields("pinned_items", arguments=cleared_arguments)

    pinned_items_remaining: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "pinnedItemsRemaining"
    )

    @classmethod
    def project(cls, number: int) -> "ProjectFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields("project", arguments=cleared_arguments)

    @classmethod
    def project_v_2(cls, number: int) -> "ProjectV2Fields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2Fields("project_v_2", arguments=cleared_arguments)

    @classmethod
    def projects(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectOrder] = None,
        search: Optional[str] = None,
        states: Optional[ProjectState] = None
    ) -> "ProjectConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectOrder", "value": order_by},
            "search": {"type": "String", "value": search},
            "states": {"type": "ProjectState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectConnectionFields("projects", arguments=cleared_arguments)

    projects_resource_path: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "projectsResourcePath"
    )
    projects_url: "OrganizationGraphQLField" = OrganizationGraphQLField("projectsUrl")

    @classmethod
    def projects_v_2(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        min_permission_level: Optional[ProjectV2PermissionLevel] = None,
        order_by: Optional[ProjectV2Order] = None,
        query: Optional[str] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "minPermissionLevel": {
                "type": "ProjectV2PermissionLevel",
                "value": min_permission_level,
            },
            "orderBy": {"type": "ProjectV2Order", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("projects_v_2", arguments=cleared_arguments)

    @classmethod
    def recent_projects(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("recent_projects", arguments=cleared_arguments)

    @classmethod
    def repositories(
        cls,
        *,
        affiliations: Optional[RepositoryAffiliation] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        has_issues_enabled: Optional[bool] = None,
        is_archived: Optional[bool] = None,
        is_fork: Optional[bool] = None,
        is_locked: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None,
        owner_affiliations: Optional[RepositoryAffiliation] = None,
        privacy: Optional[RepositoryPrivacy] = None,
        visibility: Optional[RepositoryVisibility] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "affiliations": {"type": "RepositoryAffiliation", "value": affiliations},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "hasIssuesEnabled": {"type": "Boolean", "value": has_issues_enabled},
            "isArchived": {"type": "Boolean", "value": is_archived},
            "isFork": {"type": "Boolean", "value": is_fork},
            "isLocked": {"type": "Boolean", "value": is_locked},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
            "ownerAffiliations": {
                "type": "RepositoryAffiliation",
                "value": owner_affiliations,
            },
            "privacy": {"type": "RepositoryPrivacy", "value": privacy},
            "visibility": {"type": "RepositoryVisibility", "value": visibility},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields("repositories", arguments=cleared_arguments)

    @classmethod
    def repository(
        cls, name: str, *, follow_renames: Optional[bool] = None
    ) -> "RepositoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "followRenames": {"type": "Boolean", "value": follow_renames},
            "name": {"type": "String!", "value": name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryFields("repository", arguments=cleared_arguments)

    @classmethod
    def repository_discussion_comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        only_answers: Optional[bool] = None,
        repository_id: Optional[str] = None
    ) -> "DiscussionCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "onlyAnswers": {"type": "Boolean", "value": only_answers},
            "repositoryId": {"type": "ID", "value": repository_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionCommentConnectionFields(
            "repository_discussion_comments", arguments=cleared_arguments
        )

    @classmethod
    def repository_discussions(
        cls,
        *,
        after: Optional[str] = None,
        answered: Optional[bool] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[DiscussionOrder] = None,
        repository_id: Optional[str] = None,
        states: Optional[DiscussionState] = None
    ) -> "DiscussionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "answered": {"type": "Boolean", "value": answered},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "DiscussionOrder", "value": order_by},
            "repositoryId": {"type": "ID", "value": repository_id},
            "states": {"type": "DiscussionState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionConnectionFields(
            "repository_discussions", arguments=cleared_arguments
        )

    @classmethod
    def repository_migrations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryMigrationOrder] = None,
        repository_name: Optional[str] = None,
        state: Optional[MigrationState] = None
    ) -> "RepositoryMigrationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryMigrationOrder", "value": order_by},
            "repositoryName": {"type": "String", "value": repository_name},
            "state": {"type": "MigrationState", "value": state},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryMigrationConnectionFields(
            "repository_migrations", arguments=cleared_arguments
        )

    requires_two_factor_authentication: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("requiresTwoFactorAuthentication")
    )
    resource_path: "OrganizationGraphQLField" = OrganizationGraphQLField("resourcePath")

    @classmethod
    def ruleset(
        cls, database_id: int, *, include_parents: Optional[bool] = None
    ) -> "RepositoryRulesetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "databaseId": {"type": "Int!", "value": database_id},
            "includeParents": {"type": "Boolean", "value": include_parents},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRulesetFields("ruleset", arguments=cleared_arguments)

    @classmethod
    def rulesets(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_parents: Optional[bool] = None,
        last: Optional[int] = None,
        targets: Optional[RepositoryRulesetTarget] = None
    ) -> "RepositoryRulesetConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeParents": {"type": "Boolean", "value": include_parents},
            "last": {"type": "Int", "value": last},
            "targets": {"type": "RepositoryRulesetTarget", "value": targets},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRulesetConnectionFields(
            "rulesets", arguments=cleared_arguments
        )

    @classmethod
    def saml_identity_provider(cls) -> "OrganizationIdentityProviderFields":
        return OrganizationIdentityProviderFields("saml_identity_provider")

    @classmethod
    def sponsoring(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorOrder] = None
    ) -> "SponsorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorConnectionFields("sponsoring", arguments=cleared_arguments)

    @classmethod
    def sponsors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorOrder] = None,
        tier_id: Optional[str] = None
    ) -> "SponsorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorOrder", "value": order_by},
            "tierId": {"type": "ID", "value": tier_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorConnectionFields("sponsors", arguments=cleared_arguments)

    @classmethod
    def sponsors_activities(
        cls,
        *,
        actions: Optional[SponsorsActivityAction] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_as_sponsor: Optional[bool] = None,
        include_private: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorsActivityOrder] = None,
        period: Optional[SponsorsActivityPeriod] = None,
        since: Optional[Any] = None,
        until: Optional[Any] = None
    ) -> "SponsorsActivityConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "actions": {"type": "SponsorsActivityAction", "value": actions},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeAsSponsor": {"type": "Boolean", "value": include_as_sponsor},
            "includePrivate": {"type": "Boolean", "value": include_private},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorsActivityOrder", "value": order_by},
            "period": {"type": "SponsorsActivityPeriod", "value": period},
            "since": {"type": "DateTime", "value": since},
            "until": {"type": "DateTime", "value": until},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorsActivityConnectionFields(
            "sponsors_activities", arguments=cleared_arguments
        )

    @classmethod
    def sponsors_listing(cls) -> "SponsorsListingFields":
        return SponsorsListingFields("sponsors_listing")

    @classmethod
    def sponsorship_for_viewer_as_sponsor(
        cls, *, active_only: Optional[bool] = None
    ) -> "SponsorshipFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipFields(
            "sponsorship_for_viewer_as_sponsor", arguments=cleared_arguments
        )

    @classmethod
    def sponsorship_for_viewer_as_sponsorable(
        cls, *, active_only: Optional[bool] = None
    ) -> "SponsorshipFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipFields(
            "sponsorship_for_viewer_as_sponsorable", arguments=cleared_arguments
        )

    @classmethod
    def sponsorship_newsletters(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorshipNewsletterOrder] = None
    ) -> "SponsorshipNewsletterConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorshipNewsletterOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipNewsletterConnectionFields(
            "sponsorship_newsletters", arguments=cleared_arguments
        )

    @classmethod
    def sponsorships_as_maintainer(
        cls,
        *,
        active_only: Optional[bool] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_private: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorshipOrder] = None
    ) -> "SponsorshipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includePrivate": {"type": "Boolean", "value": include_private},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorshipOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipConnectionFields(
            "sponsorships_as_maintainer", arguments=cleared_arguments
        )

    @classmethod
    def sponsorships_as_sponsor(
        cls,
        *,
        active_only: Optional[bool] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        maintainer_logins: Optional[str] = None,
        order_by: Optional[SponsorshipOrder] = None
    ) -> "SponsorshipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "maintainerLogins": {"type": "String", "value": maintainer_logins},
            "orderBy": {"type": "SponsorshipOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipConnectionFields(
            "sponsorships_as_sponsor", arguments=cleared_arguments
        )

    @classmethod
    def team(cls, slug: str) -> "TeamFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "slug": {"type": "String!", "value": slug}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamFields("team", arguments=cleared_arguments)

    @classmethod
    def teams(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        ldap_mapped: Optional[bool] = None,
        notification_setting: Optional[TeamNotificationSetting] = None,
        order_by: Optional[TeamOrder] = None,
        privacy: Optional[TeamPrivacy] = None,
        query: Optional[str] = None,
        role: Optional[TeamRole] = None,
        root_teams_only: Optional[bool] = None,
        user_logins: Optional[str] = None
    ) -> "TeamConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "ldapMapped": {"type": "Boolean", "value": ldap_mapped},
            "notificationSetting": {
                "type": "TeamNotificationSetting",
                "value": notification_setting,
            },
            "orderBy": {"type": "TeamOrder", "value": order_by},
            "privacy": {"type": "TeamPrivacy", "value": privacy},
            "query": {"type": "String", "value": query},
            "role": {"type": "TeamRole", "value": role},
            "rootTeamsOnly": {"type": "Boolean", "value": root_teams_only},
            "userLogins": {"type": "String", "value": user_logins},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamConnectionFields("teams", arguments=cleared_arguments)

    teams_resource_path: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "teamsResourcePath"
    )
    teams_url: "OrganizationGraphQLField" = OrganizationGraphQLField("teamsUrl")

    @classmethod
    def total_sponsorship_amount_as_sponsor_in_cents(
        cls,
        *,
        since: Optional[Any] = None,
        sponsorable_logins: Optional[str] = None,
        until: Optional[Any] = None
    ) -> "OrganizationGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "since": {"type": "DateTime", "value": since},
            "sponsorableLogins": {"type": "String", "value": sponsorable_logins},
            "until": {"type": "DateTime", "value": until},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationGraphQLField(
            "total_sponsorship_amount_as_sponsor_in_cents", arguments=cleared_arguments
        )

    twitter_username: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "twitterUsername"
    )
    updated_at: "OrganizationGraphQLField" = OrganizationGraphQLField("updatedAt")
    url: "OrganizationGraphQLField" = OrganizationGraphQLField("url")
    viewer_can_administer: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "viewerCanAdminister"
    )
    viewer_can_change_pinned_items: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("viewerCanChangePinnedItems")
    )
    viewer_can_create_projects: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "viewerCanCreateProjects"
    )
    viewer_can_create_repositories: "OrganizationGraphQLField" = (
        OrganizationGraphQLField("viewerCanCreateRepositories")
    )
    viewer_can_create_teams: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "viewerCanCreateTeams"
    )
    viewer_can_sponsor: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "viewerCanSponsor"
    )
    viewer_is_a_member: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "viewerIsAMember"
    )
    viewer_is_following: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "viewerIsFollowing"
    )
    viewer_is_sponsoring: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "viewerIsSponsoring"
    )
    web_commit_signoff_required: "OrganizationGraphQLField" = OrganizationGraphQLField(
        "webCommitSignoffRequired"
    )
    website_url: "OrganizationGraphQLField" = OrganizationGraphQLField("websiteUrl")

    def fields(
        self,
        *subfields: Union[
            OrganizationGraphQLField,
            "AnnouncementBannerFields",
            "DiscussionCommentConnectionFields",
            "DiscussionConnectionFields",
            "IpAllowListEntryConnectionFields",
            "IssueTypeConnectionFields",
            "MannequinConnectionFields",
            "OrganizationAuditEntryConnectionFields",
            "OrganizationEnterpriseOwnerConnectionFields",
            "OrganizationIdentityProviderFields",
            "OrganizationMemberConnectionFields",
            "PackageConnectionFields",
            "PinnableItemConnectionFields",
            "ProfileItemShowcaseFields",
            "ProjectConnectionFields",
            "ProjectFields",
            "ProjectV2ConnectionFields",
            "ProjectV2Fields",
            "RepositoryConnectionFields",
            "RepositoryFields",
            "RepositoryInteractionAbilityFields",
            "RepositoryMigrationConnectionFields",
            "RepositoryRulesetConnectionFields",
            "RepositoryRulesetFields",
            "SponsorAndLifetimeValueConnectionFields",
            "SponsorConnectionFields",
            "SponsorsActivityConnectionFields",
            "SponsorsListingFields",
            "SponsorshipConnectionFields",
            "SponsorshipFields",
            "SponsorshipNewsletterConnectionFields",
            "TeamConnectionFields",
            "TeamFields",
            "UserConnectionFields",
            "UserStatusConnectionFields",
            "VerifiableDomainConnectionFields",
        ]
    ) -> "OrganizationFields":
        """Subfields should come from the OrganizationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationFields":
        self._alias = alias
        return self


class OrganizationAuditEntryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "OrganizationAuditEntryEdgeFields":
        return OrganizationAuditEntryEdgeFields("edges")

    nodes: "OrganizationAuditEntryUnion" = OrganizationAuditEntryUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "OrganizationAuditEntryConnectionGraphQLField" = (
        OrganizationAuditEntryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            OrganizationAuditEntryConnectionGraphQLField,
            "OrganizationAuditEntryEdgeFields",
            "OrganizationAuditEntryUnion",
            "PageInfoFields",
        ]
    ) -> "OrganizationAuditEntryConnectionFields":
        """Subfields should come from the OrganizationAuditEntryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationAuditEntryConnectionFields":
        self._alias = alias
        return self


class OrganizationAuditEntryDataInterface(GraphQLField):
    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "OrganizationAuditEntryDataGraphQLField" = (
        OrganizationAuditEntryDataGraphQLField("organizationName")
    )
    organization_resource_path: "OrganizationAuditEntryDataGraphQLField" = (
        OrganizationAuditEntryDataGraphQLField("organizationResourcePath")
    )
    organization_url: "OrganizationAuditEntryDataGraphQLField" = (
        OrganizationAuditEntryDataGraphQLField("organizationUrl")
    )

    def fields(
        self,
        *subfields: Union[OrganizationAuditEntryDataGraphQLField, "OrganizationFields"]
    ) -> "OrganizationAuditEntryDataInterface":
        """Subfields should come from the OrganizationAuditEntryDataInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationAuditEntryDataInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "OrganizationAuditEntryDataInterface":
        self._inline_fragments[type_name] = subfields
        return self


class OrganizationAuditEntryEdgeFields(GraphQLField):
    cursor: "OrganizationAuditEntryEdgeGraphQLField" = (
        OrganizationAuditEntryEdgeGraphQLField("cursor")
    )
    node: "OrganizationAuditEntryUnion" = OrganizationAuditEntryUnion("node")

    def fields(
        self,
        *subfields: Union[
            OrganizationAuditEntryEdgeGraphQLField, "OrganizationAuditEntryUnion"
        ]
    ) -> "OrganizationAuditEntryEdgeFields":
        """Subfields should come from the OrganizationAuditEntryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationAuditEntryEdgeFields":
        self._alias = alias
        return self


class OrganizationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "OrganizationEdgeFields":
        return OrganizationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "OrganizationFields":
        return OrganizationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "OrganizationConnectionGraphQLField" = (
        OrganizationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            OrganizationConnectionGraphQLField,
            "OrganizationEdgeFields",
            "OrganizationFields",
            "PageInfoFields",
        ]
    ) -> "OrganizationConnectionFields":
        """Subfields should come from the OrganizationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationConnectionFields":
        self._alias = alias
        return self


class OrganizationEdgeFields(GraphQLField):
    cursor: "OrganizationEdgeGraphQLField" = OrganizationEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "OrganizationFields":
        return OrganizationFields("node")

    def fields(
        self, *subfields: Union[OrganizationEdgeGraphQLField, "OrganizationFields"]
    ) -> "OrganizationEdgeFields":
        """Subfields should come from the OrganizationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationEdgeFields":
        self._alias = alias
        return self


class OrganizationEnterpriseOwnerConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "OrganizationEnterpriseOwnerEdgeFields":
        return OrganizationEnterpriseOwnerEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "OrganizationEnterpriseOwnerConnectionGraphQLField" = (
        OrganizationEnterpriseOwnerConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            OrganizationEnterpriseOwnerConnectionGraphQLField,
            "OrganizationEnterpriseOwnerEdgeFields",
            "PageInfoFields",
            "UserFields",
        ]
    ) -> "OrganizationEnterpriseOwnerConnectionFields":
        """Subfields should come from the OrganizationEnterpriseOwnerConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationEnterpriseOwnerConnectionFields":
        self._alias = alias
        return self


class OrganizationEnterpriseOwnerEdgeFields(GraphQLField):
    cursor: "OrganizationEnterpriseOwnerEdgeGraphQLField" = (
        OrganizationEnterpriseOwnerEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    organization_role: "OrganizationEnterpriseOwnerEdgeGraphQLField" = (
        OrganizationEnterpriseOwnerEdgeGraphQLField("organizationRole")
    )

    def fields(
        self,
        *subfields: Union[OrganizationEnterpriseOwnerEdgeGraphQLField, "UserFields"]
    ) -> "OrganizationEnterpriseOwnerEdgeFields":
        """Subfields should come from the OrganizationEnterpriseOwnerEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationEnterpriseOwnerEdgeFields":
        self._alias = alias
        return self


class OrganizationIdentityProviderFields(GraphQLField):
    digest_method: "OrganizationIdentityProviderGraphQLField" = (
        OrganizationIdentityProviderGraphQLField("digestMethod")
    )

    @classmethod
    def external_identities(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        login: Optional[str] = None,
        members_only: Optional[bool] = None,
        user_name: Optional[str] = None
    ) -> "ExternalIdentityConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "login": {"type": "String", "value": login},
            "membersOnly": {"type": "Boolean", "value": members_only},
            "userName": {"type": "String", "value": user_name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExternalIdentityConnectionFields(
            "external_identities", arguments=cleared_arguments
        )

    id: "OrganizationIdentityProviderGraphQLField" = (
        OrganizationIdentityProviderGraphQLField("id")
    )
    idp_certificate: "OrganizationIdentityProviderGraphQLField" = (
        OrganizationIdentityProviderGraphQLField("idpCertificate")
    )
    issuer: "OrganizationIdentityProviderGraphQLField" = (
        OrganizationIdentityProviderGraphQLField("issuer")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    signature_method: "OrganizationIdentityProviderGraphQLField" = (
        OrganizationIdentityProviderGraphQLField("signatureMethod")
    )
    sso_url: "OrganizationIdentityProviderGraphQLField" = (
        OrganizationIdentityProviderGraphQLField("ssoUrl")
    )

    def fields(
        self,
        *subfields: Union[
            OrganizationIdentityProviderGraphQLField,
            "ExternalIdentityConnectionFields",
            "OrganizationFields",
        ]
    ) -> "OrganizationIdentityProviderFields":
        """Subfields should come from the OrganizationIdentityProviderFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationIdentityProviderFields":
        self._alias = alias
        return self


class OrganizationInvitationFields(GraphQLField):
    created_at: "OrganizationInvitationGraphQLField" = (
        OrganizationInvitationGraphQLField("createdAt")
    )
    email: "OrganizationInvitationGraphQLField" = OrganizationInvitationGraphQLField(
        "email"
    )
    id: "OrganizationInvitationGraphQLField" = OrganizationInvitationGraphQLField("id")
    invitation_source: "OrganizationInvitationGraphQLField" = (
        OrganizationInvitationGraphQLField("invitationSource")
    )
    invitation_type: "OrganizationInvitationGraphQLField" = (
        OrganizationInvitationGraphQLField("invitationType")
    )

    @classmethod
    def invitee(cls) -> "UserFields":
        return UserFields("invitee")

    @classmethod
    def inviter(cls) -> "UserFields":
        return UserFields("inviter")

    @classmethod
    def inviter_actor(cls) -> "UserFields":
        return UserFields("inviter_actor")

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    role: "OrganizationInvitationGraphQLField" = OrganizationInvitationGraphQLField(
        "role"
    )

    def fields(
        self,
        *subfields: Union[
            OrganizationInvitationGraphQLField, "OrganizationFields", "UserFields"
        ]
    ) -> "OrganizationInvitationFields":
        """Subfields should come from the OrganizationInvitationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationInvitationFields":
        self._alias = alias
        return self


class OrganizationInvitationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "OrganizationInvitationEdgeFields":
        return OrganizationInvitationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "OrganizationInvitationFields":
        return OrganizationInvitationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "OrganizationInvitationConnectionGraphQLField" = (
        OrganizationInvitationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            OrganizationInvitationConnectionGraphQLField,
            "OrganizationInvitationEdgeFields",
            "OrganizationInvitationFields",
            "PageInfoFields",
        ]
    ) -> "OrganizationInvitationConnectionFields":
        """Subfields should come from the OrganizationInvitationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationInvitationConnectionFields":
        self._alias = alias
        return self


class OrganizationInvitationEdgeFields(GraphQLField):
    cursor: "OrganizationInvitationEdgeGraphQLField" = (
        OrganizationInvitationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "OrganizationInvitationFields":
        return OrganizationInvitationFields("node")

    def fields(
        self,
        *subfields: Union[
            OrganizationInvitationEdgeGraphQLField, "OrganizationInvitationFields"
        ]
    ) -> "OrganizationInvitationEdgeFields":
        """Subfields should come from the OrganizationInvitationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationInvitationEdgeFields":
        self._alias = alias
        return self


class OrganizationMemberConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "OrganizationMemberEdgeFields":
        return OrganizationMemberEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "OrganizationMemberConnectionGraphQLField" = (
        OrganizationMemberConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            OrganizationMemberConnectionGraphQLField,
            "OrganizationMemberEdgeFields",
            "PageInfoFields",
            "UserFields",
        ]
    ) -> "OrganizationMemberConnectionFields":
        """Subfields should come from the OrganizationMemberConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationMemberConnectionFields":
        self._alias = alias
        return self


class OrganizationMemberEdgeFields(GraphQLField):
    cursor: "OrganizationMemberEdgeGraphQLField" = OrganizationMemberEdgeGraphQLField(
        "cursor"
    )
    has_two_factor_enabled: "OrganizationMemberEdgeGraphQLField" = (
        OrganizationMemberEdgeGraphQLField("hasTwoFactorEnabled")
    )

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    role: "OrganizationMemberEdgeGraphQLField" = OrganizationMemberEdgeGraphQLField(
        "role"
    )

    def fields(
        self, *subfields: Union[OrganizationMemberEdgeGraphQLField, "UserFields"]
    ) -> "OrganizationMemberEdgeFields":
        """Subfields should come from the OrganizationMemberEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationMemberEdgeFields":
        self._alias = alias
        return self


class OrganizationMigrationFields(GraphQLField):
    created_at: "OrganizationMigrationGraphQLField" = OrganizationMigrationGraphQLField(
        "createdAt"
    )
    database_id: "OrganizationMigrationGraphQLField" = (
        OrganizationMigrationGraphQLField("databaseId")
    )
    failure_reason: "OrganizationMigrationGraphQLField" = (
        OrganizationMigrationGraphQLField("failureReason")
    )
    id: "OrganizationMigrationGraphQLField" = OrganizationMigrationGraphQLField("id")
    remaining_repositories_count: "OrganizationMigrationGraphQLField" = (
        OrganizationMigrationGraphQLField("remainingRepositoriesCount")
    )
    source_org_name: "OrganizationMigrationGraphQLField" = (
        OrganizationMigrationGraphQLField("sourceOrgName")
    )
    source_org_url: "OrganizationMigrationGraphQLField" = (
        OrganizationMigrationGraphQLField("sourceOrgUrl")
    )
    state: "OrganizationMigrationGraphQLField" = OrganizationMigrationGraphQLField(
        "state"
    )
    target_org_name: "OrganizationMigrationGraphQLField" = (
        OrganizationMigrationGraphQLField("targetOrgName")
    )
    total_repositories_count: "OrganizationMigrationGraphQLField" = (
        OrganizationMigrationGraphQLField("totalRepositoriesCount")
    )

    def fields(
        self, *subfields: OrganizationMigrationGraphQLField
    ) -> "OrganizationMigrationFields":
        """Subfields should come from the OrganizationMigrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OrganizationMigrationFields":
        self._alias = alias
        return self


class PackageFields(GraphQLField):
    id: "PackageGraphQLField" = PackageGraphQLField("id")

    @classmethod
    def latest_version(cls) -> "PackageVersionFields":
        return PackageVersionFields("latest_version")

    name: "PackageGraphQLField" = PackageGraphQLField("name")
    package_type: "PackageGraphQLField" = PackageGraphQLField("packageType")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    @classmethod
    def statistics(cls) -> "PackageStatisticsFields":
        return PackageStatisticsFields("statistics")

    @classmethod
    def version(cls, version: str) -> "PackageVersionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "version": {"type": "String!", "value": version}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PackageVersionFields("version", arguments=cleared_arguments)

    @classmethod
    def versions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[PackageVersionOrder] = None
    ) -> "PackageVersionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "PackageVersionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PackageVersionConnectionFields("versions", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            PackageGraphQLField,
            "PackageStatisticsFields",
            "PackageVersionConnectionFields",
            "PackageVersionFields",
            "RepositoryFields",
        ]
    ) -> "PackageFields":
        """Subfields should come from the PackageFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageFields":
        self._alias = alias
        return self


class PackageConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PackageEdgeFields":
        return PackageEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PackageFields":
        return PackageFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PackageConnectionGraphQLField" = PackageConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            PackageConnectionGraphQLField,
            "PackageEdgeFields",
            "PackageFields",
            "PageInfoFields",
        ]
    ) -> "PackageConnectionFields":
        """Subfields should come from the PackageConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageConnectionFields":
        self._alias = alias
        return self


class PackageEdgeFields(GraphQLField):
    cursor: "PackageEdgeGraphQLField" = PackageEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "PackageFields":
        return PackageFields("node")

    def fields(
        self, *subfields: Union[PackageEdgeGraphQLField, "PackageFields"]
    ) -> "PackageEdgeFields":
        """Subfields should come from the PackageEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageEdgeFields":
        self._alias = alias
        return self


class PackageFileFields(GraphQLField):
    id: "PackageFileGraphQLField" = PackageFileGraphQLField("id")
    md_5: "PackageFileGraphQLField" = PackageFileGraphQLField("md5")
    name: "PackageFileGraphQLField" = PackageFileGraphQLField("name")

    @classmethod
    def package_version(cls) -> "PackageVersionFields":
        return PackageVersionFields("package_version")

    sha_1: "PackageFileGraphQLField" = PackageFileGraphQLField("sha1")
    sha_256: "PackageFileGraphQLField" = PackageFileGraphQLField("sha256")
    size: "PackageFileGraphQLField" = PackageFileGraphQLField("size")
    updated_at: "PackageFileGraphQLField" = PackageFileGraphQLField("updatedAt")
    url: "PackageFileGraphQLField" = PackageFileGraphQLField("url")

    def fields(
        self, *subfields: Union[PackageFileGraphQLField, "PackageVersionFields"]
    ) -> "PackageFileFields":
        """Subfields should come from the PackageFileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageFileFields":
        self._alias = alias
        return self


class PackageFileConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PackageFileEdgeFields":
        return PackageFileEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PackageFileFields":
        return PackageFileFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PackageFileConnectionGraphQLField" = (
        PackageFileConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PackageFileConnectionGraphQLField,
            "PackageFileEdgeFields",
            "PackageFileFields",
            "PageInfoFields",
        ]
    ) -> "PackageFileConnectionFields":
        """Subfields should come from the PackageFileConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageFileConnectionFields":
        self._alias = alias
        return self


class PackageFileEdgeFields(GraphQLField):
    cursor: "PackageFileEdgeGraphQLField" = PackageFileEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "PackageFileFields":
        return PackageFileFields("node")

    def fields(
        self, *subfields: Union[PackageFileEdgeGraphQLField, "PackageFileFields"]
    ) -> "PackageFileEdgeFields":
        """Subfields should come from the PackageFileEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageFileEdgeFields":
        self._alias = alias
        return self


class PackageOwnerInterface(GraphQLField):
    id: "PackageOwnerGraphQLField" = PackageOwnerGraphQLField("id")

    @classmethod
    def packages(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        names: Optional[str] = None,
        order_by: Optional[PackageOrder] = None,
        package_type: Optional[PackageType] = None,
        repository_id: Optional[str] = None
    ) -> "PackageConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "names": {"type": "String", "value": names},
            "orderBy": {"type": "PackageOrder", "value": order_by},
            "packageType": {"type": "PackageType", "value": package_type},
            "repositoryId": {"type": "ID", "value": repository_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PackageConnectionFields("packages", arguments=cleared_arguments)

    def fields(
        self, *subfields: Union[PackageOwnerGraphQLField, "PackageConnectionFields"]
    ) -> "PackageOwnerInterface":
        """Subfields should come from the PackageOwnerInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageOwnerInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "PackageOwnerInterface":
        self._inline_fragments[type_name] = subfields
        return self


class PackageStatisticsFields(GraphQLField):
    downloads_total_count: "PackageStatisticsGraphQLField" = (
        PackageStatisticsGraphQLField("downloadsTotalCount")
    )

    def fields(
        self, *subfields: PackageStatisticsGraphQLField
    ) -> "PackageStatisticsFields":
        """Subfields should come from the PackageStatisticsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageStatisticsFields":
        self._alias = alias
        return self


class PackageVersionFields(GraphQLField):
    @classmethod
    def files(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[PackageFileOrder] = None
    ) -> "PackageFileConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "PackageFileOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PackageFileConnectionFields("files", arguments=cleared_arguments)

    id: "PackageVersionGraphQLField" = PackageVersionGraphQLField("id")

    @classmethod
    def package(cls) -> "PackageFields":
        return PackageFields("package")

    platform: "PackageVersionGraphQLField" = PackageVersionGraphQLField("platform")
    pre_release: "PackageVersionGraphQLField" = PackageVersionGraphQLField("preRelease")
    readme: "PackageVersionGraphQLField" = PackageVersionGraphQLField("readme")

    @classmethod
    def release(cls) -> "ReleaseFields":
        return ReleaseFields("release")

    @classmethod
    def statistics(cls) -> "PackageVersionStatisticsFields":
        return PackageVersionStatisticsFields("statistics")

    summary: "PackageVersionGraphQLField" = PackageVersionGraphQLField("summary")
    version: "PackageVersionGraphQLField" = PackageVersionGraphQLField("version")

    def fields(
        self,
        *subfields: Union[
            PackageVersionGraphQLField,
            "PackageFields",
            "PackageFileConnectionFields",
            "PackageVersionStatisticsFields",
            "ReleaseFields",
        ]
    ) -> "PackageVersionFields":
        """Subfields should come from the PackageVersionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageVersionFields":
        self._alias = alias
        return self


class PackageVersionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PackageVersionEdgeFields":
        return PackageVersionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PackageVersionFields":
        return PackageVersionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PackageVersionConnectionGraphQLField" = (
        PackageVersionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PackageVersionConnectionGraphQLField,
            "PackageVersionEdgeFields",
            "PackageVersionFields",
            "PageInfoFields",
        ]
    ) -> "PackageVersionConnectionFields":
        """Subfields should come from the PackageVersionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageVersionConnectionFields":
        self._alias = alias
        return self


class PackageVersionEdgeFields(GraphQLField):
    cursor: "PackageVersionEdgeGraphQLField" = PackageVersionEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "PackageVersionFields":
        return PackageVersionFields("node")

    def fields(
        self, *subfields: Union[PackageVersionEdgeGraphQLField, "PackageVersionFields"]
    ) -> "PackageVersionEdgeFields":
        """Subfields should come from the PackageVersionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageVersionEdgeFields":
        self._alias = alias
        return self


class PackageVersionStatisticsFields(GraphQLField):
    downloads_total_count: "PackageVersionStatisticsGraphQLField" = (
        PackageVersionStatisticsGraphQLField("downloadsTotalCount")
    )

    def fields(
        self, *subfields: PackageVersionStatisticsGraphQLField
    ) -> "PackageVersionStatisticsFields":
        """Subfields should come from the PackageVersionStatisticsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PackageVersionStatisticsFields":
        self._alias = alias
        return self


class PageInfoFields(GraphQLField):
    end_cursor: "PageInfoGraphQLField" = PageInfoGraphQLField("endCursor")
    has_next_page: "PageInfoGraphQLField" = PageInfoGraphQLField("hasNextPage")
    has_previous_page: "PageInfoGraphQLField" = PageInfoGraphQLField("hasPreviousPage")
    start_cursor: "PageInfoGraphQLField" = PageInfoGraphQLField("startCursor")

    def fields(self, *subfields: PageInfoGraphQLField) -> "PageInfoFields":
        """Subfields should come from the PageInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PageInfoFields":
        self._alias = alias
        return self


class ParentIssueAddedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ParentIssueAddedEventGraphQLField" = ParentIssueAddedEventGraphQLField(
        "createdAt"
    )
    id: "ParentIssueAddedEventGraphQLField" = ParentIssueAddedEventGraphQLField("id")

    @classmethod
    def parent(cls) -> "IssueFields":
        return IssueFields("parent")

    def fields(
        self,
        *subfields: Union[
            ParentIssueAddedEventGraphQLField, "ActorInterface", "IssueFields"
        ]
    ) -> "ParentIssueAddedEventFields":
        """Subfields should come from the ParentIssueAddedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ParentIssueAddedEventFields":
        self._alias = alias
        return self


class ParentIssueRemovedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ParentIssueRemovedEventGraphQLField" = (
        ParentIssueRemovedEventGraphQLField("createdAt")
    )
    id: "ParentIssueRemovedEventGraphQLField" = ParentIssueRemovedEventGraphQLField(
        "id"
    )

    @classmethod
    def parent(cls) -> "IssueFields":
        return IssueFields("parent")

    def fields(
        self,
        *subfields: Union[
            ParentIssueRemovedEventGraphQLField, "ActorInterface", "IssueFields"
        ]
    ) -> "ParentIssueRemovedEventFields":
        """Subfields should come from the ParentIssueRemovedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ParentIssueRemovedEventFields":
        self._alias = alias
        return self


class PermissionSourceFields(GraphQLField):
    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    permission: "PermissionSourceGraphQLField" = PermissionSourceGraphQLField(
        "permission"
    )
    role_name: "PermissionSourceGraphQLField" = PermissionSourceGraphQLField("roleName")
    source: "PermissionGranterUnion" = PermissionGranterUnion("source")

    def fields(
        self,
        *subfields: Union[
            PermissionSourceGraphQLField, "OrganizationFields", "PermissionGranterUnion"
        ]
    ) -> "PermissionSourceFields":
        """Subfields should come from the PermissionSourceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PermissionSourceFields":
        self._alias = alias
        return self


class PinEnvironmentPayloadFields(GraphQLField):
    client_mutation_id: "PinEnvironmentPayloadGraphQLField" = (
        PinEnvironmentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def environment(cls) -> "EnvironmentFields":
        return EnvironmentFields("environment")

    @classmethod
    def pinned_environment(cls) -> "PinnedEnvironmentFields":
        return PinnedEnvironmentFields("pinned_environment")

    def fields(
        self,
        *subfields: Union[
            PinEnvironmentPayloadGraphQLField,
            "EnvironmentFields",
            "PinnedEnvironmentFields",
        ]
    ) -> "PinEnvironmentPayloadFields":
        """Subfields should come from the PinEnvironmentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinEnvironmentPayloadFields":
        self._alias = alias
        return self


class PinIssuePayloadFields(GraphQLField):
    client_mutation_id: "PinIssuePayloadGraphQLField" = PinIssuePayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[PinIssuePayloadGraphQLField, "IssueFields"]
    ) -> "PinIssuePayloadFields":
        """Subfields should come from the PinIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinIssuePayloadFields":
        self._alias = alias
        return self


class PinnableItemConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PinnableItemEdgeFields":
        return PinnableItemEdgeFields("edges")

    nodes: "PinnableItemUnion" = PinnableItemUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PinnableItemConnectionGraphQLField" = (
        PinnableItemConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PinnableItemConnectionGraphQLField,
            "PageInfoFields",
            "PinnableItemEdgeFields",
            "PinnableItemUnion",
        ]
    ) -> "PinnableItemConnectionFields":
        """Subfields should come from the PinnableItemConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnableItemConnectionFields":
        self._alias = alias
        return self


class PinnableItemEdgeFields(GraphQLField):
    cursor: "PinnableItemEdgeGraphQLField" = PinnableItemEdgeGraphQLField("cursor")
    node: "PinnableItemUnion" = PinnableItemUnion("node")

    def fields(
        self, *subfields: Union[PinnableItemEdgeGraphQLField, "PinnableItemUnion"]
    ) -> "PinnableItemEdgeFields":
        """Subfields should come from the PinnableItemEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnableItemEdgeFields":
        self._alias = alias
        return self


class PinnedDiscussionFields(GraphQLField):
    created_at: "PinnedDiscussionGraphQLField" = PinnedDiscussionGraphQLField(
        "createdAt"
    )
    database_id: "PinnedDiscussionGraphQLField" = PinnedDiscussionGraphQLField(
        "databaseId"
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    gradient_stop_colors: "PinnedDiscussionGraphQLField" = PinnedDiscussionGraphQLField(
        "gradientStopColors"
    )
    id: "PinnedDiscussionGraphQLField" = PinnedDiscussionGraphQLField("id")
    pattern: "PinnedDiscussionGraphQLField" = PinnedDiscussionGraphQLField("pattern")

    @classmethod
    def pinned_by(cls) -> "ActorInterface":
        return ActorInterface("pinned_by")

    preconfigured_gradient: "PinnedDiscussionGraphQLField" = (
        PinnedDiscussionGraphQLField("preconfiguredGradient")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    updated_at: "PinnedDiscussionGraphQLField" = PinnedDiscussionGraphQLField(
        "updatedAt"
    )

    def fields(
        self,
        *subfields: Union[
            PinnedDiscussionGraphQLField,
            "ActorInterface",
            "DiscussionFields",
            "RepositoryFields",
        ]
    ) -> "PinnedDiscussionFields":
        """Subfields should come from the PinnedDiscussionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedDiscussionFields":
        self._alias = alias
        return self


class PinnedDiscussionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PinnedDiscussionEdgeFields":
        return PinnedDiscussionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PinnedDiscussionFields":
        return PinnedDiscussionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PinnedDiscussionConnectionGraphQLField" = (
        PinnedDiscussionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PinnedDiscussionConnectionGraphQLField,
            "PageInfoFields",
            "PinnedDiscussionEdgeFields",
            "PinnedDiscussionFields",
        ]
    ) -> "PinnedDiscussionConnectionFields":
        """Subfields should come from the PinnedDiscussionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedDiscussionConnectionFields":
        self._alias = alias
        return self


class PinnedDiscussionEdgeFields(GraphQLField):
    cursor: "PinnedDiscussionEdgeGraphQLField" = PinnedDiscussionEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "PinnedDiscussionFields":
        return PinnedDiscussionFields("node")

    def fields(
        self,
        *subfields: Union[PinnedDiscussionEdgeGraphQLField, "PinnedDiscussionFields"]
    ) -> "PinnedDiscussionEdgeFields":
        """Subfields should come from the PinnedDiscussionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedDiscussionEdgeFields":
        self._alias = alias
        return self


class PinnedEnvironmentFields(GraphQLField):
    created_at: "PinnedEnvironmentGraphQLField" = PinnedEnvironmentGraphQLField(
        "createdAt"
    )
    database_id: "PinnedEnvironmentGraphQLField" = PinnedEnvironmentGraphQLField(
        "databaseId"
    )

    @classmethod
    def environment(cls) -> "EnvironmentFields":
        return EnvironmentFields("environment")

    id: "PinnedEnvironmentGraphQLField" = PinnedEnvironmentGraphQLField("id")
    position: "PinnedEnvironmentGraphQLField" = PinnedEnvironmentGraphQLField(
        "position"
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            PinnedEnvironmentGraphQLField, "EnvironmentFields", "RepositoryFields"
        ]
    ) -> "PinnedEnvironmentFields":
        """Subfields should come from the PinnedEnvironmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedEnvironmentFields":
        self._alias = alias
        return self


class PinnedEnvironmentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PinnedEnvironmentEdgeFields":
        return PinnedEnvironmentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PinnedEnvironmentFields":
        return PinnedEnvironmentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PinnedEnvironmentConnectionGraphQLField" = (
        PinnedEnvironmentConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PinnedEnvironmentConnectionGraphQLField,
            "PageInfoFields",
            "PinnedEnvironmentEdgeFields",
            "PinnedEnvironmentFields",
        ]
    ) -> "PinnedEnvironmentConnectionFields":
        """Subfields should come from the PinnedEnvironmentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedEnvironmentConnectionFields":
        self._alias = alias
        return self


class PinnedEnvironmentEdgeFields(GraphQLField):
    cursor: "PinnedEnvironmentEdgeGraphQLField" = PinnedEnvironmentEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "PinnedEnvironmentFields":
        return PinnedEnvironmentFields("node")

    def fields(
        self,
        *subfields: Union[PinnedEnvironmentEdgeGraphQLField, "PinnedEnvironmentFields"]
    ) -> "PinnedEnvironmentEdgeFields":
        """Subfields should come from the PinnedEnvironmentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedEnvironmentEdgeFields":
        self._alias = alias
        return self


class PinnedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "PinnedEventGraphQLField" = PinnedEventGraphQLField("createdAt")
    id: "PinnedEventGraphQLField" = PinnedEventGraphQLField("id")

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self,
        *subfields: Union[PinnedEventGraphQLField, "ActorInterface", "IssueFields"]
    ) -> "PinnedEventFields":
        """Subfields should come from the PinnedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedEventFields":
        self._alias = alias
        return self


class PinnedIssueFields(GraphQLField):
    database_id: "PinnedIssueGraphQLField" = PinnedIssueGraphQLField("databaseId")
    full_database_id: "PinnedIssueGraphQLField" = PinnedIssueGraphQLField(
        "fullDatabaseId"
    )
    id: "PinnedIssueGraphQLField" = PinnedIssueGraphQLField("id")

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    @classmethod
    def pinned_by(cls) -> "ActorInterface":
        return ActorInterface("pinned_by")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            PinnedIssueGraphQLField, "ActorInterface", "IssueFields", "RepositoryFields"
        ]
    ) -> "PinnedIssueFields":
        """Subfields should come from the PinnedIssueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedIssueFields":
        self._alias = alias
        return self


class PinnedIssueConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PinnedIssueEdgeFields":
        return PinnedIssueEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PinnedIssueFields":
        return PinnedIssueFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PinnedIssueConnectionGraphQLField" = (
        PinnedIssueConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PinnedIssueConnectionGraphQLField,
            "PageInfoFields",
            "PinnedIssueEdgeFields",
            "PinnedIssueFields",
        ]
    ) -> "PinnedIssueConnectionFields":
        """Subfields should come from the PinnedIssueConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedIssueConnectionFields":
        self._alias = alias
        return self


class PinnedIssueEdgeFields(GraphQLField):
    cursor: "PinnedIssueEdgeGraphQLField" = PinnedIssueEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "PinnedIssueFields":
        return PinnedIssueFields("node")

    def fields(
        self, *subfields: Union[PinnedIssueEdgeGraphQLField, "PinnedIssueFields"]
    ) -> "PinnedIssueEdgeFields":
        """Subfields should come from the PinnedIssueEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PinnedIssueEdgeFields":
        self._alias = alias
        return self


class PrivateRepositoryForkingDisableAuditEntryFields(GraphQLField):
    action: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("actorUrl")
    )
    created_at: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("createdAt")
    )
    enterprise_resource_path: (
        "PrivateRepositoryForkingDisableAuditEntryGraphQLField"
    ) = PrivateRepositoryForkingDisableAuditEntryGraphQLField("enterpriseResourcePath")
    enterprise_slug: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("enterpriseSlug")
    )
    enterprise_url: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("enterpriseUrl")
    )
    id: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("id")
    )
    operation_type: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "PrivateRepositoryForkingDisableAuditEntryGraphQLField"
    ) = PrivateRepositoryForkingDisableAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "PrivateRepositoryForkingDisableAuditEntryGraphQLField"
    ) = PrivateRepositoryForkingDisableAuditEntryGraphQLField("repositoryResourcePath")
    repository_url: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "PrivateRepositoryForkingDisableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingDisableAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            PrivateRepositoryForkingDisableAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "PrivateRepositoryForkingDisableAuditEntryFields":
        """Subfields should come from the PrivateRepositoryForkingDisableAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PrivateRepositoryForkingDisableAuditEntryFields":
        self._alias = alias
        return self


class PrivateRepositoryForkingEnableAuditEntryFields(GraphQLField):
    action: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("actorUrl")
    )
    created_at: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("createdAt")
    )
    enterprise_resource_path: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("enterpriseResourcePath")
    )
    enterprise_slug: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("enterpriseSlug")
    )
    enterprise_url: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("enterpriseUrl")
    )
    id: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("id")
    )
    operation_type: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "PrivateRepositoryForkingEnableAuditEntryGraphQLField"
    ) = PrivateRepositoryForkingEnableAuditEntryGraphQLField("organizationResourcePath")
    organization_url: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "PrivateRepositoryForkingEnableAuditEntryGraphQLField" = (
        PrivateRepositoryForkingEnableAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            PrivateRepositoryForkingEnableAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "PrivateRepositoryForkingEnableAuditEntryFields":
        """Subfields should come from the PrivateRepositoryForkingEnableAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PrivateRepositoryForkingEnableAuditEntryFields":
        self._alias = alias
        return self


class ProfileItemShowcaseFields(GraphQLField):
    has_pinned_items: "ProfileItemShowcaseGraphQLField" = (
        ProfileItemShowcaseGraphQLField("hasPinnedItems")
    )

    @classmethod
    def items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PinnableItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnableItemConnectionFields("items", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            ProfileItemShowcaseGraphQLField, "PinnableItemConnectionFields"
        ]
    ) -> "ProfileItemShowcaseFields":
        """Subfields should come from the ProfileItemShowcaseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProfileItemShowcaseFields":
        self._alias = alias
        return self


class ProfileOwnerInterface(GraphQLField):
    @classmethod
    def any_pinnable_items(
        cls, *, type: Optional[PinnableItemType] = None
    ) -> "ProfileOwnerGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "type": {"type": "PinnableItemType", "value": type}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProfileOwnerGraphQLField(
            "any_pinnable_items", arguments=cleared_arguments
        )

    email: "ProfileOwnerGraphQLField" = ProfileOwnerGraphQLField("email")
    id: "ProfileOwnerGraphQLField" = ProfileOwnerGraphQLField("id")

    @classmethod
    def item_showcase(cls) -> "ProfileItemShowcaseFields":
        return ProfileItemShowcaseFields("item_showcase")

    location: "ProfileOwnerGraphQLField" = ProfileOwnerGraphQLField("location")
    login: "ProfileOwnerGraphQLField" = ProfileOwnerGraphQLField("login")
    name: "ProfileOwnerGraphQLField" = ProfileOwnerGraphQLField("name")

    @classmethod
    def pinnable_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        types: Optional[PinnableItemType] = None
    ) -> "PinnableItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "types": {"type": "PinnableItemType", "value": types},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnableItemConnectionFields(
            "pinnable_items", arguments=cleared_arguments
        )

    @classmethod
    def pinned_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        types: Optional[PinnableItemType] = None
    ) -> "PinnableItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "types": {"type": "PinnableItemType", "value": types},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnableItemConnectionFields("pinned_items", arguments=cleared_arguments)

    pinned_items_remaining: "ProfileOwnerGraphQLField" = ProfileOwnerGraphQLField(
        "pinnedItemsRemaining"
    )
    viewer_can_change_pinned_items: "ProfileOwnerGraphQLField" = (
        ProfileOwnerGraphQLField("viewerCanChangePinnedItems")
    )
    website_url: "ProfileOwnerGraphQLField" = ProfileOwnerGraphQLField("websiteUrl")

    def fields(
        self,
        *subfields: Union[
            ProfileOwnerGraphQLField,
            "PinnableItemConnectionFields",
            "ProfileItemShowcaseFields",
        ]
    ) -> "ProfileOwnerInterface":
        """Subfields should come from the ProfileOwnerInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProfileOwnerInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ProfileOwnerInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ProjectFields(GraphQLField):
    body: "ProjectGraphQLField" = ProjectGraphQLField("body")
    body_html: "ProjectGraphQLField" = ProjectGraphQLField("bodyHTML")
    closed: "ProjectGraphQLField" = ProjectGraphQLField("closed")
    closed_at: "ProjectGraphQLField" = ProjectGraphQLField("closedAt")

    @classmethod
    def columns(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectColumnConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectColumnConnectionFields("columns", arguments=cleared_arguments)

    created_at: "ProjectGraphQLField" = ProjectGraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectGraphQLField" = ProjectGraphQLField("databaseId")
    id: "ProjectGraphQLField" = ProjectGraphQLField("id")
    name: "ProjectGraphQLField" = ProjectGraphQLField("name")
    number: "ProjectGraphQLField" = ProjectGraphQLField("number")

    @classmethod
    def owner(cls) -> "ProjectOwnerInterface":
        return ProjectOwnerInterface("owner")

    @classmethod
    def pending_cards(
        cls,
        *,
        after: Optional[str] = None,
        archived_states: Optional[ProjectCardArchivedState] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectCardConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "archivedStates": {
                "type": "ProjectCardArchivedState",
                "value": archived_states,
            },
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectCardConnectionFields("pending_cards", arguments=cleared_arguments)

    @classmethod
    def progress(cls) -> "ProjectProgressFields":
        return ProjectProgressFields("progress")

    resource_path: "ProjectGraphQLField" = ProjectGraphQLField("resourcePath")
    state: "ProjectGraphQLField" = ProjectGraphQLField("state")
    updated_at: "ProjectGraphQLField" = ProjectGraphQLField("updatedAt")
    url: "ProjectGraphQLField" = ProjectGraphQLField("url")
    viewer_can_close: "ProjectGraphQLField" = ProjectGraphQLField("viewerCanClose")
    viewer_can_reopen: "ProjectGraphQLField" = ProjectGraphQLField("viewerCanReopen")
    viewer_can_update: "ProjectGraphQLField" = ProjectGraphQLField("viewerCanUpdate")

    def fields(
        self,
        *subfields: Union[
            ProjectGraphQLField,
            "ActorInterface",
            "ProjectCardConnectionFields",
            "ProjectColumnConnectionFields",
            "ProjectOwnerInterface",
            "ProjectProgressFields",
        ]
    ) -> "ProjectFields":
        """Subfields should come from the ProjectFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectFields":
        self._alias = alias
        return self


class ProjectCardFields(GraphQLField):
    @classmethod
    def column(cls) -> "ProjectColumnFields":
        return ProjectColumnFields("column")

    content: "ProjectCardItemUnion" = ProjectCardItemUnion("content")
    created_at: "ProjectCardGraphQLField" = ProjectCardGraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectCardGraphQLField" = ProjectCardGraphQLField("databaseId")
    id: "ProjectCardGraphQLField" = ProjectCardGraphQLField("id")
    is_archived: "ProjectCardGraphQLField" = ProjectCardGraphQLField("isArchived")
    note: "ProjectCardGraphQLField" = ProjectCardGraphQLField("note")

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    resource_path: "ProjectCardGraphQLField" = ProjectCardGraphQLField("resourcePath")
    state: "ProjectCardGraphQLField" = ProjectCardGraphQLField("state")
    updated_at: "ProjectCardGraphQLField" = ProjectCardGraphQLField("updatedAt")
    url: "ProjectCardGraphQLField" = ProjectCardGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            ProjectCardGraphQLField,
            "ActorInterface",
            "ProjectCardItemUnion",
            "ProjectColumnFields",
            "ProjectFields",
        ]
    ) -> "ProjectCardFields":
        """Subfields should come from the ProjectCardFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectCardFields":
        self._alias = alias
        return self


class ProjectCardConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectCardEdgeFields":
        return ProjectCardEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectCardFields":
        return ProjectCardFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectCardConnectionGraphQLField" = (
        ProjectCardConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectCardConnectionGraphQLField,
            "PageInfoFields",
            "ProjectCardEdgeFields",
            "ProjectCardFields",
        ]
    ) -> "ProjectCardConnectionFields":
        """Subfields should come from the ProjectCardConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectCardConnectionFields":
        self._alias = alias
        return self


class ProjectCardEdgeFields(GraphQLField):
    cursor: "ProjectCardEdgeGraphQLField" = ProjectCardEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ProjectCardFields":
        return ProjectCardFields("node")

    def fields(
        self, *subfields: Union[ProjectCardEdgeGraphQLField, "ProjectCardFields"]
    ) -> "ProjectCardEdgeFields":
        """Subfields should come from the ProjectCardEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectCardEdgeFields":
        self._alias = alias
        return self


class ProjectColumnFields(GraphQLField):
    @classmethod
    def cards(
        cls,
        *,
        after: Optional[str] = None,
        archived_states: Optional[ProjectCardArchivedState] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectCardConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "archivedStates": {
                "type": "ProjectCardArchivedState",
                "value": archived_states,
            },
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectCardConnectionFields("cards", arguments=cleared_arguments)

    created_at: "ProjectColumnGraphQLField" = ProjectColumnGraphQLField("createdAt")
    database_id: "ProjectColumnGraphQLField" = ProjectColumnGraphQLField("databaseId")
    id: "ProjectColumnGraphQLField" = ProjectColumnGraphQLField("id")
    name: "ProjectColumnGraphQLField" = ProjectColumnGraphQLField("name")

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    purpose: "ProjectColumnGraphQLField" = ProjectColumnGraphQLField("purpose")
    resource_path: "ProjectColumnGraphQLField" = ProjectColumnGraphQLField(
        "resourcePath"
    )
    updated_at: "ProjectColumnGraphQLField" = ProjectColumnGraphQLField("updatedAt")
    url: "ProjectColumnGraphQLField" = ProjectColumnGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            ProjectColumnGraphQLField, "ProjectCardConnectionFields", "ProjectFields"
        ]
    ) -> "ProjectColumnFields":
        """Subfields should come from the ProjectColumnFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectColumnFields":
        self._alias = alias
        return self


class ProjectColumnConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectColumnEdgeFields":
        return ProjectColumnEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectColumnFields":
        return ProjectColumnFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectColumnConnectionGraphQLField" = (
        ProjectColumnConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectColumnConnectionGraphQLField,
            "PageInfoFields",
            "ProjectColumnEdgeFields",
            "ProjectColumnFields",
        ]
    ) -> "ProjectColumnConnectionFields":
        """Subfields should come from the ProjectColumnConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectColumnConnectionFields":
        self._alias = alias
        return self


class ProjectColumnEdgeFields(GraphQLField):
    cursor: "ProjectColumnEdgeGraphQLField" = ProjectColumnEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ProjectColumnFields":
        return ProjectColumnFields("node")

    def fields(
        self, *subfields: Union[ProjectColumnEdgeGraphQLField, "ProjectColumnFields"]
    ) -> "ProjectColumnEdgeFields":
        """Subfields should come from the ProjectColumnEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectColumnEdgeFields":
        self._alias = alias
        return self


class ProjectConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectEdgeFields":
        return ProjectEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectFields":
        return ProjectFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectConnectionGraphQLField" = ProjectConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ProjectConnectionGraphQLField,
            "PageInfoFields",
            "ProjectEdgeFields",
            "ProjectFields",
        ]
    ) -> "ProjectConnectionFields":
        """Subfields should come from the ProjectConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectConnectionFields":
        self._alias = alias
        return self


class ProjectEdgeFields(GraphQLField):
    cursor: "ProjectEdgeGraphQLField" = ProjectEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ProjectFields":
        return ProjectFields("node")

    def fields(
        self, *subfields: Union[ProjectEdgeGraphQLField, "ProjectFields"]
    ) -> "ProjectEdgeFields":
        """Subfields should come from the ProjectEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectEdgeFields":
        self._alias = alias
        return self


class ProjectOwnerInterface(GraphQLField):
    id: "ProjectOwnerGraphQLField" = ProjectOwnerGraphQLField("id")

    @classmethod
    def project(cls, number: int) -> "ProjectFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields("project", arguments=cleared_arguments)

    @classmethod
    def projects(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectOrder] = None,
        search: Optional[str] = None,
        states: Optional[ProjectState] = None
    ) -> "ProjectConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectOrder", "value": order_by},
            "search": {"type": "String", "value": search},
            "states": {"type": "ProjectState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectConnectionFields("projects", arguments=cleared_arguments)

    projects_resource_path: "ProjectOwnerGraphQLField" = ProjectOwnerGraphQLField(
        "projectsResourcePath"
    )
    projects_url: "ProjectOwnerGraphQLField" = ProjectOwnerGraphQLField("projectsUrl")
    viewer_can_create_projects: "ProjectOwnerGraphQLField" = ProjectOwnerGraphQLField(
        "viewerCanCreateProjects"
    )

    def fields(
        self,
        *subfields: Union[
            ProjectOwnerGraphQLField, "ProjectConnectionFields", "ProjectFields"
        ]
    ) -> "ProjectOwnerInterface":
        """Subfields should come from the ProjectOwnerInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectOwnerInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ProjectOwnerInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ProjectProgressFields(GraphQLField):
    done_count: "ProjectProgressGraphQLField" = ProjectProgressGraphQLField("doneCount")
    done_percentage: "ProjectProgressGraphQLField" = ProjectProgressGraphQLField(
        "donePercentage"
    )
    enabled: "ProjectProgressGraphQLField" = ProjectProgressGraphQLField("enabled")
    in_progress_count: "ProjectProgressGraphQLField" = ProjectProgressGraphQLField(
        "inProgressCount"
    )
    in_progress_percentage: "ProjectProgressGraphQLField" = ProjectProgressGraphQLField(
        "inProgressPercentage"
    )
    todo_count: "ProjectProgressGraphQLField" = ProjectProgressGraphQLField("todoCount")
    todo_percentage: "ProjectProgressGraphQLField" = ProjectProgressGraphQLField(
        "todoPercentage"
    )

    def fields(
        self, *subfields: ProjectProgressGraphQLField
    ) -> "ProjectProgressFields":
        """Subfields should come from the ProjectProgressFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectProgressFields":
        self._alias = alias
        return self


class ProjectV2Fields(GraphQLField):
    closed: "ProjectV2GraphQLField" = ProjectV2GraphQLField("closed")
    closed_at: "ProjectV2GraphQLField" = ProjectV2GraphQLField("closedAt")
    created_at: "ProjectV2GraphQLField" = ProjectV2GraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2GraphQLField" = ProjectV2GraphQLField("databaseId")

    @classmethod
    def field(cls, name: str) -> "ProjectV2FieldConfigurationUnion":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2FieldConfigurationUnion("field", arguments=cleared_arguments)

    @classmethod
    def fields(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2FieldOrder] = None
    ) -> "ProjectV2FieldConfigurationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2FieldOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2FieldConfigurationConnectionFields(
            "fields", arguments=cleared_arguments
        )

    full_database_id: "ProjectV2GraphQLField" = ProjectV2GraphQLField("fullDatabaseId")
    id: "ProjectV2GraphQLField" = ProjectV2GraphQLField("id")

    @classmethod
    def items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2ItemOrder] = None
    ) -> "ProjectV2ItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2ItemOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ItemConnectionFields("items", arguments=cleared_arguments)

    number: "ProjectV2GraphQLField" = ProjectV2GraphQLField("number")

    @classmethod
    def owner(cls) -> "ProjectV2OwnerInterface":
        return ProjectV2OwnerInterface("owner")

    public: "ProjectV2GraphQLField" = ProjectV2GraphQLField("public")
    readme: "ProjectV2GraphQLField" = ProjectV2GraphQLField("readme")

    @classmethod
    def repositories(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields("repositories", arguments=cleared_arguments)

    resource_path: "ProjectV2GraphQLField" = ProjectV2GraphQLField("resourcePath")
    short_description: "ProjectV2GraphQLField" = ProjectV2GraphQLField(
        "shortDescription"
    )

    @classmethod
    def status_updates(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2StatusOrder] = None
    ) -> "ProjectV2StatusUpdateConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2StatusOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2StatusUpdateConnectionFields(
            "status_updates", arguments=cleared_arguments
        )

    @classmethod
    def teams(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[TeamOrder] = None
    ) -> "TeamConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "TeamOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamConnectionFields("teams", arguments=cleared_arguments)

    template: "ProjectV2GraphQLField" = ProjectV2GraphQLField("template")
    title: "ProjectV2GraphQLField" = ProjectV2GraphQLField("title")
    updated_at: "ProjectV2GraphQLField" = ProjectV2GraphQLField("updatedAt")
    url: "ProjectV2GraphQLField" = ProjectV2GraphQLField("url")

    @classmethod
    def view(cls, number: int) -> "ProjectV2ViewFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ViewFields("view", arguments=cleared_arguments)

    viewer_can_close: "ProjectV2GraphQLField" = ProjectV2GraphQLField("viewerCanClose")
    viewer_can_reopen: "ProjectV2GraphQLField" = ProjectV2GraphQLField(
        "viewerCanReopen"
    )
    viewer_can_update: "ProjectV2GraphQLField" = ProjectV2GraphQLField(
        "viewerCanUpdate"
    )

    @classmethod
    def views(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2ViewOrder] = None
    ) -> "ProjectV2ViewConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2ViewOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ViewConnectionFields("views", arguments=cleared_arguments)

    @classmethod
    def workflow(cls, number: int) -> "ProjectV2WorkflowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2WorkflowFields("workflow", arguments=cleared_arguments)

    @classmethod
    def workflows(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2WorkflowOrder] = None
    ) -> "ProjectV2WorkflowConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2WorkflowOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2WorkflowConnectionFields(
            "workflows", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            ProjectV2GraphQLField,
            "ActorInterface",
            "ProjectV2FieldConfigurationConnectionFields",
            "ProjectV2FieldConfigurationUnion",
            "ProjectV2ItemConnectionFields",
            "ProjectV2OwnerInterface",
            "ProjectV2StatusUpdateConnectionFields",
            "ProjectV2ViewConnectionFields",
            "ProjectV2ViewFields",
            "ProjectV2WorkflowConnectionFields",
            "ProjectV2WorkflowFields",
            "RepositoryConnectionFields",
            "TeamConnectionFields",
        ]
    ) -> "ProjectV2Fields":
        """Subfields should come from the ProjectV2Fields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2Fields":
        self._alias = alias
        return self


class ProjectV2ActorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2ActorEdgeFields":
        return ProjectV2ActorEdgeFields("edges")

    nodes: "ProjectV2ActorUnion" = ProjectV2ActorUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2ActorConnectionGraphQLField" = (
        ProjectV2ActorConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ActorConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2ActorEdgeFields",
            "ProjectV2ActorUnion",
        ]
    ) -> "ProjectV2ActorConnectionFields":
        """Subfields should come from the ProjectV2ActorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ActorConnectionFields":
        self._alias = alias
        return self


class ProjectV2ActorEdgeFields(GraphQLField):
    cursor: "ProjectV2ActorEdgeGraphQLField" = ProjectV2ActorEdgeGraphQLField("cursor")
    node: "ProjectV2ActorUnion" = ProjectV2ActorUnion("node")

    def fields(
        self, *subfields: Union[ProjectV2ActorEdgeGraphQLField, "ProjectV2ActorUnion"]
    ) -> "ProjectV2ActorEdgeFields":
        """Subfields should come from the ProjectV2ActorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ActorEdgeFields":
        self._alias = alias
        return self


class ProjectV2ConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2EdgeFields":
        return ProjectV2EdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2ConnectionGraphQLField" = ProjectV2ConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2EdgeFields",
            "ProjectV2Fields",
        ]
    ) -> "ProjectV2ConnectionFields":
        """Subfields should come from the ProjectV2ConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ConnectionFields":
        self._alias = alias
        return self


class ProjectV2EdgeFields(GraphQLField):
    cursor: "ProjectV2EdgeGraphQLField" = ProjectV2EdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("node")

    def fields(
        self, *subfields: Union[ProjectV2EdgeGraphQLField, "ProjectV2Fields"]
    ) -> "ProjectV2EdgeFields":
        """Subfields should come from the ProjectV2EdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2EdgeFields":
        self._alias = alias
        return self


class ProjectV2FieldFields(GraphQLField):
    created_at: "ProjectV2FieldGraphQLField" = ProjectV2FieldGraphQLField("createdAt")
    data_type: "ProjectV2FieldGraphQLField" = ProjectV2FieldGraphQLField("dataType")
    database_id: "ProjectV2FieldGraphQLField" = ProjectV2FieldGraphQLField("databaseId")
    id: "ProjectV2FieldGraphQLField" = ProjectV2FieldGraphQLField("id")
    name: "ProjectV2FieldGraphQLField" = ProjectV2FieldGraphQLField("name")

    @classmethod
    def project(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project")

    updated_at: "ProjectV2FieldGraphQLField" = ProjectV2FieldGraphQLField("updatedAt")

    def fields(
        self, *subfields: Union[ProjectV2FieldGraphQLField, "ProjectV2Fields"]
    ) -> "ProjectV2FieldFields":
        """Subfields should come from the ProjectV2FieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2FieldFields":
        self._alias = alias
        return self


class ProjectV2FieldCommonInterface(GraphQLField):
    created_at: "ProjectV2FieldCommonGraphQLField" = ProjectV2FieldCommonGraphQLField(
        "createdAt"
    )
    data_type: "ProjectV2FieldCommonGraphQLField" = ProjectV2FieldCommonGraphQLField(
        "dataType"
    )
    database_id: "ProjectV2FieldCommonGraphQLField" = ProjectV2FieldCommonGraphQLField(
        "databaseId"
    )
    id: "ProjectV2FieldCommonGraphQLField" = ProjectV2FieldCommonGraphQLField("id")
    name: "ProjectV2FieldCommonGraphQLField" = ProjectV2FieldCommonGraphQLField("name")

    @classmethod
    def project(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project")

    updated_at: "ProjectV2FieldCommonGraphQLField" = ProjectV2FieldCommonGraphQLField(
        "updatedAt"
    )

    def fields(
        self, *subfields: Union[ProjectV2FieldCommonGraphQLField, "ProjectV2Fields"]
    ) -> "ProjectV2FieldCommonInterface":
        """Subfields should come from the ProjectV2FieldCommonInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2FieldCommonInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "ProjectV2FieldCommonInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ProjectV2FieldConfigurationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2FieldConfigurationEdgeFields":
        return ProjectV2FieldConfigurationEdgeFields("edges")

    nodes: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "nodes"
    )

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2FieldConfigurationConnectionGraphQLField" = (
        ProjectV2FieldConfigurationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2FieldConfigurationConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2FieldConfigurationEdgeFields",
            "ProjectV2FieldConfigurationUnion",
        ]
    ) -> "ProjectV2FieldConfigurationConnectionFields":
        """Subfields should come from the ProjectV2FieldConfigurationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2FieldConfigurationConnectionFields":
        self._alias = alias
        return self


class ProjectV2FieldConfigurationEdgeFields(GraphQLField):
    cursor: "ProjectV2FieldConfigurationEdgeGraphQLField" = (
        ProjectV2FieldConfigurationEdgeGraphQLField("cursor")
    )
    node: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion("node")

    def fields(
        self,
        *subfields: Union[
            ProjectV2FieldConfigurationEdgeGraphQLField,
            "ProjectV2FieldConfigurationUnion",
        ]
    ) -> "ProjectV2FieldConfigurationEdgeFields":
        """Subfields should come from the ProjectV2FieldConfigurationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2FieldConfigurationEdgeFields":
        self._alias = alias
        return self


class ProjectV2FieldConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2FieldEdgeFields":
        return ProjectV2FieldEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectV2FieldFields":
        return ProjectV2FieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2FieldConnectionGraphQLField" = (
        ProjectV2FieldConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2FieldConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2FieldEdgeFields",
            "ProjectV2FieldFields",
        ]
    ) -> "ProjectV2FieldConnectionFields":
        """Subfields should come from the ProjectV2FieldConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2FieldConnectionFields":
        self._alias = alias
        return self


class ProjectV2FieldEdgeFields(GraphQLField):
    cursor: "ProjectV2FieldEdgeGraphQLField" = ProjectV2FieldEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ProjectV2FieldFields":
        return ProjectV2FieldFields("node")

    def fields(
        self, *subfields: Union[ProjectV2FieldEdgeGraphQLField, "ProjectV2FieldFields"]
    ) -> "ProjectV2FieldEdgeFields":
        """Subfields should come from the ProjectV2FieldEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2FieldEdgeFields":
        self._alias = alias
        return self


class ProjectV2ItemFields(GraphQLField):
    content: "ProjectV2ItemContentUnion" = ProjectV2ItemContentUnion("content")
    created_at: "ProjectV2ItemGraphQLField" = ProjectV2ItemGraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2ItemGraphQLField" = ProjectV2ItemGraphQLField("databaseId")

    @classmethod
    def field_value_by_name(cls, name: str) -> "ProjectV2ItemFieldValueUnion":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ItemFieldValueUnion(
            "field_value_by_name", arguments=cleared_arguments
        )

    @classmethod
    def field_values(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2ItemFieldValueOrder] = None
    ) -> "ProjectV2ItemFieldValueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2ItemFieldValueOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ItemFieldValueConnectionFields(
            "field_values", arguments=cleared_arguments
        )

    full_database_id: "ProjectV2ItemGraphQLField" = ProjectV2ItemGraphQLField(
        "fullDatabaseId"
    )
    id: "ProjectV2ItemGraphQLField" = ProjectV2ItemGraphQLField("id")
    is_archived: "ProjectV2ItemGraphQLField" = ProjectV2ItemGraphQLField("isArchived")

    @classmethod
    def project(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project")

    type: "ProjectV2ItemGraphQLField" = ProjectV2ItemGraphQLField("type")
    updated_at: "ProjectV2ItemGraphQLField" = ProjectV2ItemGraphQLField("updatedAt")

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemGraphQLField,
            "ActorInterface",
            "ProjectV2Fields",
            "ProjectV2ItemContentUnion",
            "ProjectV2ItemFieldValueConnectionFields",
            "ProjectV2ItemFieldValueUnion",
        ]
    ) -> "ProjectV2ItemFields":
        """Subfields should come from the ProjectV2ItemFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFields":
        self._alias = alias
        return self


class ProjectV2ItemConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2ItemEdgeFields":
        return ProjectV2ItemEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2ItemConnectionGraphQLField" = (
        ProjectV2ItemConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2ItemEdgeFields",
            "ProjectV2ItemFields",
        ]
    ) -> "ProjectV2ItemConnectionFields":
        """Subfields should come from the ProjectV2ItemConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemConnectionFields":
        self._alias = alias
        return self


class ProjectV2ItemEdgeFields(GraphQLField):
    cursor: "ProjectV2ItemEdgeGraphQLField" = ProjectV2ItemEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("node")

    def fields(
        self, *subfields: Union[ProjectV2ItemEdgeGraphQLField, "ProjectV2ItemFields"]
    ) -> "ProjectV2ItemEdgeFields":
        """Subfields should come from the ProjectV2ItemEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemEdgeFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldDateValueFields(GraphQLField):
    created_at: "ProjectV2ItemFieldDateValueGraphQLField" = (
        ProjectV2ItemFieldDateValueGraphQLField("createdAt")
    )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2ItemFieldDateValueGraphQLField" = (
        ProjectV2ItemFieldDateValueGraphQLField("databaseId")
    )
    date: "ProjectV2ItemFieldDateValueGraphQLField" = (
        ProjectV2ItemFieldDateValueGraphQLField("date")
    )
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )
    id: "ProjectV2ItemFieldDateValueGraphQLField" = (
        ProjectV2ItemFieldDateValueGraphQLField("id")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    updated_at: "ProjectV2ItemFieldDateValueGraphQLField" = (
        ProjectV2ItemFieldDateValueGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldDateValueGraphQLField,
            "ActorInterface",
            "ProjectV2FieldConfigurationUnion",
            "ProjectV2ItemFields",
        ]
    ) -> "ProjectV2ItemFieldDateValueFields":
        """Subfields should come from the ProjectV2ItemFieldDateValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldDateValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldIterationValueFields(GraphQLField):
    created_at: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("createdAt")
    )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("databaseId")
    )
    duration: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("duration")
    )
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )
    id: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("id")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    iteration_id: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("iterationId")
    )
    start_date: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("startDate")
    )
    title: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("title")
    )
    title_html: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("titleHTML")
    )
    updated_at: "ProjectV2ItemFieldIterationValueGraphQLField" = (
        ProjectV2ItemFieldIterationValueGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldIterationValueGraphQLField,
            "ActorInterface",
            "ProjectV2FieldConfigurationUnion",
            "ProjectV2ItemFields",
        ]
    ) -> "ProjectV2ItemFieldIterationValueFields":
        """Subfields should come from the ProjectV2ItemFieldIterationValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldIterationValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldLabelValueFields(GraphQLField):
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )

    @classmethod
    def labels(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "LabelConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelConnectionFields("labels", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldLabelValueGraphQLField,
            "LabelConnectionFields",
            "ProjectV2FieldConfigurationUnion",
        ]
    ) -> "ProjectV2ItemFieldLabelValueFields":
        """Subfields should come from the ProjectV2ItemFieldLabelValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldLabelValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldMilestoneValueFields(GraphQLField):
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )

    @classmethod
    def milestone(cls) -> "MilestoneFields":
        return MilestoneFields("milestone")

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldMilestoneValueGraphQLField,
            "MilestoneFields",
            "ProjectV2FieldConfigurationUnion",
        ]
    ) -> "ProjectV2ItemFieldMilestoneValueFields":
        """Subfields should come from the ProjectV2ItemFieldMilestoneValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldMilestoneValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldNumberValueFields(GraphQLField):
    created_at: "ProjectV2ItemFieldNumberValueGraphQLField" = (
        ProjectV2ItemFieldNumberValueGraphQLField("createdAt")
    )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2ItemFieldNumberValueGraphQLField" = (
        ProjectV2ItemFieldNumberValueGraphQLField("databaseId")
    )
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )
    id: "ProjectV2ItemFieldNumberValueGraphQLField" = (
        ProjectV2ItemFieldNumberValueGraphQLField("id")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    number: "ProjectV2ItemFieldNumberValueGraphQLField" = (
        ProjectV2ItemFieldNumberValueGraphQLField("number")
    )
    updated_at: "ProjectV2ItemFieldNumberValueGraphQLField" = (
        ProjectV2ItemFieldNumberValueGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldNumberValueGraphQLField,
            "ActorInterface",
            "ProjectV2FieldConfigurationUnion",
            "ProjectV2ItemFields",
        ]
    ) -> "ProjectV2ItemFieldNumberValueFields":
        """Subfields should come from the ProjectV2ItemFieldNumberValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldNumberValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldPullRequestValueFields(GraphQLField):
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )

    @classmethod
    def pull_requests(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[PullRequestOrder] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "PullRequestOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields("pull_requests", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldPullRequestValueGraphQLField,
            "ProjectV2FieldConfigurationUnion",
            "PullRequestConnectionFields",
        ]
    ) -> "ProjectV2ItemFieldPullRequestValueFields":
        """Subfields should come from the ProjectV2ItemFieldPullRequestValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldPullRequestValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldRepositoryValueFields(GraphQLField):
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldRepositoryValueGraphQLField,
            "ProjectV2FieldConfigurationUnion",
            "RepositoryFields",
        ]
    ) -> "ProjectV2ItemFieldRepositoryValueFields":
        """Subfields should come from the ProjectV2ItemFieldRepositoryValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldRepositoryValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldReviewerValueFields(GraphQLField):
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )

    @classmethod
    def reviewers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "RequestedReviewerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RequestedReviewerConnectionFields(
            "reviewers", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldReviewerValueGraphQLField,
            "ProjectV2FieldConfigurationUnion",
            "RequestedReviewerConnectionFields",
        ]
    ) -> "ProjectV2ItemFieldReviewerValueFields":
        """Subfields should come from the ProjectV2ItemFieldReviewerValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldReviewerValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldSingleSelectValueFields(GraphQLField):
    color: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("color")
    )
    created_at: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("createdAt")
    )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("databaseId")
    )
    description: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("description")
    )
    description_html: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("descriptionHTML")
    )
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )
    id: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("id")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    name: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("name")
    )
    name_html: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("nameHTML")
    )
    option_id: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("optionId")
    )
    updated_at: "ProjectV2ItemFieldSingleSelectValueGraphQLField" = (
        ProjectV2ItemFieldSingleSelectValueGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldSingleSelectValueGraphQLField,
            "ActorInterface",
            "ProjectV2FieldConfigurationUnion",
            "ProjectV2ItemFields",
        ]
    ) -> "ProjectV2ItemFieldSingleSelectValueFields":
        """Subfields should come from the ProjectV2ItemFieldSingleSelectValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldSingleSelectValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldTextValueFields(GraphQLField):
    created_at: "ProjectV2ItemFieldTextValueGraphQLField" = (
        ProjectV2ItemFieldTextValueGraphQLField("createdAt")
    )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2ItemFieldTextValueGraphQLField" = (
        ProjectV2ItemFieldTextValueGraphQLField("databaseId")
    )
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )
    id: "ProjectV2ItemFieldTextValueGraphQLField" = (
        ProjectV2ItemFieldTextValueGraphQLField("id")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    text: "ProjectV2ItemFieldTextValueGraphQLField" = (
        ProjectV2ItemFieldTextValueGraphQLField("text")
    )
    updated_at: "ProjectV2ItemFieldTextValueGraphQLField" = (
        ProjectV2ItemFieldTextValueGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldTextValueGraphQLField,
            "ActorInterface",
            "ProjectV2FieldConfigurationUnion",
            "ProjectV2ItemFields",
        ]
    ) -> "ProjectV2ItemFieldTextValueFields":
        """Subfields should come from the ProjectV2ItemFieldTextValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldTextValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldUserValueFields(GraphQLField):
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )

    @classmethod
    def users(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("users", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldUserValueGraphQLField,
            "ProjectV2FieldConfigurationUnion",
            "UserConnectionFields",
        ]
    ) -> "ProjectV2ItemFieldUserValueFields":
        """Subfields should come from the ProjectV2ItemFieldUserValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldUserValueFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldValueCommonInterface(GraphQLField):
    created_at: "ProjectV2ItemFieldValueCommonGraphQLField" = (
        ProjectV2ItemFieldValueCommonGraphQLField("createdAt")
    )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2ItemFieldValueCommonGraphQLField" = (
        ProjectV2ItemFieldValueCommonGraphQLField("databaseId")
    )
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )
    id: "ProjectV2ItemFieldValueCommonGraphQLField" = (
        ProjectV2ItemFieldValueCommonGraphQLField("id")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    updated_at: "ProjectV2ItemFieldValueCommonGraphQLField" = (
        ProjectV2ItemFieldValueCommonGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldValueCommonGraphQLField,
            "ActorInterface",
            "ProjectV2FieldConfigurationUnion",
            "ProjectV2ItemFields",
        ]
    ) -> "ProjectV2ItemFieldValueCommonInterface":
        """Subfields should come from the ProjectV2ItemFieldValueCommonInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldValueCommonInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "ProjectV2ItemFieldValueCommonInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ProjectV2ItemFieldValueConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2ItemFieldValueEdgeFields":
        return ProjectV2ItemFieldValueEdgeFields("edges")

    nodes: "ProjectV2ItemFieldValueUnion" = ProjectV2ItemFieldValueUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2ItemFieldValueConnectionGraphQLField" = (
        ProjectV2ItemFieldValueConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldValueConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2ItemFieldValueEdgeFields",
            "ProjectV2ItemFieldValueUnion",
        ]
    ) -> "ProjectV2ItemFieldValueConnectionFields":
        """Subfields should come from the ProjectV2ItemFieldValueConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldValueConnectionFields":
        self._alias = alias
        return self


class ProjectV2ItemFieldValueEdgeFields(GraphQLField):
    cursor: "ProjectV2ItemFieldValueEdgeGraphQLField" = (
        ProjectV2ItemFieldValueEdgeGraphQLField("cursor")
    )
    node: "ProjectV2ItemFieldValueUnion" = ProjectV2ItemFieldValueUnion("node")

    def fields(
        self,
        *subfields: Union[
            ProjectV2ItemFieldValueEdgeGraphQLField, "ProjectV2ItemFieldValueUnion"
        ]
    ) -> "ProjectV2ItemFieldValueEdgeFields":
        """Subfields should come from the ProjectV2ItemFieldValueEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ItemFieldValueEdgeFields":
        self._alias = alias
        return self


class ProjectV2IterationFieldFields(GraphQLField):
    @classmethod
    def configuration(cls) -> "ProjectV2IterationFieldConfigurationFields":
        return ProjectV2IterationFieldConfigurationFields("configuration")

    created_at: "ProjectV2IterationFieldGraphQLField" = (
        ProjectV2IterationFieldGraphQLField("createdAt")
    )
    data_type: "ProjectV2IterationFieldGraphQLField" = (
        ProjectV2IterationFieldGraphQLField("dataType")
    )
    database_id: "ProjectV2IterationFieldGraphQLField" = (
        ProjectV2IterationFieldGraphQLField("databaseId")
    )
    id: "ProjectV2IterationFieldGraphQLField" = ProjectV2IterationFieldGraphQLField(
        "id"
    )
    name: "ProjectV2IterationFieldGraphQLField" = ProjectV2IterationFieldGraphQLField(
        "name"
    )

    @classmethod
    def project(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project")

    updated_at: "ProjectV2IterationFieldGraphQLField" = (
        ProjectV2IterationFieldGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2IterationFieldGraphQLField,
            "ProjectV2Fields",
            "ProjectV2IterationFieldConfigurationFields",
        ]
    ) -> "ProjectV2IterationFieldFields":
        """Subfields should come from the ProjectV2IterationFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2IterationFieldFields":
        self._alias = alias
        return self


class ProjectV2IterationFieldConfigurationFields(GraphQLField):
    @classmethod
    def completed_iterations(cls) -> "ProjectV2IterationFieldIterationFields":
        return ProjectV2IterationFieldIterationFields("completed_iterations")

    duration: "ProjectV2IterationFieldConfigurationGraphQLField" = (
        ProjectV2IterationFieldConfigurationGraphQLField("duration")
    )

    @classmethod
    def iterations(cls) -> "ProjectV2IterationFieldIterationFields":
        return ProjectV2IterationFieldIterationFields("iterations")

    start_day: "ProjectV2IterationFieldConfigurationGraphQLField" = (
        ProjectV2IterationFieldConfigurationGraphQLField("startDay")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2IterationFieldConfigurationGraphQLField,
            "ProjectV2IterationFieldIterationFields",
        ]
    ) -> "ProjectV2IterationFieldConfigurationFields":
        """Subfields should come from the ProjectV2IterationFieldConfigurationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2IterationFieldConfigurationFields":
        self._alias = alias
        return self


class ProjectV2IterationFieldIterationFields(GraphQLField):
    duration: "ProjectV2IterationFieldIterationGraphQLField" = (
        ProjectV2IterationFieldIterationGraphQLField("duration")
    )
    id: "ProjectV2IterationFieldIterationGraphQLField" = (
        ProjectV2IterationFieldIterationGraphQLField("id")
    )
    start_date: "ProjectV2IterationFieldIterationGraphQLField" = (
        ProjectV2IterationFieldIterationGraphQLField("startDate")
    )
    title: "ProjectV2IterationFieldIterationGraphQLField" = (
        ProjectV2IterationFieldIterationGraphQLField("title")
    )
    title_html: "ProjectV2IterationFieldIterationGraphQLField" = (
        ProjectV2IterationFieldIterationGraphQLField("titleHTML")
    )

    def fields(
        self, *subfields: ProjectV2IterationFieldIterationGraphQLField
    ) -> "ProjectV2IterationFieldIterationFields":
        """Subfields should come from the ProjectV2IterationFieldIterationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2IterationFieldIterationFields":
        self._alias = alias
        return self


class ProjectV2OwnerInterface(GraphQLField):
    id: "ProjectV2OwnerGraphQLField" = ProjectV2OwnerGraphQLField("id")

    @classmethod
    def project_v_2(cls, number: int) -> "ProjectV2Fields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2Fields("project_v_2", arguments=cleared_arguments)

    @classmethod
    def projects_v_2(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        min_permission_level: Optional[ProjectV2PermissionLevel] = None,
        order_by: Optional[ProjectV2Order] = None,
        query: Optional[str] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "minPermissionLevel": {
                "type": "ProjectV2PermissionLevel",
                "value": min_permission_level,
            },
            "orderBy": {"type": "ProjectV2Order", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("projects_v_2", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            ProjectV2OwnerGraphQLField, "ProjectV2ConnectionFields", "ProjectV2Fields"
        ]
    ) -> "ProjectV2OwnerInterface":
        """Subfields should come from the ProjectV2OwnerInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2OwnerInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ProjectV2OwnerInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ProjectV2RecentInterface(GraphQLField):
    @classmethod
    def recent_projects(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("recent_projects", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[ProjectV2RecentGraphQLField, "ProjectV2ConnectionFields"]
    ) -> "ProjectV2RecentInterface":
        """Subfields should come from the ProjectV2RecentInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2RecentInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "ProjectV2RecentInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ProjectV2SingleSelectFieldFields(GraphQLField):
    created_at: "ProjectV2SingleSelectFieldGraphQLField" = (
        ProjectV2SingleSelectFieldGraphQLField("createdAt")
    )
    data_type: "ProjectV2SingleSelectFieldGraphQLField" = (
        ProjectV2SingleSelectFieldGraphQLField("dataType")
    )
    database_id: "ProjectV2SingleSelectFieldGraphQLField" = (
        ProjectV2SingleSelectFieldGraphQLField("databaseId")
    )
    id: "ProjectV2SingleSelectFieldGraphQLField" = (
        ProjectV2SingleSelectFieldGraphQLField("id")
    )
    name: "ProjectV2SingleSelectFieldGraphQLField" = (
        ProjectV2SingleSelectFieldGraphQLField("name")
    )

    @classmethod
    def options(
        cls, *, names: Optional[str] = None
    ) -> "ProjectV2SingleSelectFieldOptionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "names": {"type": "String", "value": names}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2SingleSelectFieldOptionFields(
            "options", arguments=cleared_arguments
        )

    @classmethod
    def project(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project")

    updated_at: "ProjectV2SingleSelectFieldGraphQLField" = (
        ProjectV2SingleSelectFieldGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2SingleSelectFieldGraphQLField,
            "ProjectV2Fields",
            "ProjectV2SingleSelectFieldOptionFields",
        ]
    ) -> "ProjectV2SingleSelectFieldFields":
        """Subfields should come from the ProjectV2SingleSelectFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2SingleSelectFieldFields":
        self._alias = alias
        return self


class ProjectV2SingleSelectFieldOptionFields(GraphQLField):
    color: "ProjectV2SingleSelectFieldOptionGraphQLField" = (
        ProjectV2SingleSelectFieldOptionGraphQLField("color")
    )
    description: "ProjectV2SingleSelectFieldOptionGraphQLField" = (
        ProjectV2SingleSelectFieldOptionGraphQLField("description")
    )
    description_html: "ProjectV2SingleSelectFieldOptionGraphQLField" = (
        ProjectV2SingleSelectFieldOptionGraphQLField("descriptionHTML")
    )
    id: "ProjectV2SingleSelectFieldOptionGraphQLField" = (
        ProjectV2SingleSelectFieldOptionGraphQLField("id")
    )
    name: "ProjectV2SingleSelectFieldOptionGraphQLField" = (
        ProjectV2SingleSelectFieldOptionGraphQLField("name")
    )
    name_html: "ProjectV2SingleSelectFieldOptionGraphQLField" = (
        ProjectV2SingleSelectFieldOptionGraphQLField("nameHTML")
    )

    def fields(
        self, *subfields: ProjectV2SingleSelectFieldOptionGraphQLField
    ) -> "ProjectV2SingleSelectFieldOptionFields":
        """Subfields should come from the ProjectV2SingleSelectFieldOptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2SingleSelectFieldOptionFields":
        self._alias = alias
        return self


class ProjectV2SortByFields(GraphQLField):
    direction: "ProjectV2SortByGraphQLField" = ProjectV2SortByGraphQLField("direction")

    @classmethod
    def field(cls) -> "ProjectV2FieldFields":
        return ProjectV2FieldFields("field")

    def fields(
        self, *subfields: Union[ProjectV2SortByGraphQLField, "ProjectV2FieldFields"]
    ) -> "ProjectV2SortByFields":
        """Subfields should come from the ProjectV2SortByFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2SortByFields":
        self._alias = alias
        return self


class ProjectV2SortByConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2SortByEdgeFields":
        return ProjectV2SortByEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectV2SortByFields":
        return ProjectV2SortByFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2SortByConnectionGraphQLField" = (
        ProjectV2SortByConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2SortByConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2SortByEdgeFields",
            "ProjectV2SortByFields",
        ]
    ) -> "ProjectV2SortByConnectionFields":
        """Subfields should come from the ProjectV2SortByConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2SortByConnectionFields":
        self._alias = alias
        return self


class ProjectV2SortByEdgeFields(GraphQLField):
    cursor: "ProjectV2SortByEdgeGraphQLField" = ProjectV2SortByEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "ProjectV2SortByFields":
        return ProjectV2SortByFields("node")

    def fields(
        self,
        *subfields: Union[ProjectV2SortByEdgeGraphQLField, "ProjectV2SortByFields"]
    ) -> "ProjectV2SortByEdgeFields":
        """Subfields should come from the ProjectV2SortByEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2SortByEdgeFields":
        self._alias = alias
        return self


class ProjectV2SortByFieldFields(GraphQLField):
    direction: "ProjectV2SortByFieldGraphQLField" = ProjectV2SortByFieldGraphQLField(
        "direction"
    )
    field: "ProjectV2FieldConfigurationUnion" = ProjectV2FieldConfigurationUnion(
        "field"
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2SortByFieldGraphQLField, "ProjectV2FieldConfigurationUnion"
        ]
    ) -> "ProjectV2SortByFieldFields":
        """Subfields should come from the ProjectV2SortByFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2SortByFieldFields":
        self._alias = alias
        return self


class ProjectV2SortByFieldConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2SortByFieldEdgeFields":
        return ProjectV2SortByFieldEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectV2SortByFieldFields":
        return ProjectV2SortByFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2SortByFieldConnectionGraphQLField" = (
        ProjectV2SortByFieldConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2SortByFieldConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2SortByFieldEdgeFields",
            "ProjectV2SortByFieldFields",
        ]
    ) -> "ProjectV2SortByFieldConnectionFields":
        """Subfields should come from the ProjectV2SortByFieldConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2SortByFieldConnectionFields":
        self._alias = alias
        return self


class ProjectV2SortByFieldEdgeFields(GraphQLField):
    cursor: "ProjectV2SortByFieldEdgeGraphQLField" = (
        ProjectV2SortByFieldEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "ProjectV2SortByFieldFields":
        return ProjectV2SortByFieldFields("node")

    def fields(
        self,
        *subfields: Union[
            ProjectV2SortByFieldEdgeGraphQLField, "ProjectV2SortByFieldFields"
        ]
    ) -> "ProjectV2SortByFieldEdgeFields":
        """Subfields should come from the ProjectV2SortByFieldEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2SortByFieldEdgeFields":
        self._alias = alias
        return self


class ProjectV2StatusUpdateFields(GraphQLField):
    body: "ProjectV2StatusUpdateGraphQLField" = ProjectV2StatusUpdateGraphQLField(
        "body"
    )
    body_html: "ProjectV2StatusUpdateGraphQLField" = ProjectV2StatusUpdateGraphQLField(
        "bodyHTML"
    )
    created_at: "ProjectV2StatusUpdateGraphQLField" = ProjectV2StatusUpdateGraphQLField(
        "createdAt"
    )

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    database_id: "ProjectV2StatusUpdateGraphQLField" = (
        ProjectV2StatusUpdateGraphQLField("databaseId")
    )
    full_database_id: "ProjectV2StatusUpdateGraphQLField" = (
        ProjectV2StatusUpdateGraphQLField("fullDatabaseId")
    )
    id: "ProjectV2StatusUpdateGraphQLField" = ProjectV2StatusUpdateGraphQLField("id")

    @classmethod
    def project(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project")

    start_date: "ProjectV2StatusUpdateGraphQLField" = ProjectV2StatusUpdateGraphQLField(
        "startDate"
    )
    status: "ProjectV2StatusUpdateGraphQLField" = ProjectV2StatusUpdateGraphQLField(
        "status"
    )
    target_date: "ProjectV2StatusUpdateGraphQLField" = (
        ProjectV2StatusUpdateGraphQLField("targetDate")
    )
    updated_at: "ProjectV2StatusUpdateGraphQLField" = ProjectV2StatusUpdateGraphQLField(
        "updatedAt"
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2StatusUpdateGraphQLField, "ActorInterface", "ProjectV2Fields"
        ]
    ) -> "ProjectV2StatusUpdateFields":
        """Subfields should come from the ProjectV2StatusUpdateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2StatusUpdateFields":
        self._alias = alias
        return self


class ProjectV2StatusUpdateConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2StatusUpdateEdgeFields":
        return ProjectV2StatusUpdateEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectV2StatusUpdateFields":
        return ProjectV2StatusUpdateFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2StatusUpdateConnectionGraphQLField" = (
        ProjectV2StatusUpdateConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2StatusUpdateConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2StatusUpdateEdgeFields",
            "ProjectV2StatusUpdateFields",
        ]
    ) -> "ProjectV2StatusUpdateConnectionFields":
        """Subfields should come from the ProjectV2StatusUpdateConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2StatusUpdateConnectionFields":
        self._alias = alias
        return self


class ProjectV2StatusUpdateEdgeFields(GraphQLField):
    cursor: "ProjectV2StatusUpdateEdgeGraphQLField" = (
        ProjectV2StatusUpdateEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "ProjectV2StatusUpdateFields":
        return ProjectV2StatusUpdateFields("node")

    def fields(
        self,
        *subfields: Union[
            ProjectV2StatusUpdateEdgeGraphQLField, "ProjectV2StatusUpdateFields"
        ]
    ) -> "ProjectV2StatusUpdateEdgeFields":
        """Subfields should come from the ProjectV2StatusUpdateEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2StatusUpdateEdgeFields":
        self._alias = alias
        return self


class ProjectV2ViewFields(GraphQLField):
    created_at: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField("createdAt")
    database_id: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField("databaseId")

    @classmethod
    def fields(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2FieldOrder] = None
    ) -> "ProjectV2FieldConfigurationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2FieldOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2FieldConfigurationConnectionFields(
            "fields", arguments=cleared_arguments
        )

    filter: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField("filter")
    full_database_id: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField(
        "fullDatabaseId"
    )

    @classmethod
    def group_by(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2FieldOrder] = None
    ) -> "ProjectV2FieldConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2FieldOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2FieldConnectionFields("group_by", arguments=cleared_arguments)

    @classmethod
    def group_by_fields(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2FieldOrder] = None
    ) -> "ProjectV2FieldConfigurationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2FieldOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2FieldConfigurationConnectionFields(
            "group_by_fields", arguments=cleared_arguments
        )

    id: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField("id")
    layout: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField("layout")
    name: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField("name")
    number: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField("number")

    @classmethod
    def project(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project")

    @classmethod
    def sort_by(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2SortByConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2SortByConnectionFields("sort_by", arguments=cleared_arguments)

    @classmethod
    def sort_by_fields(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2SortByFieldConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2SortByFieldConnectionFields(
            "sort_by_fields", arguments=cleared_arguments
        )

    updated_at: "ProjectV2ViewGraphQLField" = ProjectV2ViewGraphQLField("updatedAt")

    @classmethod
    def vertical_group_by(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2FieldOrder] = None
    ) -> "ProjectV2FieldConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2FieldOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2FieldConnectionFields(
            "vertical_group_by", arguments=cleared_arguments
        )

    @classmethod
    def vertical_group_by_fields(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2FieldOrder] = None
    ) -> "ProjectV2FieldConfigurationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2FieldOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2FieldConfigurationConnectionFields(
            "vertical_group_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def visible_fields(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectV2FieldOrder] = None
    ) -> "ProjectV2FieldConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectV2FieldOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2FieldConnectionFields(
            "visible_fields", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ViewGraphQLField,
            "ProjectV2FieldConfigurationConnectionFields",
            "ProjectV2FieldConnectionFields",
            "ProjectV2Fields",
            "ProjectV2SortByConnectionFields",
            "ProjectV2SortByFieldConnectionFields",
        ]
    ) -> "ProjectV2ViewFields":
        """Subfields should come from the ProjectV2ViewFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ViewFields":
        self._alias = alias
        return self


class ProjectV2ViewConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2ViewEdgeFields":
        return ProjectV2ViewEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectV2ViewFields":
        return ProjectV2ViewFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2ViewConnectionGraphQLField" = (
        ProjectV2ViewConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2ViewConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2ViewEdgeFields",
            "ProjectV2ViewFields",
        ]
    ) -> "ProjectV2ViewConnectionFields":
        """Subfields should come from the ProjectV2ViewConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ViewConnectionFields":
        self._alias = alias
        return self


class ProjectV2ViewEdgeFields(GraphQLField):
    cursor: "ProjectV2ViewEdgeGraphQLField" = ProjectV2ViewEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ProjectV2ViewFields":
        return ProjectV2ViewFields("node")

    def fields(
        self, *subfields: Union[ProjectV2ViewEdgeGraphQLField, "ProjectV2ViewFields"]
    ) -> "ProjectV2ViewEdgeFields":
        """Subfields should come from the ProjectV2ViewEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2ViewEdgeFields":
        self._alias = alias
        return self


class ProjectV2WorkflowFields(GraphQLField):
    created_at: "ProjectV2WorkflowGraphQLField" = ProjectV2WorkflowGraphQLField(
        "createdAt"
    )
    database_id: "ProjectV2WorkflowGraphQLField" = ProjectV2WorkflowGraphQLField(
        "databaseId"
    )
    enabled: "ProjectV2WorkflowGraphQLField" = ProjectV2WorkflowGraphQLField("enabled")
    full_database_id: "ProjectV2WorkflowGraphQLField" = ProjectV2WorkflowGraphQLField(
        "fullDatabaseId"
    )
    id: "ProjectV2WorkflowGraphQLField" = ProjectV2WorkflowGraphQLField("id")
    name: "ProjectV2WorkflowGraphQLField" = ProjectV2WorkflowGraphQLField("name")
    number: "ProjectV2WorkflowGraphQLField" = ProjectV2WorkflowGraphQLField("number")

    @classmethod
    def project(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project")

    updated_at: "ProjectV2WorkflowGraphQLField" = ProjectV2WorkflowGraphQLField(
        "updatedAt"
    )

    def fields(
        self, *subfields: Union[ProjectV2WorkflowGraphQLField, "ProjectV2Fields"]
    ) -> "ProjectV2WorkflowFields":
        """Subfields should come from the ProjectV2WorkflowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2WorkflowFields":
        self._alias = alias
        return self


class ProjectV2WorkflowConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ProjectV2WorkflowEdgeFields":
        return ProjectV2WorkflowEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ProjectV2WorkflowFields":
        return ProjectV2WorkflowFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ProjectV2WorkflowConnectionGraphQLField" = (
        ProjectV2WorkflowConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ProjectV2WorkflowConnectionGraphQLField,
            "PageInfoFields",
            "ProjectV2WorkflowEdgeFields",
            "ProjectV2WorkflowFields",
        ]
    ) -> "ProjectV2WorkflowConnectionFields":
        """Subfields should come from the ProjectV2WorkflowConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2WorkflowConnectionFields":
        self._alias = alias
        return self


class ProjectV2WorkflowEdgeFields(GraphQLField):
    cursor: "ProjectV2WorkflowEdgeGraphQLField" = ProjectV2WorkflowEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "ProjectV2WorkflowFields":
        return ProjectV2WorkflowFields("node")

    def fields(
        self,
        *subfields: Union[ProjectV2WorkflowEdgeGraphQLField, "ProjectV2WorkflowFields"]
    ) -> "ProjectV2WorkflowEdgeFields":
        """Subfields should come from the ProjectV2WorkflowEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectV2WorkflowEdgeFields":
        self._alias = alias
        return self


class PropertyTargetDefinitionFields(GraphQLField):
    name: "PropertyTargetDefinitionGraphQLField" = PropertyTargetDefinitionGraphQLField(
        "name"
    )
    property_values: "PropertyTargetDefinitionGraphQLField" = (
        PropertyTargetDefinitionGraphQLField("propertyValues")
    )
    source: "PropertyTargetDefinitionGraphQLField" = (
        PropertyTargetDefinitionGraphQLField("source")
    )

    def fields(
        self, *subfields: PropertyTargetDefinitionGraphQLField
    ) -> "PropertyTargetDefinitionFields":
        """Subfields should come from the PropertyTargetDefinitionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PropertyTargetDefinitionFields":
        self._alias = alias
        return self


class PublicKeyFields(GraphQLField):
    accessed_at: "PublicKeyGraphQLField" = PublicKeyGraphQLField("accessedAt")
    created_at: "PublicKeyGraphQLField" = PublicKeyGraphQLField("createdAt")
    fingerprint: "PublicKeyGraphQLField" = PublicKeyGraphQLField("fingerprint")
    id: "PublicKeyGraphQLField" = PublicKeyGraphQLField("id")
    is_read_only: "PublicKeyGraphQLField" = PublicKeyGraphQLField("isReadOnly")
    key: "PublicKeyGraphQLField" = PublicKeyGraphQLField("key")
    updated_at: "PublicKeyGraphQLField" = PublicKeyGraphQLField("updatedAt")

    def fields(self, *subfields: PublicKeyGraphQLField) -> "PublicKeyFields":
        """Subfields should come from the PublicKeyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PublicKeyFields":
        self._alias = alias
        return self


class PublicKeyConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PublicKeyEdgeFields":
        return PublicKeyEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PublicKeyFields":
        return PublicKeyFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PublicKeyConnectionGraphQLField" = PublicKeyConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            PublicKeyConnectionGraphQLField,
            "PageInfoFields",
            "PublicKeyEdgeFields",
            "PublicKeyFields",
        ]
    ) -> "PublicKeyConnectionFields":
        """Subfields should come from the PublicKeyConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PublicKeyConnectionFields":
        self._alias = alias
        return self


class PublicKeyEdgeFields(GraphQLField):
    cursor: "PublicKeyEdgeGraphQLField" = PublicKeyEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "PublicKeyFields":
        return PublicKeyFields("node")

    def fields(
        self, *subfields: Union[PublicKeyEdgeGraphQLField, "PublicKeyFields"]
    ) -> "PublicKeyEdgeFields":
        """Subfields should come from the PublicKeyEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PublicKeyEdgeFields":
        self._alias = alias
        return self


class PublishSponsorsTierPayloadFields(GraphQLField):
    client_mutation_id: "PublishSponsorsTierPayloadGraphQLField" = (
        PublishSponsorsTierPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsors_tier(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("sponsors_tier")

    def fields(
        self,
        *subfields: Union[PublishSponsorsTierPayloadGraphQLField, "SponsorsTierFields"]
    ) -> "PublishSponsorsTierPayloadFields":
        """Subfields should come from the PublishSponsorsTierPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PublishSponsorsTierPayloadFields":
        self._alias = alias
        return self


class PullRequestFields(GraphQLField):
    active_lock_reason: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "activeLockReason"
    )
    additions: "PullRequestGraphQLField" = PullRequestGraphQLField("additions")

    @classmethod
    def assigned_actors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "AssigneeConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AssigneeConnectionFields("assigned_actors", arguments=cleared_arguments)

    @classmethod
    def assignees(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("assignees", arguments=cleared_arguments)

    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "authorAssociation"
    )

    @classmethod
    def auto_merge_request(cls) -> "AutoMergeRequestFields":
        return AutoMergeRequestFields("auto_merge_request")

    @classmethod
    def base_ref(cls) -> "RefFields":
        return RefFields("base_ref")

    base_ref_name: "PullRequestGraphQLField" = PullRequestGraphQLField("baseRefName")
    base_ref_oid: "PullRequestGraphQLField" = PullRequestGraphQLField("baseRefOid")

    @classmethod
    def base_repository(cls) -> "RepositoryFields":
        return RepositoryFields("base_repository")

    body: "PullRequestGraphQLField" = PullRequestGraphQLField("body")
    body_html: "PullRequestGraphQLField" = PullRequestGraphQLField("bodyHTML")
    body_text: "PullRequestGraphQLField" = PullRequestGraphQLField("bodyText")
    can_be_rebased: "PullRequestGraphQLField" = PullRequestGraphQLField("canBeRebased")
    changed_files: "PullRequestGraphQLField" = PullRequestGraphQLField("changedFiles")
    checks_resource_path: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "checksResourcePath"
    )
    checks_url: "PullRequestGraphQLField" = PullRequestGraphQLField("checksUrl")
    closed: "PullRequestGraphQLField" = PullRequestGraphQLField("closed")
    closed_at: "PullRequestGraphQLField" = PullRequestGraphQLField("closedAt")

    @classmethod
    def closing_issues_references(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        user_linked_only: Optional[bool] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "userLinkedOnly": {"type": "Boolean", "value": user_linked_only},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields(
            "closing_issues_references", arguments=cleared_arguments
        )

    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueCommentOrder] = None
    ) -> "IssueCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueCommentOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueCommentConnectionFields("comments", arguments=cleared_arguments)

    @classmethod
    def commits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PullRequestCommitConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestCommitConnectionFields("commits", arguments=cleared_arguments)

    created_at: "PullRequestGraphQLField" = PullRequestGraphQLField("createdAt")
    created_via_email: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "createdViaEmail"
    )
    database_id: "PullRequestGraphQLField" = PullRequestGraphQLField("databaseId")
    deletions: "PullRequestGraphQLField" = PullRequestGraphQLField("deletions")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    @classmethod
    def files(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PullRequestChangedFileConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestChangedFileConnectionFields(
            "files", arguments=cleared_arguments
        )

    full_database_id: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "fullDatabaseId"
    )

    @classmethod
    def head_ref(cls) -> "RefFields":
        return RefFields("head_ref")

    head_ref_name: "PullRequestGraphQLField" = PullRequestGraphQLField("headRefName")
    head_ref_oid: "PullRequestGraphQLField" = PullRequestGraphQLField("headRefOid")

    @classmethod
    def head_repository(cls) -> "RepositoryFields":
        return RepositoryFields("head_repository")

    @classmethod
    def head_repository_owner(cls) -> "RepositoryOwnerInterface":
        return RepositoryOwnerInterface("head_repository_owner")

    @classmethod
    def hovercard(
        cls, *, include_notification_contexts: Optional[bool] = None
    ) -> "HovercardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeNotificationContexts": {
                "type": "Boolean",
                "value": include_notification_contexts,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HovercardFields("hovercard", arguments=cleared_arguments)

    id: "PullRequestGraphQLField" = PullRequestGraphQLField("id")
    includes_created_edit: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "includesCreatedEdit"
    )
    is_cross_repository: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "isCrossRepository"
    )
    is_draft: "PullRequestGraphQLField" = PullRequestGraphQLField("isDraft")
    is_in_merge_queue: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "isInMergeQueue"
    )
    is_merge_queue_enabled: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "isMergeQueueEnabled"
    )
    is_read_by_viewer: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "isReadByViewer"
    )

    @classmethod
    def labels(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[LabelOrder] = None
    ) -> "LabelConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "LabelOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelConnectionFields("labels", arguments=cleared_arguments)

    last_edited_at: "PullRequestGraphQLField" = PullRequestGraphQLField("lastEditedAt")

    @classmethod
    def latest_opinionated_reviews(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        writers_only: Optional[bool] = None
    ) -> "PullRequestReviewConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "writersOnly": {"type": "Boolean", "value": writers_only},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestReviewConnectionFields(
            "latest_opinionated_reviews", arguments=cleared_arguments
        )

    @classmethod
    def latest_reviews(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PullRequestReviewConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestReviewConnectionFields(
            "latest_reviews", arguments=cleared_arguments
        )

    locked: "PullRequestGraphQLField" = PullRequestGraphQLField("locked")
    maintainer_can_modify: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "maintainerCanModify"
    )

    @classmethod
    def merge_commit(cls) -> "CommitFields":
        return CommitFields("merge_commit")

    @classmethod
    def merge_queue(cls) -> "MergeQueueFields":
        return MergeQueueFields("merge_queue")

    @classmethod
    def merge_queue_entry(cls) -> "MergeQueueEntryFields":
        return MergeQueueEntryFields("merge_queue_entry")

    merge_state_status: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "mergeStateStatus"
    )
    mergeable: "PullRequestGraphQLField" = PullRequestGraphQLField("mergeable")
    merged: "PullRequestGraphQLField" = PullRequestGraphQLField("merged")
    merged_at: "PullRequestGraphQLField" = PullRequestGraphQLField("mergedAt")

    @classmethod
    def merged_by(cls) -> "ActorInterface":
        return ActorInterface("merged_by")

    @classmethod
    def milestone(cls) -> "MilestoneFields":
        return MilestoneFields("milestone")

    number: "PullRequestGraphQLField" = PullRequestGraphQLField("number")

    @classmethod
    def participants(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("participants", arguments=cleared_arguments)

    permalink: "PullRequestGraphQLField" = PullRequestGraphQLField("permalink")

    @classmethod
    def potential_merge_commit(cls) -> "CommitFields":
        return CommitFields("potential_merge_commit")

    @classmethod
    def project_cards(
        cls,
        *,
        after: Optional[str] = None,
        archived_states: Optional[ProjectCardArchivedState] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectCardConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "archivedStates": {
                "type": "ProjectCardArchivedState",
                "value": archived_states,
            },
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectCardConnectionFields("project_cards", arguments=cleared_arguments)

    @classmethod
    def project_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_archived: Optional[bool] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeArchived": {"type": "Boolean", "value": include_archived},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ItemConnectionFields(
            "project_items", arguments=cleared_arguments
        )

    @classmethod
    def project_v_2(cls, number: int) -> "ProjectV2Fields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2Fields("project_v_2", arguments=cleared_arguments)

    @classmethod
    def projects_v_2(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        min_permission_level: Optional[ProjectV2PermissionLevel] = None,
        order_by: Optional[ProjectV2Order] = None,
        query: Optional[str] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "minPermissionLevel": {
                "type": "ProjectV2PermissionLevel",
                "value": min_permission_level,
            },
            "orderBy": {"type": "ProjectV2Order", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("projects_v_2", arguments=cleared_arguments)

    published_at: "PullRequestGraphQLField" = PullRequestGraphQLField("publishedAt")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "PullRequestGraphQLField" = PullRequestGraphQLField("resourcePath")
    revert_resource_path: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "revertResourcePath"
    )
    revert_url: "PullRequestGraphQLField" = PullRequestGraphQLField("revertUrl")
    review_decision: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "reviewDecision"
    )

    @classmethod
    def review_requests(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ReviewRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReviewRequestConnectionFields(
            "review_requests", arguments=cleared_arguments
        )

    @classmethod
    def review_threads(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PullRequestReviewThreadConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestReviewThreadConnectionFields(
            "review_threads", arguments=cleared_arguments
        )

    @classmethod
    def reviews(
        cls,
        *,
        after: Optional[str] = None,
        author: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        states: Optional[PullRequestReviewState] = None
    ) -> "PullRequestReviewConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "author": {"type": "String", "value": author},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "states": {"type": "PullRequestReviewState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestReviewConnectionFields("reviews", arguments=cleared_arguments)

    state: "PullRequestGraphQLField" = PullRequestGraphQLField("state")

    @classmethod
    def status_check_rollup(cls) -> "StatusCheckRollupFields":
        return StatusCheckRollupFields("status_check_rollup")

    @classmethod
    def suggested_actors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        query: Optional[str] = None
    ) -> "AssigneeConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AssigneeConnectionFields("suggested_actors", arguments=cleared_arguments)

    @classmethod
    def suggested_reviewers(cls) -> "SuggestedReviewerFields":
        return SuggestedReviewerFields("suggested_reviewers")

    @classmethod
    def timeline(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        since: Optional[Any] = None
    ) -> "PullRequestTimelineConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "since": {"type": "DateTime", "value": since},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestTimelineConnectionFields(
            "timeline", arguments=cleared_arguments
        )

    @classmethod
    def timeline_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        item_types: Optional[PullRequestTimelineItemsItemType] = None,
        last: Optional[int] = None,
        since: Optional[Any] = None,
        skip: Optional[int] = None
    ) -> "PullRequestTimelineItemsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "itemTypes": {
                "type": "PullRequestTimelineItemsItemType",
                "value": item_types,
            },
            "last": {"type": "Int", "value": last},
            "since": {"type": "DateTime", "value": since},
            "skip": {"type": "Int", "value": skip},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestTimelineItemsConnectionFields(
            "timeline_items", arguments=cleared_arguments
        )

    title: "PullRequestGraphQLField" = PullRequestGraphQLField("title")
    title_html: "PullRequestGraphQLField" = PullRequestGraphQLField("titleHTML")
    total_comments_count: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "totalCommentsCount"
    )
    updated_at: "PullRequestGraphQLField" = PullRequestGraphQLField("updatedAt")
    url: "PullRequestGraphQLField" = PullRequestGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_apply_suggestion: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanApplySuggestion"
    )
    viewer_can_close: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanClose"
    )
    viewer_can_delete_head_ref: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanDeleteHeadRef"
    )
    viewer_can_disable_auto_merge: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanDisableAutoMerge"
    )
    viewer_can_edit_files: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanEditFiles"
    )
    viewer_can_enable_auto_merge: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanEnableAutoMerge"
    )
    viewer_can_label: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanLabel"
    )
    viewer_can_merge_as_admin: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanMergeAsAdmin"
    )
    viewer_can_react: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanReact"
    )
    viewer_can_reopen: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanReopen"
    )
    viewer_can_subscribe: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanSubscribe"
    )
    viewer_can_update: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanUpdate"
    )
    viewer_can_update_branch: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCanUpdateBranch"
    )
    viewer_cannot_update_reasons: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerCannotUpdateReasons"
    )
    viewer_did_author: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerDidAuthor"
    )

    @classmethod
    def viewer_latest_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("viewer_latest_review")

    @classmethod
    def viewer_latest_review_request(cls) -> "ReviewRequestFields":
        return ReviewRequestFields("viewer_latest_review_request")

    @classmethod
    def viewer_merge_body_text(
        cls, *, merge_type: Optional[PullRequestMergeMethod] = None
    ) -> "PullRequestGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "mergeType": {"type": "PullRequestMergeMethod", "value": merge_type}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestGraphQLField(
            "viewer_merge_body_text", arguments=cleared_arguments
        )

    @classmethod
    def viewer_merge_headline_text(
        cls, *, merge_type: Optional[PullRequestMergeMethod] = None
    ) -> "PullRequestGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "mergeType": {"type": "PullRequestMergeMethod", "value": merge_type}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestGraphQLField(
            "viewer_merge_headline_text", arguments=cleared_arguments
        )

    viewer_subscription: "PullRequestGraphQLField" = PullRequestGraphQLField(
        "viewerSubscription"
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestGraphQLField,
            "ActorInterface",
            "AssigneeConnectionFields",
            "AutoMergeRequestFields",
            "CommitFields",
            "HovercardFields",
            "IssueCommentConnectionFields",
            "IssueConnectionFields",
            "LabelConnectionFields",
            "MergeQueueEntryFields",
            "MergeQueueFields",
            "MilestoneFields",
            "ProjectCardConnectionFields",
            "ProjectV2ConnectionFields",
            "ProjectV2Fields",
            "ProjectV2ItemConnectionFields",
            "PullRequestChangedFileConnectionFields",
            "PullRequestCommitConnectionFields",
            "PullRequestReviewConnectionFields",
            "PullRequestReviewFields",
            "PullRequestReviewThreadConnectionFields",
            "PullRequestTimelineConnectionFields",
            "PullRequestTimelineItemsConnectionFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "RefFields",
            "RepositoryFields",
            "RepositoryOwnerInterface",
            "ReviewRequestConnectionFields",
            "ReviewRequestFields",
            "StatusCheckRollupFields",
            "SuggestedReviewerFields",
            "UserConnectionFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "PullRequestFields":
        """Subfields should come from the PullRequestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestFields":
        self._alias = alias
        return self


class PullRequestChangedFileFields(GraphQLField):
    additions: "PullRequestChangedFileGraphQLField" = (
        PullRequestChangedFileGraphQLField("additions")
    )
    change_type: "PullRequestChangedFileGraphQLField" = (
        PullRequestChangedFileGraphQLField("changeType")
    )
    deletions: "PullRequestChangedFileGraphQLField" = (
        PullRequestChangedFileGraphQLField("deletions")
    )
    path: "PullRequestChangedFileGraphQLField" = PullRequestChangedFileGraphQLField(
        "path"
    )
    viewer_viewed_state: "PullRequestChangedFileGraphQLField" = (
        PullRequestChangedFileGraphQLField("viewerViewedState")
    )

    def fields(
        self, *subfields: PullRequestChangedFileGraphQLField
    ) -> "PullRequestChangedFileFields":
        """Subfields should come from the PullRequestChangedFileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestChangedFileFields":
        self._alias = alias
        return self


class PullRequestChangedFileConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PullRequestChangedFileEdgeFields":
        return PullRequestChangedFileEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PullRequestChangedFileFields":
        return PullRequestChangedFileFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PullRequestChangedFileConnectionGraphQLField" = (
        PullRequestChangedFileConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestChangedFileConnectionGraphQLField,
            "PageInfoFields",
            "PullRequestChangedFileEdgeFields",
            "PullRequestChangedFileFields",
        ]
    ) -> "PullRequestChangedFileConnectionFields":
        """Subfields should come from the PullRequestChangedFileConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestChangedFileConnectionFields":
        self._alias = alias
        return self


class PullRequestChangedFileEdgeFields(GraphQLField):
    cursor: "PullRequestChangedFileEdgeGraphQLField" = (
        PullRequestChangedFileEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "PullRequestChangedFileFields":
        return PullRequestChangedFileFields("node")

    def fields(
        self,
        *subfields: Union[
            PullRequestChangedFileEdgeGraphQLField, "PullRequestChangedFileFields"
        ]
    ) -> "PullRequestChangedFileEdgeFields":
        """Subfields should come from the PullRequestChangedFileEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestChangedFileEdgeFields":
        self._alias = alias
        return self


class PullRequestCommitFields(GraphQLField):
    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    id: "PullRequestCommitGraphQLField" = PullRequestCommitGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    resource_path: "PullRequestCommitGraphQLField" = PullRequestCommitGraphQLField(
        "resourcePath"
    )
    url: "PullRequestCommitGraphQLField" = PullRequestCommitGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            PullRequestCommitGraphQLField, "CommitFields", "PullRequestFields"
        ]
    ) -> "PullRequestCommitFields":
        """Subfields should come from the PullRequestCommitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestCommitFields":
        self._alias = alias
        return self


class PullRequestCommitCommentThreadFields(GraphQLField):
    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CommitCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CommitCommentConnectionFields("comments", arguments=cleared_arguments)

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    id: "PullRequestCommitCommentThreadGraphQLField" = (
        PullRequestCommitCommentThreadGraphQLField("id")
    )
    path: "PullRequestCommitCommentThreadGraphQLField" = (
        PullRequestCommitCommentThreadGraphQLField("path")
    )
    position: "PullRequestCommitCommentThreadGraphQLField" = (
        PullRequestCommitCommentThreadGraphQLField("position")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            PullRequestCommitCommentThreadGraphQLField,
            "CommitCommentConnectionFields",
            "CommitFields",
            "PullRequestFields",
            "RepositoryFields",
        ]
    ) -> "PullRequestCommitCommentThreadFields":
        """Subfields should come from the PullRequestCommitCommentThreadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestCommitCommentThreadFields":
        self._alias = alias
        return self


class PullRequestCommitConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PullRequestCommitEdgeFields":
        return PullRequestCommitEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PullRequestCommitFields":
        return PullRequestCommitFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PullRequestCommitConnectionGraphQLField" = (
        PullRequestCommitConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestCommitConnectionGraphQLField,
            "PageInfoFields",
            "PullRequestCommitEdgeFields",
            "PullRequestCommitFields",
        ]
    ) -> "PullRequestCommitConnectionFields":
        """Subfields should come from the PullRequestCommitConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestCommitConnectionFields":
        self._alias = alias
        return self


class PullRequestCommitEdgeFields(GraphQLField):
    cursor: "PullRequestCommitEdgeGraphQLField" = PullRequestCommitEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "PullRequestCommitFields":
        return PullRequestCommitFields("node")

    def fields(
        self,
        *subfields: Union[PullRequestCommitEdgeGraphQLField, "PullRequestCommitFields"]
    ) -> "PullRequestCommitEdgeFields":
        """Subfields should come from the PullRequestCommitEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestCommitEdgeFields":
        self._alias = alias
        return self


class PullRequestConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PullRequestEdgeFields":
        return PullRequestEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PullRequestFields":
        return PullRequestFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PullRequestConnectionGraphQLField" = (
        PullRequestConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestConnectionGraphQLField,
            "PageInfoFields",
            "PullRequestEdgeFields",
            "PullRequestFields",
        ]
    ) -> "PullRequestConnectionFields":
        """Subfields should come from the PullRequestConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestConnectionFields":
        self._alias = alias
        return self


class PullRequestContributionsByRepositoryFields(GraphQLField):
    @classmethod
    def contributions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ContributionOrder] = None
    ) -> "CreatedPullRequestContributionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ContributionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatedPullRequestContributionConnectionFields(
            "contributions", arguments=cleared_arguments
        )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            PullRequestContributionsByRepositoryGraphQLField,
            "CreatedPullRequestContributionConnectionFields",
            "RepositoryFields",
        ]
    ) -> "PullRequestContributionsByRepositoryFields":
        """Subfields should come from the PullRequestContributionsByRepositoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestContributionsByRepositoryFields":
        self._alias = alias
        return self


class PullRequestEdgeFields(GraphQLField):
    cursor: "PullRequestEdgeGraphQLField" = PullRequestEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "PullRequestFields":
        return PullRequestFields("node")

    def fields(
        self, *subfields: Union[PullRequestEdgeGraphQLField, "PullRequestFields"]
    ) -> "PullRequestEdgeFields":
        """Subfields should come from the PullRequestEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestEdgeFields":
        self._alias = alias
        return self


class PullRequestParametersFields(GraphQLField):
    allowed_merge_methods: "PullRequestParametersGraphQLField" = (
        PullRequestParametersGraphQLField("allowedMergeMethods")
    )
    automatic_copilot_code_review_enabled: "PullRequestParametersGraphQLField" = (
        PullRequestParametersGraphQLField("automaticCopilotCodeReviewEnabled")
    )
    dismiss_stale_reviews_on_push: "PullRequestParametersGraphQLField" = (
        PullRequestParametersGraphQLField("dismissStaleReviewsOnPush")
    )
    require_code_owner_review: "PullRequestParametersGraphQLField" = (
        PullRequestParametersGraphQLField("requireCodeOwnerReview")
    )
    require_last_push_approval: "PullRequestParametersGraphQLField" = (
        PullRequestParametersGraphQLField("requireLastPushApproval")
    )
    required_approving_review_count: "PullRequestParametersGraphQLField" = (
        PullRequestParametersGraphQLField("requiredApprovingReviewCount")
    )
    required_review_thread_resolution: "PullRequestParametersGraphQLField" = (
        PullRequestParametersGraphQLField("requiredReviewThreadResolution")
    )

    def fields(
        self, *subfields: PullRequestParametersGraphQLField
    ) -> "PullRequestParametersFields":
        """Subfields should come from the PullRequestParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestParametersFields":
        self._alias = alias
        return self


class PullRequestReviewFields(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "authorAssociation"
    )
    author_can_push_to_repository: "PullRequestReviewGraphQLField" = (
        PullRequestReviewGraphQLField("authorCanPushToRepository")
    )
    body: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField("body")
    body_html: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "bodyHTML"
    )
    body_text: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "bodyText"
    )

    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PullRequestReviewCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestReviewCommentConnectionFields(
            "comments", arguments=cleared_arguments
        )

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    created_at: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "createdAt"
    )
    created_via_email: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "createdViaEmail"
    )
    database_id: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "databaseId"
    )

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    full_database_id: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "fullDatabaseId"
    )
    id: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField("id")
    includes_created_edit: "PullRequestReviewGraphQLField" = (
        PullRequestReviewGraphQLField("includesCreatedEdit")
    )
    is_minimized: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "isMinimized"
    )
    last_edited_at: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "lastEditedAt"
    )
    minimized_reason: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "minimizedReason"
    )

    @classmethod
    def on_behalf_of(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "TeamConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamConnectionFields("on_behalf_of", arguments=cleared_arguments)

    published_at: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "publishedAt"
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "resourcePath"
    )
    state: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField("state")
    submitted_at: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "submittedAt"
    )
    updated_at: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "updatedAt"
    )
    url: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_delete: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "viewerCanDelete"
    )
    viewer_can_minimize: "PullRequestReviewGraphQLField" = (
        PullRequestReviewGraphQLField("viewerCanMinimize")
    )
    viewer_can_react: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "viewerCanReact"
    )
    viewer_can_update: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "viewerCanUpdate"
    )
    viewer_cannot_update_reasons: "PullRequestReviewGraphQLField" = (
        PullRequestReviewGraphQLField("viewerCannotUpdateReasons")
    )
    viewer_did_author: "PullRequestReviewGraphQLField" = PullRequestReviewGraphQLField(
        "viewerDidAuthor"
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewGraphQLField,
            "ActorInterface",
            "CommitFields",
            "PullRequestFields",
            "PullRequestReviewCommentConnectionFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "RepositoryFields",
            "TeamConnectionFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "PullRequestReviewFields":
        """Subfields should come from the PullRequestReviewFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewFields":
        self._alias = alias
        return self


class PullRequestReviewCommentFields(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("authorAssociation")
    )
    body: "PullRequestReviewCommentGraphQLField" = PullRequestReviewCommentGraphQLField(
        "body"
    )
    body_html: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("bodyHTML")
    )
    body_text: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("bodyText")
    )

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    created_at: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("createdAt")
    )
    created_via_email: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("createdViaEmail")
    )
    database_id: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("databaseId")
    )
    diff_hunk: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("diffHunk")
    )
    drafted_at: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("draftedAt")
    )

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    full_database_id: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("fullDatabaseId")
    )
    id: "PullRequestReviewCommentGraphQLField" = PullRequestReviewCommentGraphQLField(
        "id"
    )
    includes_created_edit: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("includesCreatedEdit")
    )
    is_minimized: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("isMinimized")
    )
    last_edited_at: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("lastEditedAt")
    )
    line: "PullRequestReviewCommentGraphQLField" = PullRequestReviewCommentGraphQLField(
        "line"
    )
    minimized_reason: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("minimizedReason")
    )

    @classmethod
    def original_commit(cls) -> "CommitFields":
        return CommitFields("original_commit")

    original_line: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("originalLine")
    )
    original_position: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("originalPosition")
    )
    original_start_line: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("originalStartLine")
    )
    outdated: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("outdated")
    )
    path: "PullRequestReviewCommentGraphQLField" = PullRequestReviewCommentGraphQLField(
        "path"
    )
    position: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("position")
    )
    published_at: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("publishedAt")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def pull_request_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("pull_request_review")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def reply_to(cls) -> "PullRequestReviewCommentFields":
        return PullRequestReviewCommentFields("reply_to")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("resourcePath")
    )
    start_line: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("startLine")
    )
    state: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("state")
    )
    subject_type: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("subjectType")
    )
    updated_at: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("updatedAt")
    )
    url: "PullRequestReviewCommentGraphQLField" = PullRequestReviewCommentGraphQLField(
        "url"
    )

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_delete: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("viewerCanDelete")
    )
    viewer_can_minimize: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("viewerCanMinimize")
    )
    viewer_can_react: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("viewerCanReact")
    )
    viewer_can_update: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("viewerCanUpdate")
    )
    viewer_cannot_update_reasons: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("viewerCannotUpdateReasons")
    )
    viewer_did_author: "PullRequestReviewCommentGraphQLField" = (
        PullRequestReviewCommentGraphQLField("viewerDidAuthor")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewCommentGraphQLField,
            "ActorInterface",
            "CommitFields",
            "PullRequestFields",
            "PullRequestReviewCommentFields",
            "PullRequestReviewFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "RepositoryFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "PullRequestReviewCommentFields":
        """Subfields should come from the PullRequestReviewCommentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewCommentFields":
        self._alias = alias
        return self


class PullRequestReviewCommentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PullRequestReviewCommentEdgeFields":
        return PullRequestReviewCommentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PullRequestReviewCommentFields":
        return PullRequestReviewCommentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PullRequestReviewCommentConnectionGraphQLField" = (
        PullRequestReviewCommentConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewCommentConnectionGraphQLField,
            "PageInfoFields",
            "PullRequestReviewCommentEdgeFields",
            "PullRequestReviewCommentFields",
        ]
    ) -> "PullRequestReviewCommentConnectionFields":
        """Subfields should come from the PullRequestReviewCommentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewCommentConnectionFields":
        self._alias = alias
        return self


class PullRequestReviewCommentEdgeFields(GraphQLField):
    cursor: "PullRequestReviewCommentEdgeGraphQLField" = (
        PullRequestReviewCommentEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "PullRequestReviewCommentFields":
        return PullRequestReviewCommentFields("node")

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewCommentEdgeGraphQLField, "PullRequestReviewCommentFields"
        ]
    ) -> "PullRequestReviewCommentEdgeFields":
        """Subfields should come from the PullRequestReviewCommentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewCommentEdgeFields":
        self._alias = alias
        return self


class PullRequestReviewConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PullRequestReviewEdgeFields":
        return PullRequestReviewEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PullRequestReviewConnectionGraphQLField" = (
        PullRequestReviewConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewConnectionGraphQLField,
            "PageInfoFields",
            "PullRequestReviewEdgeFields",
            "PullRequestReviewFields",
        ]
    ) -> "PullRequestReviewConnectionFields":
        """Subfields should come from the PullRequestReviewConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewConnectionFields":
        self._alias = alias
        return self


class PullRequestReviewContributionsByRepositoryFields(GraphQLField):
    @classmethod
    def contributions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ContributionOrder] = None
    ) -> "CreatedPullRequestReviewContributionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ContributionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreatedPullRequestReviewContributionConnectionFields(
            "contributions", arguments=cleared_arguments
        )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewContributionsByRepositoryGraphQLField,
            "CreatedPullRequestReviewContributionConnectionFields",
            "RepositoryFields",
        ]
    ) -> "PullRequestReviewContributionsByRepositoryFields":
        """Subfields should come from the PullRequestReviewContributionsByRepositoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewContributionsByRepositoryFields":
        self._alias = alias
        return self


class PullRequestReviewEdgeFields(GraphQLField):
    cursor: "PullRequestReviewEdgeGraphQLField" = PullRequestReviewEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("node")

    def fields(
        self,
        *subfields: Union[PullRequestReviewEdgeGraphQLField, "PullRequestReviewFields"]
    ) -> "PullRequestReviewEdgeFields":
        """Subfields should come from the PullRequestReviewEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewEdgeFields":
        self._alias = alias
        return self


class PullRequestReviewThreadFields(GraphQLField):
    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        skip: Optional[int] = None
    ) -> "PullRequestReviewCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "skip": {"type": "Int", "value": skip},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestReviewCommentConnectionFields(
            "comments", arguments=cleared_arguments
        )

    diff_side: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("diffSide")
    )
    id: "PullRequestReviewThreadGraphQLField" = PullRequestReviewThreadGraphQLField(
        "id"
    )
    is_collapsed: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("isCollapsed")
    )
    is_outdated: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("isOutdated")
    )
    is_resolved: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("isResolved")
    )
    line: "PullRequestReviewThreadGraphQLField" = PullRequestReviewThreadGraphQLField(
        "line"
    )
    original_line: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("originalLine")
    )
    original_start_line: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("originalStartLine")
    )
    path: "PullRequestReviewThreadGraphQLField" = PullRequestReviewThreadGraphQLField(
        "path"
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    @classmethod
    def resolved_by(cls) -> "UserFields":
        return UserFields("resolved_by")

    start_diff_side: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("startDiffSide")
    )
    start_line: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("startLine")
    )
    subject_type: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("subjectType")
    )
    viewer_can_reply: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("viewerCanReply")
    )
    viewer_can_resolve: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("viewerCanResolve")
    )
    viewer_can_unresolve: "PullRequestReviewThreadGraphQLField" = (
        PullRequestReviewThreadGraphQLField("viewerCanUnresolve")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewThreadGraphQLField,
            "PullRequestFields",
            "PullRequestReviewCommentConnectionFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "PullRequestReviewThreadFields":
        """Subfields should come from the PullRequestReviewThreadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewThreadFields":
        self._alias = alias
        return self


class PullRequestReviewThreadConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PullRequestReviewThreadEdgeFields":
        return PullRequestReviewThreadEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PullRequestReviewThreadFields":
        return PullRequestReviewThreadFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PullRequestReviewThreadConnectionGraphQLField" = (
        PullRequestReviewThreadConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewThreadConnectionGraphQLField,
            "PageInfoFields",
            "PullRequestReviewThreadEdgeFields",
            "PullRequestReviewThreadFields",
        ]
    ) -> "PullRequestReviewThreadConnectionFields":
        """Subfields should come from the PullRequestReviewThreadConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewThreadConnectionFields":
        self._alias = alias
        return self


class PullRequestReviewThreadEdgeFields(GraphQLField):
    cursor: "PullRequestReviewThreadEdgeGraphQLField" = (
        PullRequestReviewThreadEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "PullRequestReviewThreadFields":
        return PullRequestReviewThreadFields("node")

    def fields(
        self,
        *subfields: Union[
            PullRequestReviewThreadEdgeGraphQLField, "PullRequestReviewThreadFields"
        ]
    ) -> "PullRequestReviewThreadEdgeFields":
        """Subfields should come from the PullRequestReviewThreadEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestReviewThreadEdgeFields":
        self._alias = alias
        return self


class PullRequestRevisionMarkerFields(GraphQLField):
    created_at: "PullRequestRevisionMarkerGraphQLField" = (
        PullRequestRevisionMarkerGraphQLField("createdAt")
    )

    @classmethod
    def last_seen_commit(cls) -> "CommitFields":
        return CommitFields("last_seen_commit")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            PullRequestRevisionMarkerGraphQLField, "CommitFields", "PullRequestFields"
        ]
    ) -> "PullRequestRevisionMarkerFields":
        """Subfields should come from the PullRequestRevisionMarkerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestRevisionMarkerFields":
        self._alias = alias
        return self


class PullRequestTemplateFields(GraphQLField):
    body: "PullRequestTemplateGraphQLField" = PullRequestTemplateGraphQLField("body")
    filename: "PullRequestTemplateGraphQLField" = PullRequestTemplateGraphQLField(
        "filename"
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[PullRequestTemplateGraphQLField, "RepositoryFields"]
    ) -> "PullRequestTemplateFields":
        """Subfields should come from the PullRequestTemplateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestTemplateFields":
        self._alias = alias
        return self


class PullRequestTimelineConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PullRequestTimelineItemEdgeFields":
        return PullRequestTimelineItemEdgeFields("edges")

    nodes: "PullRequestTimelineItemUnion" = PullRequestTimelineItemUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PullRequestTimelineConnectionGraphQLField" = (
        PullRequestTimelineConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestTimelineConnectionGraphQLField,
            "PageInfoFields",
            "PullRequestTimelineItemEdgeFields",
            "PullRequestTimelineItemUnion",
        ]
    ) -> "PullRequestTimelineConnectionFields":
        """Subfields should come from the PullRequestTimelineConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestTimelineConnectionFields":
        self._alias = alias
        return self


class PullRequestTimelineItemEdgeFields(GraphQLField):
    cursor: "PullRequestTimelineItemEdgeGraphQLField" = (
        PullRequestTimelineItemEdgeGraphQLField("cursor")
    )
    node: "PullRequestTimelineItemUnion" = PullRequestTimelineItemUnion("node")

    def fields(
        self,
        *subfields: Union[
            PullRequestTimelineItemEdgeGraphQLField, "PullRequestTimelineItemUnion"
        ]
    ) -> "PullRequestTimelineItemEdgeFields":
        """Subfields should come from the PullRequestTimelineItemEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestTimelineItemEdgeFields":
        self._alias = alias
        return self


class PullRequestTimelineItemsConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PullRequestTimelineItemsEdgeFields":
        return PullRequestTimelineItemsEdgeFields("edges")

    filtered_count: "PullRequestTimelineItemsConnectionGraphQLField" = (
        PullRequestTimelineItemsConnectionGraphQLField("filteredCount")
    )
    nodes: "PullRequestTimelineItemsUnion" = PullRequestTimelineItemsUnion("nodes")
    page_count: "PullRequestTimelineItemsConnectionGraphQLField" = (
        PullRequestTimelineItemsConnectionGraphQLField("pageCount")
    )

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PullRequestTimelineItemsConnectionGraphQLField" = (
        PullRequestTimelineItemsConnectionGraphQLField("totalCount")
    )
    updated_at: "PullRequestTimelineItemsConnectionGraphQLField" = (
        PullRequestTimelineItemsConnectionGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            PullRequestTimelineItemsConnectionGraphQLField,
            "PageInfoFields",
            "PullRequestTimelineItemsEdgeFields",
            "PullRequestTimelineItemsUnion",
        ]
    ) -> "PullRequestTimelineItemsConnectionFields":
        """Subfields should come from the PullRequestTimelineItemsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestTimelineItemsConnectionFields":
        self._alias = alias
        return self


class PullRequestTimelineItemsEdgeFields(GraphQLField):
    cursor: "PullRequestTimelineItemsEdgeGraphQLField" = (
        PullRequestTimelineItemsEdgeGraphQLField("cursor")
    )
    node: "PullRequestTimelineItemsUnion" = PullRequestTimelineItemsUnion("node")

    def fields(
        self,
        *subfields: Union[
            PullRequestTimelineItemsEdgeGraphQLField, "PullRequestTimelineItemsUnion"
        ]
    ) -> "PullRequestTimelineItemsEdgeFields":
        """Subfields should come from the PullRequestTimelineItemsEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PullRequestTimelineItemsEdgeFields":
        self._alias = alias
        return self


class PushFields(GraphQLField):
    id: "PushGraphQLField" = PushGraphQLField("id")
    next_sha: "PushGraphQLField" = PushGraphQLField("nextSha")
    permalink: "PushGraphQLField" = PushGraphQLField("permalink")
    previous_sha: "PushGraphQLField" = PushGraphQLField("previousSha")

    @classmethod
    def pusher(cls) -> "ActorInterface":
        return ActorInterface("pusher")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[PushGraphQLField, "ActorInterface", "RepositoryFields"]
    ) -> "PushFields":
        """Subfields should come from the PushFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PushFields":
        self._alias = alias
        return self


class PushAllowanceFields(GraphQLField):
    actor: "PushAllowanceActorUnion" = PushAllowanceActorUnion("actor")

    @classmethod
    def branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("branch_protection_rule")

    id: "PushAllowanceGraphQLField" = PushAllowanceGraphQLField("id")

    def fields(
        self,
        *subfields: Union[
            PushAllowanceGraphQLField,
            "BranchProtectionRuleFields",
            "PushAllowanceActorUnion",
        ]
    ) -> "PushAllowanceFields":
        """Subfields should come from the PushAllowanceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PushAllowanceFields":
        self._alias = alias
        return self


class PushAllowanceConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "PushAllowanceEdgeFields":
        return PushAllowanceEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "PushAllowanceFields":
        return PushAllowanceFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PushAllowanceConnectionGraphQLField" = (
        PushAllowanceConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PushAllowanceConnectionGraphQLField,
            "PageInfoFields",
            "PushAllowanceEdgeFields",
            "PushAllowanceFields",
        ]
    ) -> "PushAllowanceConnectionFields":
        """Subfields should come from the PushAllowanceConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PushAllowanceConnectionFields":
        self._alias = alias
        return self


class PushAllowanceEdgeFields(GraphQLField):
    cursor: "PushAllowanceEdgeGraphQLField" = PushAllowanceEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "PushAllowanceFields":
        return PushAllowanceFields("node")

    def fields(
        self, *subfields: Union[PushAllowanceEdgeGraphQLField, "PushAllowanceFields"]
    ) -> "PushAllowanceEdgeFields":
        """Subfields should come from the PushAllowanceEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PushAllowanceEdgeFields":
        self._alias = alias
        return self


class QueryFields(GraphQLField):
    @classmethod
    def code_of_conduct(cls, key: str) -> "CodeOfConductFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "key": {"type": "String!", "value": key}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CodeOfConductFields("code_of_conduct", arguments=cleared_arguments)

    @classmethod
    def codes_of_conduct(cls) -> "CodeOfConductFields":
        return CodeOfConductFields("codes_of_conduct")

    @classmethod
    def enterprise(
        cls, slug: str, *, invitation_token: Optional[str] = None
    ) -> "EnterpriseFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "invitationToken": {"type": "String", "value": invitation_token},
            "slug": {"type": "String!", "value": slug},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseFields("enterprise", arguments=cleared_arguments)

    @classmethod
    def enterprise_administrator_invitation(
        cls, enterprise_slug: str, role: EnterpriseAdministratorRole, user_login: str
    ) -> "EnterpriseAdministratorInvitationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "enterpriseSlug": {"type": "String!", "value": enterprise_slug},
            "role": {"type": "EnterpriseAdministratorRole!", "value": role},
            "userLogin": {"type": "String!", "value": user_login},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseAdministratorInvitationFields(
            "enterprise_administrator_invitation", arguments=cleared_arguments
        )

    @classmethod
    def enterprise_administrator_invitation_by_token(
        cls, invitation_token: str
    ) -> "EnterpriseAdministratorInvitationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "invitationToken": {"type": "String!", "value": invitation_token}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseAdministratorInvitationFields(
            "enterprise_administrator_invitation_by_token", arguments=cleared_arguments
        )

    @classmethod
    def enterprise_member_invitation(
        cls, enterprise_slug: str, user_login: str
    ) -> "EnterpriseMemberInvitationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "enterpriseSlug": {"type": "String!", "value": enterprise_slug},
            "userLogin": {"type": "String!", "value": user_login},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseMemberInvitationFields(
            "enterprise_member_invitation", arguments=cleared_arguments
        )

    @classmethod
    def enterprise_member_invitation_by_token(
        cls, invitation_token: str
    ) -> "EnterpriseMemberInvitationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "invitationToken": {"type": "String!", "value": invitation_token}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseMemberInvitationFields(
            "enterprise_member_invitation_by_token", arguments=cleared_arguments
        )

    id: "QueryGraphQLField" = QueryGraphQLField("id")

    @classmethod
    def license(cls, key: str) -> "LicenseFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "key": {"type": "String!", "value": key}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LicenseFields("license", arguments=cleared_arguments)

    @classmethod
    def licenses(cls) -> "LicenseFields":
        return LicenseFields("licenses")

    @classmethod
    def marketplace_categories(
        cls,
        *,
        exclude_empty: Optional[bool] = None,
        exclude_subcategories: Optional[bool] = None,
        include_categories: Optional[str] = None
    ) -> "MarketplaceCategoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "excludeEmpty": {"type": "Boolean", "value": exclude_empty},
            "excludeSubcategories": {"type": "Boolean", "value": exclude_subcategories},
            "includeCategories": {"type": "String", "value": include_categories},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarketplaceCategoryFields(
            "marketplace_categories", arguments=cleared_arguments
        )

    @classmethod
    def marketplace_category(
        cls, slug: str, *, use_topic_aliases: Optional[bool] = None
    ) -> "MarketplaceCategoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "slug": {"type": "String!", "value": slug},
            "useTopicAliases": {"type": "Boolean", "value": use_topic_aliases},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarketplaceCategoryFields(
            "marketplace_category", arguments=cleared_arguments
        )

    @classmethod
    def marketplace_listing(cls, slug: str) -> "MarketplaceListingFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "slug": {"type": "String!", "value": slug}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarketplaceListingFields(
            "marketplace_listing", arguments=cleared_arguments
        )

    @classmethod
    def marketplace_listings(
        cls,
        *,
        admin_id: Optional[str] = None,
        after: Optional[str] = None,
        all_states: Optional[bool] = None,
        before: Optional[str] = None,
        category_slug: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        organization_id: Optional[str] = None,
        primary_category_only: Optional[bool] = None,
        slugs: Optional[str] = None,
        use_topic_aliases: Optional[bool] = None,
        viewer_can_admin: Optional[bool] = None,
        with_free_trials_only: Optional[bool] = None
    ) -> "MarketplaceListingConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "adminId": {"type": "ID", "value": admin_id},
            "after": {"type": "String", "value": after},
            "allStates": {"type": "Boolean", "value": all_states},
            "before": {"type": "String", "value": before},
            "categorySlug": {"type": "String", "value": category_slug},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "organizationId": {"type": "ID", "value": organization_id},
            "primaryCategoryOnly": {"type": "Boolean", "value": primary_category_only},
            "slugs": {"type": "String", "value": slugs},
            "useTopicAliases": {"type": "Boolean", "value": use_topic_aliases},
            "viewerCanAdmin": {"type": "Boolean", "value": viewer_can_admin},
            "withFreeTrialsOnly": {"type": "Boolean", "value": with_free_trials_only},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarketplaceListingConnectionFields(
            "marketplace_listings", arguments=cleared_arguments
        )

    @classmethod
    def meta(cls) -> "GitHubMetadataFields":
        return GitHubMetadataFields("meta")

    @classmethod
    def node(cls, id: str) -> "NodeInterface":
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "ID!", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NodeInterface("node", arguments=cleared_arguments)

    @classmethod
    def nodes(cls, ids: str) -> "NodeInterface":
        arguments: Dict[str, Dict[str, Any]] = {"ids": {"type": "ID!", "value": ids}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NodeInterface("nodes", arguments=cleared_arguments)

    @classmethod
    def organization(cls, login: str) -> "OrganizationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "login": {"type": "String!", "value": login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationFields("organization", arguments=cleared_arguments)

    @classmethod
    def rate_limit(cls, *, dry_run: Optional[bool] = None) -> "RateLimitFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "dryRun": {"type": "Boolean", "value": dry_run}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RateLimitFields("rate_limit", arguments=cleared_arguments)

    @classmethod
    def relay(cls) -> "QueryFields":
        return QueryFields("relay")

    @classmethod
    def repository(
        cls, name: str, owner: str, *, follow_renames: Optional[bool] = None
    ) -> "RepositoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "followRenames": {"type": "Boolean", "value": follow_renames},
            "name": {"type": "String!", "value": name},
            "owner": {"type": "String!", "value": owner},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryFields("repository", arguments=cleared_arguments)

    @classmethod
    def repository_owner(cls, login: str) -> "RepositoryOwnerInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "login": {"type": "String!", "value": login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryOwnerInterface("repository_owner", arguments=cleared_arguments)

    @classmethod
    def resource(cls, url: Any) -> "UniformResourceLocatableInterface":
        arguments: Dict[str, Dict[str, Any]] = {"url": {"type": "URI!", "value": url}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UniformResourceLocatableInterface(
            "resource", arguments=cleared_arguments
        )

    @classmethod
    def search(
        cls,
        query: str,
        type: SearchType,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "SearchResultItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "query": {"type": "String!", "value": query},
            "type": {"type": "SearchType!", "value": type},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SearchResultItemConnectionFields("search", arguments=cleared_arguments)

    @classmethod
    def security_advisories(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        classifications: Optional[SecurityAdvisoryClassification] = None,
        epss_percentage: Optional[float] = None,
        epss_percentile: Optional[float] = None,
        first: Optional[int] = None,
        identifier: Optional[SecurityAdvisoryIdentifierFilter] = None,
        last: Optional[int] = None,
        order_by: Optional[SecurityAdvisoryOrder] = None,
        published_since: Optional[Any] = None,
        updated_since: Optional[Any] = None
    ) -> "SecurityAdvisoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "classifications": {
                "type": "SecurityAdvisoryClassification",
                "value": classifications,
            },
            "epssPercentage": {"type": "Float", "value": epss_percentage},
            "epssPercentile": {"type": "Float", "value": epss_percentile},
            "first": {"type": "Int", "value": first},
            "identifier": {
                "type": "SecurityAdvisoryIdentifierFilter",
                "value": identifier,
            },
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SecurityAdvisoryOrder", "value": order_by},
            "publishedSince": {"type": "DateTime", "value": published_since},
            "updatedSince": {"type": "DateTime", "value": updated_since},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SecurityAdvisoryConnectionFields(
            "security_advisories", arguments=cleared_arguments
        )

    @classmethod
    def security_advisory(cls, ghsa_id: str) -> "SecurityAdvisoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "ghsaId": {"type": "String!", "value": ghsa_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SecurityAdvisoryFields("security_advisory", arguments=cleared_arguments)

    @classmethod
    def security_vulnerabilities(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        classifications: Optional[SecurityAdvisoryClassification] = None,
        ecosystem: Optional[SecurityAdvisoryEcosystem] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SecurityVulnerabilityOrder] = None,
        package: Optional[str] = None,
        severities: Optional[SecurityAdvisorySeverity] = None
    ) -> "SecurityVulnerabilityConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "classifications": {
                "type": "SecurityAdvisoryClassification",
                "value": classifications,
            },
            "ecosystem": {"type": "SecurityAdvisoryEcosystem", "value": ecosystem},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SecurityVulnerabilityOrder", "value": order_by},
            "package": {"type": "String", "value": package},
            "severities": {"type": "SecurityAdvisorySeverity", "value": severities},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SecurityVulnerabilityConnectionFields(
            "security_vulnerabilities", arguments=cleared_arguments
        )

    @classmethod
    def sponsorables(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        dependency_ecosystem: Optional[SecurityAdvisoryEcosystem] = None,
        ecosystem: Optional[DependencyGraphEcosystem] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        only_dependencies: Optional[bool] = None,
        order_by: Optional[SponsorableOrder] = None,
        org_login_for_dependencies: Optional[str] = None
    ) -> "SponsorableItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "dependencyEcosystem": {
                "type": "SecurityAdvisoryEcosystem",
                "value": dependency_ecosystem,
            },
            "ecosystem": {"type": "DependencyGraphEcosystem", "value": ecosystem},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "onlyDependencies": {"type": "Boolean", "value": only_dependencies},
            "orderBy": {"type": "SponsorableOrder", "value": order_by},
            "orgLoginForDependencies": {
                "type": "String",
                "value": org_login_for_dependencies,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorableItemConnectionFields(
            "sponsorables", arguments=cleared_arguments
        )

    @classmethod
    def topic(cls, name: str) -> "TopicFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TopicFields("topic", arguments=cleared_arguments)

    @classmethod
    def user(cls, login: str) -> "UserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "login": {"type": "String!", "value": login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields("user", arguments=cleared_arguments)

    @classmethod
    def viewer(cls) -> "UserFields":
        return UserFields("viewer")

    def fields(
        self,
        *subfields: Union[
            QueryGraphQLField,
            "CodeOfConductFields",
            "EnterpriseAdministratorInvitationFields",
            "EnterpriseFields",
            "EnterpriseMemberInvitationFields",
            "GitHubMetadataFields",
            "LicenseFields",
            "MarketplaceCategoryFields",
            "MarketplaceListingConnectionFields",
            "MarketplaceListingFields",
            "NodeInterface",
            "OrganizationFields",
            "QueryFields",
            "RateLimitFields",
            "RepositoryFields",
            "RepositoryOwnerInterface",
            "SearchResultItemConnectionFields",
            "SecurityAdvisoryConnectionFields",
            "SecurityAdvisoryFields",
            "SecurityVulnerabilityConnectionFields",
            "SponsorableItemConnectionFields",
            "TopicFields",
            "UniformResourceLocatableInterface",
            "UserFields",
        ]
    ) -> "QueryFields":
        """Subfields should come from the QueryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "QueryFields":
        self._alias = alias
        return self


class RateLimitFields(GraphQLField):
    cost: "RateLimitGraphQLField" = RateLimitGraphQLField("cost")
    limit: "RateLimitGraphQLField" = RateLimitGraphQLField("limit")
    node_count: "RateLimitGraphQLField" = RateLimitGraphQLField("nodeCount")
    remaining: "RateLimitGraphQLField" = RateLimitGraphQLField("remaining")
    reset_at: "RateLimitGraphQLField" = RateLimitGraphQLField("resetAt")
    used: "RateLimitGraphQLField" = RateLimitGraphQLField("used")

    def fields(self, *subfields: RateLimitGraphQLField) -> "RateLimitFields":
        """Subfields should come from the RateLimitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RateLimitFields":
        self._alias = alias
        return self


class ReactableInterface(GraphQLField):
    database_id: "ReactableGraphQLField" = ReactableGraphQLField("databaseId")
    id: "ReactableGraphQLField" = ReactableGraphQLField("id")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    viewer_can_react: "ReactableGraphQLField" = ReactableGraphQLField("viewerCanReact")

    def fields(
        self,
        *subfields: Union[
            ReactableGraphQLField, "ReactionConnectionFields", "ReactionGroupFields"
        ]
    ) -> "ReactableInterface":
        """Subfields should come from the ReactableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ReactableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ReactingUserConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ReactingUserEdgeFields":
        return ReactingUserEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ReactingUserConnectionGraphQLField" = (
        ReactingUserConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ReactingUserConnectionGraphQLField,
            "PageInfoFields",
            "ReactingUserEdgeFields",
            "UserFields",
        ]
    ) -> "ReactingUserConnectionFields":
        """Subfields should come from the ReactingUserConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactingUserConnectionFields":
        self._alias = alias
        return self


class ReactingUserEdgeFields(GraphQLField):
    cursor: "ReactingUserEdgeGraphQLField" = ReactingUserEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    reacted_at: "ReactingUserEdgeGraphQLField" = ReactingUserEdgeGraphQLField(
        "reactedAt"
    )

    def fields(
        self, *subfields: Union[ReactingUserEdgeGraphQLField, "UserFields"]
    ) -> "ReactingUserEdgeFields":
        """Subfields should come from the ReactingUserEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactingUserEdgeFields":
        self._alias = alias
        return self


class ReactionFields(GraphQLField):
    content: "ReactionGraphQLField" = ReactionGraphQLField("content")
    created_at: "ReactionGraphQLField" = ReactionGraphQLField("createdAt")
    database_id: "ReactionGraphQLField" = ReactionGraphQLField("databaseId")
    id: "ReactionGraphQLField" = ReactionGraphQLField("id")

    @classmethod
    def reactable(cls) -> "ReactableInterface":
        return ReactableInterface("reactable")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[ReactionGraphQLField, "ReactableInterface", "UserFields"]
    ) -> "ReactionFields":
        """Subfields should come from the ReactionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactionFields":
        self._alias = alias
        return self


class ReactionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ReactionEdgeFields":
        return ReactionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ReactionFields":
        return ReactionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ReactionConnectionGraphQLField" = ReactionConnectionGraphQLField(
        "totalCount"
    )
    viewer_has_reacted: "ReactionConnectionGraphQLField" = (
        ReactionConnectionGraphQLField("viewerHasReacted")
    )

    def fields(
        self,
        *subfields: Union[
            ReactionConnectionGraphQLField,
            "PageInfoFields",
            "ReactionEdgeFields",
            "ReactionFields",
        ]
    ) -> "ReactionConnectionFields":
        """Subfields should come from the ReactionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactionConnectionFields":
        self._alias = alias
        return self


class ReactionEdgeFields(GraphQLField):
    cursor: "ReactionEdgeGraphQLField" = ReactionEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ReactionFields":
        return ReactionFields("node")

    def fields(
        self, *subfields: Union[ReactionEdgeGraphQLField, "ReactionFields"]
    ) -> "ReactionEdgeFields":
        """Subfields should come from the ReactionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactionEdgeFields":
        self._alias = alias
        return self


class ReactionGroupFields(GraphQLField):
    content: "ReactionGroupGraphQLField" = ReactionGroupGraphQLField("content")
    created_at: "ReactionGroupGraphQLField" = ReactionGroupGraphQLField("createdAt")

    @classmethod
    def reactors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ReactorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactorConnectionFields("reactors", arguments=cleared_arguments)

    @classmethod
    def subject(cls) -> "ReactableInterface":
        return ReactableInterface("subject")

    @classmethod
    def users(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ReactingUserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactingUserConnectionFields("users", arguments=cleared_arguments)

    viewer_has_reacted: "ReactionGroupGraphQLField" = ReactionGroupGraphQLField(
        "viewerHasReacted"
    )

    def fields(
        self,
        *subfields: Union[
            ReactionGroupGraphQLField,
            "ReactableInterface",
            "ReactingUserConnectionFields",
            "ReactorConnectionFields",
        ]
    ) -> "ReactionGroupFields":
        """Subfields should come from the ReactionGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactionGroupFields":
        self._alias = alias
        return self


class ReactorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ReactorEdgeFields":
        return ReactorEdgeFields("edges")

    nodes: "ReactorUnion" = ReactorUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ReactorConnectionGraphQLField" = ReactorConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ReactorConnectionGraphQLField,
            "PageInfoFields",
            "ReactorEdgeFields",
            "ReactorUnion",
        ]
    ) -> "ReactorConnectionFields":
        """Subfields should come from the ReactorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactorConnectionFields":
        self._alias = alias
        return self


class ReactorEdgeFields(GraphQLField):
    cursor: "ReactorEdgeGraphQLField" = ReactorEdgeGraphQLField("cursor")
    node: "ReactorUnion" = ReactorUnion("node")
    reacted_at: "ReactorEdgeGraphQLField" = ReactorEdgeGraphQLField("reactedAt")

    def fields(
        self, *subfields: Union[ReactorEdgeGraphQLField, "ReactorUnion"]
    ) -> "ReactorEdgeFields":
        """Subfields should come from the ReactorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReactorEdgeFields":
        self._alias = alias
        return self


class ReadyForReviewEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ReadyForReviewEventGraphQLField" = ReadyForReviewEventGraphQLField(
        "createdAt"
    )
    id: "ReadyForReviewEventGraphQLField" = ReadyForReviewEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    resource_path: "ReadyForReviewEventGraphQLField" = ReadyForReviewEventGraphQLField(
        "resourcePath"
    )
    url: "ReadyForReviewEventGraphQLField" = ReadyForReviewEventGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            ReadyForReviewEventGraphQLField, "ActorInterface", "PullRequestFields"
        ]
    ) -> "ReadyForReviewEventFields":
        """Subfields should come from the ReadyForReviewEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReadyForReviewEventFields":
        self._alias = alias
        return self


class RefFields(GraphQLField):
    @classmethod
    def associated_pull_requests(
        cls,
        *,
        after: Optional[str] = None,
        base_ref_name: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        head_ref_name: Optional[str] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[PullRequestState] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "baseRefName": {"type": "String", "value": base_ref_name},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "headRefName": {"type": "String", "value": head_ref_name},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "PullRequestState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields(
            "associated_pull_requests", arguments=cleared_arguments
        )

    @classmethod
    def branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("branch_protection_rule")

    @classmethod
    def compare(cls, head_ref: str) -> "ComparisonFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "headRef": {"type": "String!", "value": head_ref}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ComparisonFields("compare", arguments=cleared_arguments)

    id: "RefGraphQLField" = RefGraphQLField("id")
    name: "RefGraphQLField" = RefGraphQLField("name")
    prefix: "RefGraphQLField" = RefGraphQLField("prefix")

    @classmethod
    def ref_update_rule(cls) -> "RefUpdateRuleFields":
        return RefUpdateRuleFields("ref_update_rule")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    @classmethod
    def rules(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryRuleOrder] = None
    ) -> "RepositoryRuleConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryRuleOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRuleConnectionFields("rules", arguments=cleared_arguments)

    @classmethod
    def target(cls) -> "GitObjectInterface":
        return GitObjectInterface("target")

    def fields(
        self,
        *subfields: Union[
            RefGraphQLField,
            "BranchProtectionRuleFields",
            "ComparisonFields",
            "GitObjectInterface",
            "PullRequestConnectionFields",
            "RefUpdateRuleFields",
            "RepositoryFields",
            "RepositoryRuleConnectionFields",
        ]
    ) -> "RefFields":
        """Subfields should come from the RefFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RefFields":
        self._alias = alias
        return self


class RefConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RefEdgeFields":
        return RefEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RefFields":
        return RefFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RefConnectionGraphQLField" = RefConnectionGraphQLField("totalCount")

    def fields(
        self,
        *subfields: Union[
            RefConnectionGraphQLField, "PageInfoFields", "RefEdgeFields", "RefFields"
        ]
    ) -> "RefConnectionFields":
        """Subfields should come from the RefConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RefConnectionFields":
        self._alias = alias
        return self


class RefEdgeFields(GraphQLField):
    cursor: "RefEdgeGraphQLField" = RefEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "RefFields":
        return RefFields("node")

    def fields(
        self, *subfields: Union[RefEdgeGraphQLField, "RefFields"]
    ) -> "RefEdgeFields":
        """Subfields should come from the RefEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RefEdgeFields":
        self._alias = alias
        return self


class RefNameConditionTargetFields(GraphQLField):
    exclude: "RefNameConditionTargetGraphQLField" = RefNameConditionTargetGraphQLField(
        "exclude"
    )
    include: "RefNameConditionTargetGraphQLField" = RefNameConditionTargetGraphQLField(
        "include"
    )

    def fields(
        self, *subfields: RefNameConditionTargetGraphQLField
    ) -> "RefNameConditionTargetFields":
        """Subfields should come from the RefNameConditionTargetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RefNameConditionTargetFields":
        self._alias = alias
        return self


class RefUpdateRuleFields(GraphQLField):
    allows_deletions: "RefUpdateRuleGraphQLField" = RefUpdateRuleGraphQLField(
        "allowsDeletions"
    )
    allows_force_pushes: "RefUpdateRuleGraphQLField" = RefUpdateRuleGraphQLField(
        "allowsForcePushes"
    )
    blocks_creations: "RefUpdateRuleGraphQLField" = RefUpdateRuleGraphQLField(
        "blocksCreations"
    )
    pattern: "RefUpdateRuleGraphQLField" = RefUpdateRuleGraphQLField("pattern")
    required_approving_review_count: "RefUpdateRuleGraphQLField" = (
        RefUpdateRuleGraphQLField("requiredApprovingReviewCount")
    )
    required_status_check_contexts: "RefUpdateRuleGraphQLField" = (
        RefUpdateRuleGraphQLField("requiredStatusCheckContexts")
    )
    requires_code_owner_reviews: "RefUpdateRuleGraphQLField" = (
        RefUpdateRuleGraphQLField("requiresCodeOwnerReviews")
    )
    requires_conversation_resolution: "RefUpdateRuleGraphQLField" = (
        RefUpdateRuleGraphQLField("requiresConversationResolution")
    )
    requires_linear_history: "RefUpdateRuleGraphQLField" = RefUpdateRuleGraphQLField(
        "requiresLinearHistory"
    )
    requires_signatures: "RefUpdateRuleGraphQLField" = RefUpdateRuleGraphQLField(
        "requiresSignatures"
    )
    viewer_allowed_to_dismiss_reviews: "RefUpdateRuleGraphQLField" = (
        RefUpdateRuleGraphQLField("viewerAllowedToDismissReviews")
    )
    viewer_can_push: "RefUpdateRuleGraphQLField" = RefUpdateRuleGraphQLField(
        "viewerCanPush"
    )

    def fields(self, *subfields: RefUpdateRuleGraphQLField) -> "RefUpdateRuleFields":
        """Subfields should come from the RefUpdateRuleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RefUpdateRuleFields":
        self._alias = alias
        return self


class ReferencedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    @classmethod
    def commit_repository(cls) -> "RepositoryFields":
        return RepositoryFields("commit_repository")

    created_at: "ReferencedEventGraphQLField" = ReferencedEventGraphQLField("createdAt")
    id: "ReferencedEventGraphQLField" = ReferencedEventGraphQLField("id")
    is_cross_repository: "ReferencedEventGraphQLField" = ReferencedEventGraphQLField(
        "isCrossRepository"
    )
    is_direct_reference: "ReferencedEventGraphQLField" = ReferencedEventGraphQLField(
        "isDirectReference"
    )
    subject: "ReferencedSubjectUnion" = ReferencedSubjectUnion("subject")

    def fields(
        self,
        *subfields: Union[
            ReferencedEventGraphQLField,
            "ActorInterface",
            "CommitFields",
            "ReferencedSubjectUnion",
            "RepositoryFields",
        ]
    ) -> "ReferencedEventFields":
        """Subfields should come from the ReferencedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReferencedEventFields":
        self._alias = alias
        return self


class RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields(GraphQLField):
    client_mutation_id: (
        "RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadGraphQLField"
    ) = RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def identity_provider(cls) -> "EnterpriseIdentityProviderFields":
        return EnterpriseIdentityProviderFields("identity_provider")

    def fields(
        self,
        *subfields: Union[
            RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadGraphQLField,
            "EnterpriseIdentityProviderFields",
        ]
    ) -> "RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields":
        """Subfields should come from the RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields":
        self._alias = alias
        return self


class RegenerateVerifiableDomainTokenPayloadFields(GraphQLField):
    client_mutation_id: "RegenerateVerifiableDomainTokenPayloadGraphQLField" = (
        RegenerateVerifiableDomainTokenPayloadGraphQLField("clientMutationId")
    )
    verification_token: "RegenerateVerifiableDomainTokenPayloadGraphQLField" = (
        RegenerateVerifiableDomainTokenPayloadGraphQLField("verificationToken")
    )

    def fields(
        self, *subfields: RegenerateVerifiableDomainTokenPayloadGraphQLField
    ) -> "RegenerateVerifiableDomainTokenPayloadFields":
        """Subfields should come from the RegenerateVerifiableDomainTokenPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RegenerateVerifiableDomainTokenPayloadFields":
        self._alias = alias
        return self


class RejectDeploymentsPayloadFields(GraphQLField):
    client_mutation_id: "RejectDeploymentsPayloadGraphQLField" = (
        RejectDeploymentsPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def deployments(cls) -> "DeploymentFields":
        return DeploymentFields("deployments")

    def fields(
        self,
        *subfields: Union[RejectDeploymentsPayloadGraphQLField, "DeploymentFields"]
    ) -> "RejectDeploymentsPayloadFields":
        """Subfields should come from the RejectDeploymentsPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RejectDeploymentsPayloadFields":
        self._alias = alias
        return self


class ReleaseFields(GraphQLField):
    @classmethod
    def author(cls) -> "UserFields":
        return UserFields("author")

    created_at: "ReleaseGraphQLField" = ReleaseGraphQLField("createdAt")
    database_id: "ReleaseGraphQLField" = ReleaseGraphQLField("databaseId")
    description: "ReleaseGraphQLField" = ReleaseGraphQLField("description")
    description_html: "ReleaseGraphQLField" = ReleaseGraphQLField("descriptionHTML")
    id: "ReleaseGraphQLField" = ReleaseGraphQLField("id")
    is_draft: "ReleaseGraphQLField" = ReleaseGraphQLField("isDraft")
    is_latest: "ReleaseGraphQLField" = ReleaseGraphQLField("isLatest")
    is_prerelease: "ReleaseGraphQLField" = ReleaseGraphQLField("isPrerelease")

    @classmethod
    def mentions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("mentions", arguments=cleared_arguments)

    name: "ReleaseGraphQLField" = ReleaseGraphQLField("name")
    published_at: "ReleaseGraphQLField" = ReleaseGraphQLField("publishedAt")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    @classmethod
    def release_assets(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        name: Optional[str] = None
    ) -> "ReleaseAssetConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "name": {"type": "String", "value": name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReleaseAssetConnectionFields(
            "release_assets", arguments=cleared_arguments
        )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    resource_path: "ReleaseGraphQLField" = ReleaseGraphQLField("resourcePath")

    @classmethod
    def short_description_html(
        cls, *, limit: Optional[int] = None
    ) -> "ReleaseGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "limit": {"type": "Int", "value": limit}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReleaseGraphQLField(
            "short_description_html", arguments=cleared_arguments
        )

    @classmethod
    def tag(cls) -> "RefFields":
        return RefFields("tag")

    @classmethod
    def tag_commit(cls) -> "CommitFields":
        return CommitFields("tag_commit")

    tag_name: "ReleaseGraphQLField" = ReleaseGraphQLField("tagName")
    updated_at: "ReleaseGraphQLField" = ReleaseGraphQLField("updatedAt")
    url: "ReleaseGraphQLField" = ReleaseGraphQLField("url")
    viewer_can_react: "ReleaseGraphQLField" = ReleaseGraphQLField("viewerCanReact")

    def fields(
        self,
        *subfields: Union[
            ReleaseGraphQLField,
            "CommitFields",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "RefFields",
            "ReleaseAssetConnectionFields",
            "RepositoryFields",
            "UserConnectionFields",
            "UserFields",
        ]
    ) -> "ReleaseFields":
        """Subfields should come from the ReleaseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReleaseFields":
        self._alias = alias
        return self


class ReleaseAssetFields(GraphQLField):
    content_type: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("contentType")
    created_at: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("createdAt")
    digest: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("digest")
    download_count: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField(
        "downloadCount"
    )
    download_url: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("downloadUrl")
    id: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("id")
    name: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("name")

    @classmethod
    def release(cls) -> "ReleaseFields":
        return ReleaseFields("release")

    size: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("size")
    updated_at: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("updatedAt")

    @classmethod
    def uploaded_by(cls) -> "UserFields":
        return UserFields("uploaded_by")

    url: "ReleaseAssetGraphQLField" = ReleaseAssetGraphQLField("url")

    def fields(
        self, *subfields: Union[ReleaseAssetGraphQLField, "ReleaseFields", "UserFields"]
    ) -> "ReleaseAssetFields":
        """Subfields should come from the ReleaseAssetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReleaseAssetFields":
        self._alias = alias
        return self


class ReleaseAssetConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ReleaseAssetEdgeFields":
        return ReleaseAssetEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ReleaseAssetFields":
        return ReleaseAssetFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ReleaseAssetConnectionGraphQLField" = (
        ReleaseAssetConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ReleaseAssetConnectionGraphQLField,
            "PageInfoFields",
            "ReleaseAssetEdgeFields",
            "ReleaseAssetFields",
        ]
    ) -> "ReleaseAssetConnectionFields":
        """Subfields should come from the ReleaseAssetConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReleaseAssetConnectionFields":
        self._alias = alias
        return self


class ReleaseAssetEdgeFields(GraphQLField):
    cursor: "ReleaseAssetEdgeGraphQLField" = ReleaseAssetEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ReleaseAssetFields":
        return ReleaseAssetFields("node")

    def fields(
        self, *subfields: Union[ReleaseAssetEdgeGraphQLField, "ReleaseAssetFields"]
    ) -> "ReleaseAssetEdgeFields":
        """Subfields should come from the ReleaseAssetEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReleaseAssetEdgeFields":
        self._alias = alias
        return self


class ReleaseConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ReleaseEdgeFields":
        return ReleaseEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ReleaseFields":
        return ReleaseFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ReleaseConnectionGraphQLField" = ReleaseConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ReleaseConnectionGraphQLField,
            "PageInfoFields",
            "ReleaseEdgeFields",
            "ReleaseFields",
        ]
    ) -> "ReleaseConnectionFields":
        """Subfields should come from the ReleaseConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReleaseConnectionFields":
        self._alias = alias
        return self


class ReleaseEdgeFields(GraphQLField):
    cursor: "ReleaseEdgeGraphQLField" = ReleaseEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ReleaseFields":
        return ReleaseFields("node")

    def fields(
        self, *subfields: Union[ReleaseEdgeGraphQLField, "ReleaseFields"]
    ) -> "ReleaseEdgeFields":
        """Subfields should come from the ReleaseEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReleaseEdgeFields":
        self._alias = alias
        return self


class RemoveAssigneesFromAssignablePayloadFields(GraphQLField):
    @classmethod
    def assignable(cls) -> "AssignableInterface":
        return AssignableInterface("assignable")

    client_mutation_id: "RemoveAssigneesFromAssignablePayloadGraphQLField" = (
        RemoveAssigneesFromAssignablePayloadGraphQLField("clientMutationId")
    )

    def fields(
        self,
        *subfields: Union[
            RemoveAssigneesFromAssignablePayloadGraphQLField, "AssignableInterface"
        ]
    ) -> "RemoveAssigneesFromAssignablePayloadFields":
        """Subfields should come from the RemoveAssigneesFromAssignablePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveAssigneesFromAssignablePayloadFields":
        self._alias = alias
        return self


class RemoveEnterpriseAdminPayloadFields(GraphQLField):
    @classmethod
    def admin(cls) -> "UserFields":
        return UserFields("admin")

    client_mutation_id: "RemoveEnterpriseAdminPayloadGraphQLField" = (
        RemoveEnterpriseAdminPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "RemoveEnterpriseAdminPayloadGraphQLField" = (
        RemoveEnterpriseAdminPayloadGraphQLField("message")
    )

    @classmethod
    def viewer(cls) -> "UserFields":
        return UserFields("viewer")

    def fields(
        self,
        *subfields: Union[
            RemoveEnterpriseAdminPayloadGraphQLField, "EnterpriseFields", "UserFields"
        ]
    ) -> "RemoveEnterpriseAdminPayloadFields":
        """Subfields should come from the RemoveEnterpriseAdminPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveEnterpriseAdminPayloadFields":
        self._alias = alias
        return self


class RemoveEnterpriseIdentityProviderPayloadFields(GraphQLField):
    client_mutation_id: "RemoveEnterpriseIdentityProviderPayloadGraphQLField" = (
        RemoveEnterpriseIdentityProviderPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def identity_provider(cls) -> "EnterpriseIdentityProviderFields":
        return EnterpriseIdentityProviderFields("identity_provider")

    def fields(
        self,
        *subfields: Union[
            RemoveEnterpriseIdentityProviderPayloadGraphQLField,
            "EnterpriseIdentityProviderFields",
        ]
    ) -> "RemoveEnterpriseIdentityProviderPayloadFields":
        """Subfields should come from the RemoveEnterpriseIdentityProviderPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveEnterpriseIdentityProviderPayloadFields":
        self._alias = alias
        return self


class RemoveEnterpriseMemberPayloadFields(GraphQLField):
    client_mutation_id: "RemoveEnterpriseMemberPayloadGraphQLField" = (
        RemoveEnterpriseMemberPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    @classmethod
    def viewer(cls) -> "UserFields":
        return UserFields("viewer")

    def fields(
        self,
        *subfields: Union[
            RemoveEnterpriseMemberPayloadGraphQLField, "EnterpriseFields", "UserFields"
        ]
    ) -> "RemoveEnterpriseMemberPayloadFields":
        """Subfields should come from the RemoveEnterpriseMemberPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveEnterpriseMemberPayloadFields":
        self._alias = alias
        return self


class RemoveEnterpriseOrganizationPayloadFields(GraphQLField):
    client_mutation_id: "RemoveEnterpriseOrganizationPayloadGraphQLField" = (
        RemoveEnterpriseOrganizationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    @classmethod
    def viewer(cls) -> "UserFields":
        return UserFields("viewer")

    def fields(
        self,
        *subfields: Union[
            RemoveEnterpriseOrganizationPayloadGraphQLField,
            "EnterpriseFields",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "RemoveEnterpriseOrganizationPayloadFields":
        """Subfields should come from the RemoveEnterpriseOrganizationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveEnterpriseOrganizationPayloadFields":
        self._alias = alias
        return self


class RemoveEnterpriseSupportEntitlementPayloadFields(GraphQLField):
    client_mutation_id: "RemoveEnterpriseSupportEntitlementPayloadGraphQLField" = (
        RemoveEnterpriseSupportEntitlementPayloadGraphQLField("clientMutationId")
    )
    message: "RemoveEnterpriseSupportEntitlementPayloadGraphQLField" = (
        RemoveEnterpriseSupportEntitlementPayloadGraphQLField("message")
    )

    def fields(
        self, *subfields: RemoveEnterpriseSupportEntitlementPayloadGraphQLField
    ) -> "RemoveEnterpriseSupportEntitlementPayloadFields":
        """Subfields should come from the RemoveEnterpriseSupportEntitlementPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveEnterpriseSupportEntitlementPayloadFields":
        self._alias = alias
        return self


class RemoveLabelsFromLabelablePayloadFields(GraphQLField):
    client_mutation_id: "RemoveLabelsFromLabelablePayloadGraphQLField" = (
        RemoveLabelsFromLabelablePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def labelable(cls) -> "LabelableInterface":
        return LabelableInterface("labelable")

    def fields(
        self,
        *subfields: Union[
            RemoveLabelsFromLabelablePayloadGraphQLField, "LabelableInterface"
        ]
    ) -> "RemoveLabelsFromLabelablePayloadFields":
        """Subfields should come from the RemoveLabelsFromLabelablePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveLabelsFromLabelablePayloadFields":
        self._alias = alias
        return self


class RemoveOutsideCollaboratorPayloadFields(GraphQLField):
    client_mutation_id: "RemoveOutsideCollaboratorPayloadGraphQLField" = (
        RemoveOutsideCollaboratorPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def removed_user(cls) -> "UserFields":
        return UserFields("removed_user")

    def fields(
        self,
        *subfields: Union[RemoveOutsideCollaboratorPayloadGraphQLField, "UserFields"]
    ) -> "RemoveOutsideCollaboratorPayloadFields":
        """Subfields should come from the RemoveOutsideCollaboratorPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveOutsideCollaboratorPayloadFields":
        self._alias = alias
        return self


class RemoveReactionPayloadFields(GraphQLField):
    client_mutation_id: "RemoveReactionPayloadGraphQLField" = (
        RemoveReactionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def reaction(cls) -> "ReactionFields":
        return ReactionFields("reaction")

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def subject(cls) -> "ReactableInterface":
        return ReactableInterface("subject")

    def fields(
        self,
        *subfields: Union[
            RemoveReactionPayloadGraphQLField,
            "ReactableInterface",
            "ReactionFields",
            "ReactionGroupFields",
        ]
    ) -> "RemoveReactionPayloadFields":
        """Subfields should come from the RemoveReactionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveReactionPayloadFields":
        self._alias = alias
        return self


class RemoveStarPayloadFields(GraphQLField):
    client_mutation_id: "RemoveStarPayloadGraphQLField" = RemoveStarPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def starrable(cls) -> "StarrableInterface":
        return StarrableInterface("starrable")

    def fields(
        self, *subfields: Union[RemoveStarPayloadGraphQLField, "StarrableInterface"]
    ) -> "RemoveStarPayloadFields":
        """Subfields should come from the RemoveStarPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveStarPayloadFields":
        self._alias = alias
        return self


class RemoveSubIssuePayloadFields(GraphQLField):
    client_mutation_id: "RemoveSubIssuePayloadGraphQLField" = (
        RemoveSubIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    @classmethod
    def sub_issue(cls) -> "IssueFields":
        return IssueFields("sub_issue")

    def fields(
        self, *subfields: Union[RemoveSubIssuePayloadGraphQLField, "IssueFields"]
    ) -> "RemoveSubIssuePayloadFields":
        """Subfields should come from the RemoveSubIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveSubIssuePayloadFields":
        self._alias = alias
        return self


class RemoveUpvotePayloadFields(GraphQLField):
    client_mutation_id: "RemoveUpvotePayloadGraphQLField" = (
        RemoveUpvotePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def subject(cls) -> "VotableInterface":
        return VotableInterface("subject")

    def fields(
        self, *subfields: Union[RemoveUpvotePayloadGraphQLField, "VotableInterface"]
    ) -> "RemoveUpvotePayloadFields":
        """Subfields should come from the RemoveUpvotePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveUpvotePayloadFields":
        self._alias = alias
        return self


class RemovedFromMergeQueueEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def before_commit(cls) -> "CommitFields":
        return CommitFields("before_commit")

    created_at: "RemovedFromMergeQueueEventGraphQLField" = (
        RemovedFromMergeQueueEventGraphQLField("createdAt")
    )

    @classmethod
    def enqueuer(cls) -> "UserFields":
        return UserFields("enqueuer")

    id: "RemovedFromMergeQueueEventGraphQLField" = (
        RemovedFromMergeQueueEventGraphQLField("id")
    )

    @classmethod
    def merge_queue(cls) -> "MergeQueueFields":
        return MergeQueueFields("merge_queue")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    reason: "RemovedFromMergeQueueEventGraphQLField" = (
        RemovedFromMergeQueueEventGraphQLField("reason")
    )

    def fields(
        self,
        *subfields: Union[
            RemovedFromMergeQueueEventGraphQLField,
            "ActorInterface",
            "CommitFields",
            "MergeQueueFields",
            "PullRequestFields",
            "UserFields",
        ]
    ) -> "RemovedFromMergeQueueEventFields":
        """Subfields should come from the RemovedFromMergeQueueEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemovedFromMergeQueueEventFields":
        self._alias = alias
        return self


class RemovedFromProjectEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "RemovedFromProjectEventGraphQLField" = (
        RemovedFromProjectEventGraphQLField("createdAt")
    )
    database_id: "RemovedFromProjectEventGraphQLField" = (
        RemovedFromProjectEventGraphQLField("databaseId")
    )
    id: "RemovedFromProjectEventGraphQLField" = RemovedFromProjectEventGraphQLField(
        "id"
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    project_column_name: "RemovedFromProjectEventGraphQLField" = (
        RemovedFromProjectEventGraphQLField("projectColumnName")
    )

    def fields(
        self,
        *subfields: Union[
            RemovedFromProjectEventGraphQLField, "ActorInterface", "ProjectFields"
        ]
    ) -> "RemovedFromProjectEventFields":
        """Subfields should come from the RemovedFromProjectEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemovedFromProjectEventFields":
        self._alias = alias
        return self


class RenamedTitleEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "RenamedTitleEventGraphQLField" = RenamedTitleEventGraphQLField(
        "createdAt"
    )
    current_title: "RenamedTitleEventGraphQLField" = RenamedTitleEventGraphQLField(
        "currentTitle"
    )
    id: "RenamedTitleEventGraphQLField" = RenamedTitleEventGraphQLField("id")
    previous_title: "RenamedTitleEventGraphQLField" = RenamedTitleEventGraphQLField(
        "previousTitle"
    )
    subject: "RenamedTitleSubjectUnion" = RenamedTitleSubjectUnion("subject")

    def fields(
        self,
        *subfields: Union[
            RenamedTitleEventGraphQLField, "ActorInterface", "RenamedTitleSubjectUnion"
        ]
    ) -> "RenamedTitleEventFields":
        """Subfields should come from the RenamedTitleEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RenamedTitleEventFields":
        self._alias = alias
        return self


class ReopenDiscussionPayloadFields(GraphQLField):
    client_mutation_id: "ReopenDiscussionPayloadGraphQLField" = (
        ReopenDiscussionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    def fields(
        self, *subfields: Union[ReopenDiscussionPayloadGraphQLField, "DiscussionFields"]
    ) -> "ReopenDiscussionPayloadFields":
        """Subfields should come from the ReopenDiscussionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReopenDiscussionPayloadFields":
        self._alias = alias
        return self


class ReopenIssuePayloadFields(GraphQLField):
    client_mutation_id: "ReopenIssuePayloadGraphQLField" = (
        ReopenIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[ReopenIssuePayloadGraphQLField, "IssueFields"]
    ) -> "ReopenIssuePayloadFields":
        """Subfields should come from the ReopenIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReopenIssuePayloadFields":
        self._alias = alias
        return self


class ReopenPullRequestPayloadFields(GraphQLField):
    client_mutation_id: "ReopenPullRequestPayloadGraphQLField" = (
        ReopenPullRequestPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[ReopenPullRequestPayloadGraphQLField, "PullRequestFields"]
    ) -> "ReopenPullRequestPayloadFields":
        """Subfields should come from the ReopenPullRequestPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReopenPullRequestPayloadFields":
        self._alias = alias
        return self


class ReopenedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def closable(cls) -> "ClosableInterface":
        return ClosableInterface("closable")

    created_at: "ReopenedEventGraphQLField" = ReopenedEventGraphQLField("createdAt")
    id: "ReopenedEventGraphQLField" = ReopenedEventGraphQLField("id")
    state_reason: "ReopenedEventGraphQLField" = ReopenedEventGraphQLField("stateReason")

    def fields(
        self,
        *subfields: Union[
            ReopenedEventGraphQLField, "ActorInterface", "ClosableInterface"
        ]
    ) -> "ReopenedEventFields":
        """Subfields should come from the ReopenedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReopenedEventFields":
        self._alias = alias
        return self


class ReorderEnvironmentPayloadFields(GraphQLField):
    client_mutation_id: "ReorderEnvironmentPayloadGraphQLField" = (
        ReorderEnvironmentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def environment(cls) -> "EnvironmentFields":
        return EnvironmentFields("environment")

    def fields(
        self,
        *subfields: Union[ReorderEnvironmentPayloadGraphQLField, "EnvironmentFields"]
    ) -> "ReorderEnvironmentPayloadFields":
        """Subfields should come from the ReorderEnvironmentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReorderEnvironmentPayloadFields":
        self._alias = alias
        return self


class ReplaceActorsForAssignablePayloadFields(GraphQLField):
    @classmethod
    def assignable(cls) -> "AssignableInterface":
        return AssignableInterface("assignable")

    client_mutation_id: "ReplaceActorsForAssignablePayloadGraphQLField" = (
        ReplaceActorsForAssignablePayloadGraphQLField("clientMutationId")
    )

    def fields(
        self,
        *subfields: Union[
            ReplaceActorsForAssignablePayloadGraphQLField, "AssignableInterface"
        ]
    ) -> "ReplaceActorsForAssignablePayloadFields":
        """Subfields should come from the ReplaceActorsForAssignablePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReplaceActorsForAssignablePayloadFields":
        self._alias = alias
        return self


class RepoAccessAuditEntryFields(GraphQLField):
    action: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField(
        "actorIp"
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField(
        "actorLogin"
    )
    actor_resource_path: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField(
        "actorUrl"
    )
    created_at: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField(
        "createdAt"
    )
    id: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField("id")
    operation_type: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField(
        "userLogin"
    )
    user_resource_path: "RepoAccessAuditEntryGraphQLField" = (
        RepoAccessAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField(
        "userUrl"
    )
    visibility: "RepoAccessAuditEntryGraphQLField" = RepoAccessAuditEntryGraphQLField(
        "visibility"
    )

    def fields(
        self,
        *subfields: Union[
            RepoAccessAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoAccessAuditEntryFields":
        """Subfields should come from the RepoAccessAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoAccessAuditEntryFields":
        self._alias = alias
        return self


class RepoAddMemberAuditEntryFields(GraphQLField):
    action: "RepoAddMemberAuditEntryGraphQLField" = RepoAddMemberAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("createdAt")
    )
    id: "RepoAddMemberAuditEntryGraphQLField" = RepoAddMemberAuditEntryGraphQLField(
        "id"
    )
    operation_type: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("userUrl")
    )
    visibility: "RepoAddMemberAuditEntryGraphQLField" = (
        RepoAddMemberAuditEntryGraphQLField("visibility")
    )

    def fields(
        self,
        *subfields: Union[
            RepoAddMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoAddMemberAuditEntryFields":
        """Subfields should come from the RepoAddMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoAddMemberAuditEntryFields":
        self._alias = alias
        return self


class RepoAddTopicAuditEntryFields(GraphQLField):
    action: "RepoAddTopicAuditEntryGraphQLField" = RepoAddTopicAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoAddTopicAuditEntryGraphQLField" = RepoAddTopicAuditEntryGraphQLField(
        "actorIp"
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("createdAt")
    )
    id: "RepoAddTopicAuditEntryGraphQLField" = RepoAddTopicAuditEntryGraphQLField("id")
    operation_type: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def topic(cls) -> "TopicFields":
        return TopicFields("topic")

    topic_name: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("topicName")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoAddTopicAuditEntryGraphQLField" = (
        RepoAddTopicAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoAddTopicAuditEntryGraphQLField" = RepoAddTopicAuditEntryGraphQLField(
        "userUrl"
    )

    def fields(
        self,
        *subfields: Union[
            RepoAddTopicAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "TopicFields",
            "UserFields",
        ]
    ) -> "RepoAddTopicAuditEntryFields":
        """Subfields should come from the RepoAddTopicAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoAddTopicAuditEntryFields":
        self._alias = alias
        return self


class RepoArchivedAuditEntryFields(GraphQLField):
    action: "RepoArchivedAuditEntryGraphQLField" = RepoArchivedAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoArchivedAuditEntryGraphQLField" = RepoArchivedAuditEntryGraphQLField(
        "actorIp"
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("createdAt")
    )
    id: "RepoArchivedAuditEntryGraphQLField" = RepoArchivedAuditEntryGraphQLField("id")
    operation_type: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoArchivedAuditEntryGraphQLField" = RepoArchivedAuditEntryGraphQLField(
        "userUrl"
    )
    visibility: "RepoArchivedAuditEntryGraphQLField" = (
        RepoArchivedAuditEntryGraphQLField("visibility")
    )

    def fields(
        self,
        *subfields: Union[
            RepoArchivedAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoArchivedAuditEntryFields":
        """Subfields should come from the RepoArchivedAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoArchivedAuditEntryFields":
        self._alias = alias
        return self


class RepoChangeMergeSettingAuditEntryFields(GraphQLField):
    action: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("createdAt")
    )
    id: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("id")
    )
    is_enabled: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("isEnabled")
    )
    merge_type: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("mergeType")
    )
    operation_type: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoChangeMergeSettingAuditEntryGraphQLField" = (
        RepoChangeMergeSettingAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoChangeMergeSettingAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoChangeMergeSettingAuditEntryFields":
        """Subfields should come from the RepoChangeMergeSettingAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoChangeMergeSettingAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigDisableAnonymousGitAccessAuditEntryFields(GraphQLField):
    action: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField"
    ) = RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField"
    ) = RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigDisableAnonymousGitAccessAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigDisableAnonymousGitAccessAuditEntryFields":
        """Subfields should come from the RepoConfigDisableAnonymousGitAccessAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "RepoConfigDisableAnonymousGitAccessAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigDisableCollaboratorsOnlyAuditEntryFields(GraphQLField):
    action: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField"
    ) = RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField"
    ) = RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigDisableCollaboratorsOnlyAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigDisableCollaboratorsOnlyAuditEntryFields":
        """Subfields should come from the RepoConfigDisableCollaboratorsOnlyAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoConfigDisableCollaboratorsOnlyAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigDisableContributorsOnlyAuditEntryFields(GraphQLField):
    action: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField"
    ) = RepoConfigDisableContributorsOnlyAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField"
    ) = RepoConfigDisableContributorsOnlyAuditEntryGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigDisableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigDisableContributorsOnlyAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigDisableContributorsOnlyAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigDisableContributorsOnlyAuditEntryFields":
        """Subfields should come from the RepoConfigDisableContributorsOnlyAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoConfigDisableContributorsOnlyAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigDisableSockpuppetDisallowedAuditEntryFields(GraphQLField):
    action: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: (
        "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField"
    ) = RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("actorResourcePath")
    actor_url: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField"
    ) = RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField"
    ) = RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: (
        "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField"
    ) = RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("userResourcePath")
    user_url: "RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigDisableSockpuppetDisallowedAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigDisableSockpuppetDisallowedAuditEntryFields":
        """Subfields should come from the RepoConfigDisableSockpuppetDisallowedAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "RepoConfigDisableSockpuppetDisallowedAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigEnableAnonymousGitAccessAuditEntryFields(GraphQLField):
    action: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField"
    ) = RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField"
    ) = RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigEnableAnonymousGitAccessAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigEnableAnonymousGitAccessAuditEntryFields":
        """Subfields should come from the RepoConfigEnableAnonymousGitAccessAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoConfigEnableAnonymousGitAccessAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigEnableCollaboratorsOnlyAuditEntryFields(GraphQLField):
    action: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField"
    ) = RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField"
    ) = RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigEnableCollaboratorsOnlyAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigEnableCollaboratorsOnlyAuditEntryFields":
        """Subfields should come from the RepoConfigEnableCollaboratorsOnlyAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoConfigEnableCollaboratorsOnlyAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigEnableContributorsOnlyAuditEntryFields(GraphQLField):
    action: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField"
    ) = RepoConfigEnableContributorsOnlyAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField"
    ) = RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("repositoryResourcePath")
    repository_url: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigEnableContributorsOnlyAuditEntryGraphQLField" = (
        RepoConfigEnableContributorsOnlyAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigEnableContributorsOnlyAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigEnableContributorsOnlyAuditEntryFields":
        """Subfields should come from the RepoConfigEnableContributorsOnlyAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoConfigEnableContributorsOnlyAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigEnableSockpuppetDisallowedAuditEntryFields(GraphQLField):
    action: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: (
        "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField"
    ) = RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("actorResourcePath")
    actor_url: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField"
    ) = RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField"
    ) = RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField" = (
        RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigEnableSockpuppetDisallowedAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigEnableSockpuppetDisallowedAuditEntryFields":
        """Subfields should come from the RepoConfigEnableSockpuppetDisallowedAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "RepoConfigEnableSockpuppetDisallowedAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigLockAnonymousGitAccessAuditEntryFields(GraphQLField):
    action: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField"
    ) = RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField"
    ) = RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("repositoryResourcePath")
    repository_url: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigLockAnonymousGitAccessAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigLockAnonymousGitAccessAuditEntryFields":
        """Subfields should come from the RepoConfigLockAnonymousGitAccessAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoConfigLockAnonymousGitAccessAuditEntryFields":
        self._alias = alias
        return self


class RepoConfigUnlockAnonymousGitAccessAuditEntryFields(GraphQLField):
    action: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("createdAt")
    )
    id: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("id")
    )
    operation_type: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField"
    ) = RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: (
        "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField"
    ) = RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField(
        "repositoryResourcePath"
    )
    repository_url: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField" = (
        RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoConfigUnlockAnonymousGitAccessAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoConfigUnlockAnonymousGitAccessAuditEntryFields":
        """Subfields should come from the RepoConfigUnlockAnonymousGitAccessAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoConfigUnlockAnonymousGitAccessAuditEntryFields":
        self._alias = alias
        return self


class RepoCreateAuditEntryFields(GraphQLField):
    action: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField(
        "actorIp"
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField(
        "actorLogin"
    )
    actor_resource_path: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField(
        "actorUrl"
    )
    created_at: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField(
        "createdAt"
    )
    fork_parent_name: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("forkParentName")
    )
    fork_source_name: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("forkSourceName")
    )
    id: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField("id")
    operation_type: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField(
        "userLogin"
    )
    user_resource_path: "RepoCreateAuditEntryGraphQLField" = (
        RepoCreateAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField(
        "userUrl"
    )
    visibility: "RepoCreateAuditEntryGraphQLField" = RepoCreateAuditEntryGraphQLField(
        "visibility"
    )

    def fields(
        self,
        *subfields: Union[
            RepoCreateAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoCreateAuditEntryFields":
        """Subfields should come from the RepoCreateAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoCreateAuditEntryFields":
        self._alias = alias
        return self


class RepoDestroyAuditEntryFields(GraphQLField):
    action: "RepoDestroyAuditEntryGraphQLField" = RepoDestroyAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoDestroyAuditEntryGraphQLField" = RepoDestroyAuditEntryGraphQLField(
        "actorIp"
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoDestroyAuditEntryGraphQLField" = RepoDestroyAuditEntryGraphQLField(
        "actorUrl"
    )
    created_at: "RepoDestroyAuditEntryGraphQLField" = RepoDestroyAuditEntryGraphQLField(
        "createdAt"
    )
    id: "RepoDestroyAuditEntryGraphQLField" = RepoDestroyAuditEntryGraphQLField("id")
    operation_type: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoDestroyAuditEntryGraphQLField" = RepoDestroyAuditEntryGraphQLField(
        "userLogin"
    )
    user_resource_path: "RepoDestroyAuditEntryGraphQLField" = (
        RepoDestroyAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoDestroyAuditEntryGraphQLField" = RepoDestroyAuditEntryGraphQLField(
        "userUrl"
    )
    visibility: "RepoDestroyAuditEntryGraphQLField" = RepoDestroyAuditEntryGraphQLField(
        "visibility"
    )

    def fields(
        self,
        *subfields: Union[
            RepoDestroyAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoDestroyAuditEntryFields":
        """Subfields should come from the RepoDestroyAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoDestroyAuditEntryFields":
        self._alias = alias
        return self


class RepoRemoveMemberAuditEntryFields(GraphQLField):
    action: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("createdAt")
    )
    id: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("id")
    )
    operation_type: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("userUrl")
    )
    visibility: "RepoRemoveMemberAuditEntryGraphQLField" = (
        RepoRemoveMemberAuditEntryGraphQLField("visibility")
    )

    def fields(
        self,
        *subfields: Union[
            RepoRemoveMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "UserFields",
        ]
    ) -> "RepoRemoveMemberAuditEntryFields":
        """Subfields should come from the RepoRemoveMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoRemoveMemberAuditEntryFields":
        self._alias = alias
        return self


class RepoRemoveTopicAuditEntryFields(GraphQLField):
    action: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("createdAt")
    )
    id: "RepoRemoveTopicAuditEntryGraphQLField" = RepoRemoveTopicAuditEntryGraphQLField(
        "id"
    )
    operation_type: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def topic(cls) -> "TopicFields":
        return TopicFields("topic")

    topic_name: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("topicName")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepoRemoveTopicAuditEntryGraphQLField" = (
        RepoRemoveTopicAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepoRemoveTopicAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "TopicFields",
            "UserFields",
        ]
    ) -> "RepoRemoveTopicAuditEntryFields":
        """Subfields should come from the RepoRemoveTopicAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepoRemoveTopicAuditEntryFields":
        self._alias = alias
        return self


class RepositoryFields(GraphQLField):
    allow_update_branch: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "allowUpdateBranch"
    )
    archived_at: "RepositoryGraphQLField" = RepositoryGraphQLField("archivedAt")

    @classmethod
    def assignable_users(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        query: Optional[str] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("assignable_users", arguments=cleared_arguments)

    auto_merge_allowed: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "autoMergeAllowed"
    )

    @classmethod
    def branch_protection_rules(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "BranchProtectionRuleConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BranchProtectionRuleConnectionFields(
            "branch_protection_rules", arguments=cleared_arguments
        )

    @classmethod
    def code_of_conduct(cls) -> "CodeOfConductFields":
        return CodeOfConductFields("code_of_conduct")

    @classmethod
    def codeowners(
        cls, *, ref_name: Optional[str] = None
    ) -> "RepositoryCodeownersFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "refName": {"type": "String", "value": ref_name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryCodeownersFields("codeowners", arguments=cleared_arguments)

    @classmethod
    def collaborators(
        cls,
        *,
        affiliation: Optional[CollaboratorAffiliation] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        login: Optional[str] = None,
        query: Optional[str] = None
    ) -> "RepositoryCollaboratorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "affiliation": {"type": "CollaboratorAffiliation", "value": affiliation},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "login": {"type": "String", "value": login},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryCollaboratorConnectionFields(
            "collaborators", arguments=cleared_arguments
        )

    @classmethod
    def commit_comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CommitCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CommitCommentConnectionFields(
            "commit_comments", arguments=cleared_arguments
        )

    @classmethod
    def contact_links(cls) -> "RepositoryContactLinkFields":
        return RepositoryContactLinkFields("contact_links")

    @classmethod
    def contributing_guidelines(cls) -> "ContributingGuidelinesFields":
        return ContributingGuidelinesFields("contributing_guidelines")

    created_at: "RepositoryGraphQLField" = RepositoryGraphQLField("createdAt")
    database_id: "RepositoryGraphQLField" = RepositoryGraphQLField("databaseId")

    @classmethod
    def default_branch_ref(cls) -> "RefFields":
        return RefFields("default_branch_ref")

    delete_branch_on_merge: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "deleteBranchOnMerge"
    )

    @classmethod
    def dependency_graph_manifests(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        dependencies_after: Optional[str] = None,
        dependencies_first: Optional[int] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        with_dependencies: Optional[bool] = None
    ) -> "DependencyGraphManifestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "dependenciesAfter": {"type": "String", "value": dependencies_after},
            "dependenciesFirst": {"type": "Int", "value": dependencies_first},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "withDependencies": {"type": "Boolean", "value": with_dependencies},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DependencyGraphManifestConnectionFields(
            "dependency_graph_manifests", arguments=cleared_arguments
        )

    @classmethod
    def deploy_keys(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DeployKeyConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeployKeyConnectionFields("deploy_keys", arguments=cleared_arguments)

    @classmethod
    def deployments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        environments: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[DeploymentOrder] = None
    ) -> "DeploymentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "environments": {"type": "String", "value": environments},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "DeploymentOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentConnectionFields("deployments", arguments=cleared_arguments)

    description: "RepositoryGraphQLField" = RepositoryGraphQLField("description")
    description_html: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "descriptionHTML"
    )

    @classmethod
    def discussion(cls, number: int) -> "DiscussionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionFields("discussion", arguments=cleared_arguments)

    @classmethod
    def discussion_categories(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by_assignable: Optional[bool] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DiscussionCategoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterByAssignable": {"type": "Boolean", "value": filter_by_assignable},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionCategoryConnectionFields(
            "discussion_categories", arguments=cleared_arguments
        )

    @classmethod
    def discussion_category(cls, slug: str) -> "DiscussionCategoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "slug": {"type": "String!", "value": slug}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionCategoryFields(
            "discussion_category", arguments=cleared_arguments
        )

    @classmethod
    def discussions(
        cls,
        *,
        after: Optional[str] = None,
        answered: Optional[bool] = None,
        before: Optional[str] = None,
        category_id: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[DiscussionOrder] = None,
        states: Optional[DiscussionState] = None
    ) -> "DiscussionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "answered": {"type": "Boolean", "value": answered},
            "before": {"type": "String", "value": before},
            "categoryId": {"type": "ID", "value": category_id},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "DiscussionOrder", "value": order_by},
            "states": {"type": "DiscussionState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionConnectionFields("discussions", arguments=cleared_arguments)

    disk_usage: "RepositoryGraphQLField" = RepositoryGraphQLField("diskUsage")

    @classmethod
    def environment(cls, name: str) -> "EnvironmentFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnvironmentFields("environment", arguments=cleared_arguments)

    @classmethod
    def environments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        names: Optional[str] = None,
        order_by: Optional[Environments] = None,
        pinned_environment_filter: Optional[EnvironmentPinnedFilterField] = None
    ) -> "EnvironmentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "names": {"type": "String", "value": names},
            "orderBy": {"type": "Environments", "value": order_by},
            "pinnedEnvironmentFilter": {
                "type": "EnvironmentPinnedFilterField",
                "value": pinned_environment_filter,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnvironmentConnectionFields("environments", arguments=cleared_arguments)

    fork_count: "RepositoryGraphQLField" = RepositoryGraphQLField("forkCount")
    forking_allowed: "RepositoryGraphQLField" = RepositoryGraphQLField("forkingAllowed")

    @classmethod
    def forks(
        cls,
        *,
        affiliations: Optional[RepositoryAffiliation] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        has_issues_enabled: Optional[bool] = None,
        is_locked: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None,
        owner_affiliations: Optional[RepositoryAffiliation] = None,
        privacy: Optional[RepositoryPrivacy] = None,
        visibility: Optional[RepositoryVisibility] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "affiliations": {"type": "RepositoryAffiliation", "value": affiliations},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "hasIssuesEnabled": {"type": "Boolean", "value": has_issues_enabled},
            "isLocked": {"type": "Boolean", "value": is_locked},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
            "ownerAffiliations": {
                "type": "RepositoryAffiliation",
                "value": owner_affiliations,
            },
            "privacy": {"type": "RepositoryPrivacy", "value": privacy},
            "visibility": {"type": "RepositoryVisibility", "value": visibility},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields("forks", arguments=cleared_arguments)

    @classmethod
    def funding_links(cls) -> "FundingLinkFields":
        return FundingLinkFields("funding_links")

    has_discussions_enabled: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "hasDiscussionsEnabled"
    )
    has_issues_enabled: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "hasIssuesEnabled"
    )
    has_projects_enabled: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "hasProjectsEnabled"
    )
    has_sponsorships_enabled: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "hasSponsorshipsEnabled"
    )
    has_vulnerability_alerts_enabled: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "hasVulnerabilityAlertsEnabled"
    )
    has_wiki_enabled: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "hasWikiEnabled"
    )
    homepage_url: "RepositoryGraphQLField" = RepositoryGraphQLField("homepageUrl")
    id: "RepositoryGraphQLField" = RepositoryGraphQLField("id")

    @classmethod
    def interaction_ability(cls) -> "RepositoryInteractionAbilityFields":
        return RepositoryInteractionAbilityFields("interaction_ability")

    is_archived: "RepositoryGraphQLField" = RepositoryGraphQLField("isArchived")
    is_blank_issues_enabled: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "isBlankIssuesEnabled"
    )
    is_disabled: "RepositoryGraphQLField" = RepositoryGraphQLField("isDisabled")
    is_empty: "RepositoryGraphQLField" = RepositoryGraphQLField("isEmpty")
    is_fork: "RepositoryGraphQLField" = RepositoryGraphQLField("isFork")
    is_in_organization: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "isInOrganization"
    )
    is_locked: "RepositoryGraphQLField" = RepositoryGraphQLField("isLocked")
    is_mirror: "RepositoryGraphQLField" = RepositoryGraphQLField("isMirror")
    is_private: "RepositoryGraphQLField" = RepositoryGraphQLField("isPrivate")
    is_security_policy_enabled: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "isSecurityPolicyEnabled"
    )
    is_template: "RepositoryGraphQLField" = RepositoryGraphQLField("isTemplate")
    is_user_configuration_repository: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "isUserConfigurationRepository"
    )

    @classmethod
    def issue(cls, number: int) -> "IssueFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueFields("issue", arguments=cleared_arguments)

    @classmethod
    def issue_or_pull_request(cls, number: int) -> "IssueOrPullRequestUnion":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueOrPullRequestUnion(
            "issue_or_pull_request", arguments=cleared_arguments
        )

    @classmethod
    def issue_templates(cls) -> "IssueTemplateFields":
        return IssueTemplateFields("issue_templates")

    @classmethod
    def issue_type(cls, name: str) -> "IssueTypeFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueTypeFields("issue_type", arguments=cleared_arguments)

    @classmethod
    def issue_types(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueTypeOrder] = None
    ) -> "IssueTypeConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueTypeOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueTypeConnectionFields("issue_types", arguments=cleared_arguments)

    @classmethod
    def issues(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by: Optional[IssueFilters] = None,
        first: Optional[int] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[IssueState] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterBy": {"type": "IssueFilters", "value": filter_by},
            "first": {"type": "Int", "value": first},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "IssueState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields("issues", arguments=cleared_arguments)

    @classmethod
    def label(cls, name: str) -> "LabelFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelFields("label", arguments=cleared_arguments)

    @classmethod
    def labels(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[LabelOrder] = None,
        query: Optional[str] = None
    ) -> "LabelConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "LabelOrder", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelConnectionFields("labels", arguments=cleared_arguments)

    @classmethod
    def languages(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[LanguageOrder] = None
    ) -> "LanguageConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "LanguageOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LanguageConnectionFields("languages", arguments=cleared_arguments)

    @classmethod
    def latest_release(cls) -> "ReleaseFields":
        return ReleaseFields("latest_release")

    @classmethod
    def license_info(cls) -> "LicenseFields":
        return LicenseFields("license_info")

    lock_reason: "RepositoryGraphQLField" = RepositoryGraphQLField("lockReason")

    @classmethod
    def mentionable_users(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        query: Optional[str] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("mentionable_users", arguments=cleared_arguments)

    merge_commit_allowed: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "mergeCommitAllowed"
    )
    merge_commit_message: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "mergeCommitMessage"
    )
    merge_commit_title: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "mergeCommitTitle"
    )

    @classmethod
    def merge_queue(cls, *, branch: Optional[str] = None) -> "MergeQueueFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "branch": {"type": "String", "value": branch}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MergeQueueFields("merge_queue", arguments=cleared_arguments)

    @classmethod
    def milestone(cls, number: int) -> "MilestoneFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MilestoneFields("milestone", arguments=cleared_arguments)

    @classmethod
    def milestones(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[MilestoneOrder] = None,
        query: Optional[str] = None,
        states: Optional[MilestoneState] = None
    ) -> "MilestoneConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "MilestoneOrder", "value": order_by},
            "query": {"type": "String", "value": query},
            "states": {"type": "MilestoneState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MilestoneConnectionFields("milestones", arguments=cleared_arguments)

    mirror_url: "RepositoryGraphQLField" = RepositoryGraphQLField("mirrorUrl")
    name: "RepositoryGraphQLField" = RepositoryGraphQLField("name")
    name_with_owner: "RepositoryGraphQLField" = RepositoryGraphQLField("nameWithOwner")

    @classmethod
    def object(
        cls, *, expression: Optional[str] = None, oid: Optional[Any] = None
    ) -> "GitObjectInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "expression": {"type": "String", "value": expression},
            "oid": {"type": "GitObjectID", "value": oid},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GitObjectInterface("object", arguments=cleared_arguments)

    open_graph_image_url: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "openGraphImageUrl"
    )

    @classmethod
    def owner(cls) -> "RepositoryOwnerInterface":
        return RepositoryOwnerInterface("owner")

    @classmethod
    def packages(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        names: Optional[str] = None,
        order_by: Optional[PackageOrder] = None,
        package_type: Optional[PackageType] = None,
        repository_id: Optional[str] = None
    ) -> "PackageConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "names": {"type": "String", "value": names},
            "orderBy": {"type": "PackageOrder", "value": order_by},
            "packageType": {"type": "PackageType", "value": package_type},
            "repositoryId": {"type": "ID", "value": repository_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PackageConnectionFields("packages", arguments=cleared_arguments)

    @classmethod
    def parent(cls) -> "RepositoryFields":
        return RepositoryFields("parent")

    @classmethod
    def pinned_discussions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PinnedDiscussionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnedDiscussionConnectionFields(
            "pinned_discussions", arguments=cleared_arguments
        )

    @classmethod
    def pinned_environments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[PinnedEnvironmentOrder] = None
    ) -> "PinnedEnvironmentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "PinnedEnvironmentOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnedEnvironmentConnectionFields(
            "pinned_environments", arguments=cleared_arguments
        )

    @classmethod
    def pinned_issues(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PinnedIssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnedIssueConnectionFields("pinned_issues", arguments=cleared_arguments)

    @classmethod
    def plan_features(cls) -> "RepositoryPlanFeaturesFields":
        return RepositoryPlanFeaturesFields("plan_features")

    @classmethod
    def primary_language(cls) -> "LanguageFields":
        return LanguageFields("primary_language")

    @classmethod
    def project(cls, number: int) -> "ProjectFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields("project", arguments=cleared_arguments)

    @classmethod
    def project_v_2(cls, number: int) -> "ProjectV2Fields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2Fields("project_v_2", arguments=cleared_arguments)

    @classmethod
    def projects(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectOrder] = None,
        search: Optional[str] = None,
        states: Optional[ProjectState] = None
    ) -> "ProjectConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectOrder", "value": order_by},
            "search": {"type": "String", "value": search},
            "states": {"type": "ProjectState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectConnectionFields("projects", arguments=cleared_arguments)

    projects_resource_path: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "projectsResourcePath"
    )
    projects_url: "RepositoryGraphQLField" = RepositoryGraphQLField("projectsUrl")

    @classmethod
    def projects_v_2(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        min_permission_level: Optional[ProjectV2PermissionLevel] = None,
        order_by: Optional[ProjectV2Order] = None,
        query: Optional[str] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "minPermissionLevel": {
                "type": "ProjectV2PermissionLevel",
                "value": min_permission_level,
            },
            "orderBy": {"type": "ProjectV2Order", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("projects_v_2", arguments=cleared_arguments)

    @classmethod
    def pull_request(cls, number: int) -> "PullRequestFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestFields("pull_request", arguments=cleared_arguments)

    @classmethod
    def pull_request_templates(cls) -> "PullRequestTemplateFields":
        return PullRequestTemplateFields("pull_request_templates")

    @classmethod
    def pull_requests(
        cls,
        *,
        after: Optional[str] = None,
        base_ref_name: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        head_ref_name: Optional[str] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[PullRequestState] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "baseRefName": {"type": "String", "value": base_ref_name},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "headRefName": {"type": "String", "value": head_ref_name},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "PullRequestState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields("pull_requests", arguments=cleared_arguments)

    pushed_at: "RepositoryGraphQLField" = RepositoryGraphQLField("pushedAt")
    rebase_merge_allowed: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "rebaseMergeAllowed"
    )

    @classmethod
    def recent_projects(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("recent_projects", arguments=cleared_arguments)

    @classmethod
    def ref(cls, qualified_name: str) -> "RefFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "qualifiedName": {"type": "String!", "value": qualified_name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RefFields("ref", arguments=cleared_arguments)

    @classmethod
    def refs(
        cls,
        ref_prefix: str,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        direction: Optional[OrderDirection] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[RefOrder] = None,
        query: Optional[str] = None
    ) -> "RefConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "direction": {"type": "OrderDirection", "value": direction},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RefOrder", "value": order_by},
            "query": {"type": "String", "value": query},
            "refPrefix": {"type": "String!", "value": ref_prefix},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RefConnectionFields("refs", arguments=cleared_arguments)

    @classmethod
    def release(cls, tag_name: str) -> "ReleaseFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "tagName": {"type": "String!", "value": tag_name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReleaseFields("release", arguments=cleared_arguments)

    @classmethod
    def releases(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReleaseOrder] = None
    ) -> "ReleaseConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReleaseOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReleaseConnectionFields("releases", arguments=cleared_arguments)

    @classmethod
    def repository_topics(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "RepositoryTopicConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryTopicConnectionFields(
            "repository_topics", arguments=cleared_arguments
        )

    resource_path: "RepositoryGraphQLField" = RepositoryGraphQLField("resourcePath")

    @classmethod
    def ruleset(
        cls, database_id: int, *, include_parents: Optional[bool] = None
    ) -> "RepositoryRulesetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "databaseId": {"type": "Int!", "value": database_id},
            "includeParents": {"type": "Boolean", "value": include_parents},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRulesetFields("ruleset", arguments=cleared_arguments)

    @classmethod
    def rulesets(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_parents: Optional[bool] = None,
        last: Optional[int] = None,
        targets: Optional[RepositoryRulesetTarget] = None
    ) -> "RepositoryRulesetConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeParents": {"type": "Boolean", "value": include_parents},
            "last": {"type": "Int", "value": last},
            "targets": {"type": "RepositoryRulesetTarget", "value": targets},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRulesetConnectionFields(
            "rulesets", arguments=cleared_arguments
        )

    security_policy_url: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "securityPolicyUrl"
    )

    @classmethod
    def short_description_html(
        cls, *, limit: Optional[int] = None
    ) -> "RepositoryGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "limit": {"type": "Int", "value": limit}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryGraphQLField(
            "short_description_html", arguments=cleared_arguments
        )

    squash_merge_allowed: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "squashMergeAllowed"
    )
    squash_merge_commit_message: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "squashMergeCommitMessage"
    )
    squash_merge_commit_title: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "squashMergeCommitTitle"
    )
    squash_pr_title_used_as_default: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "squashPrTitleUsedAsDefault"
    )
    ssh_url: "RepositoryGraphQLField" = RepositoryGraphQLField("sshUrl")
    stargazer_count: "RepositoryGraphQLField" = RepositoryGraphQLField("stargazerCount")

    @classmethod
    def stargazers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[StarOrder] = None
    ) -> "StargazerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "StarOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StargazerConnectionFields("stargazers", arguments=cleared_arguments)

    @classmethod
    def submodules(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "SubmoduleConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SubmoduleConnectionFields("submodules", arguments=cleared_arguments)

    @classmethod
    def suggested_actors(
        cls,
        capabilities: RepositorySuggestedActorFilter,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        login_names: Optional[str] = None,
        query: Optional[str] = None
    ) -> "ActorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "capabilities": {
                "type": "RepositorySuggestedActorFilter!",
                "value": capabilities,
            },
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "loginNames": {"type": "String", "value": login_names},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ActorConnectionFields("suggested_actors", arguments=cleared_arguments)

    temp_clone_token: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "tempCloneToken"
    )

    @classmethod
    def template_repository(cls) -> "RepositoryFields":
        return RepositoryFields("template_repository")

    updated_at: "RepositoryGraphQLField" = RepositoryGraphQLField("updatedAt")
    url: "RepositoryGraphQLField" = RepositoryGraphQLField("url")
    uses_custom_open_graph_image: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "usesCustomOpenGraphImage"
    )
    viewer_can_administer: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerCanAdminister"
    )
    viewer_can_create_projects: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerCanCreateProjects"
    )
    viewer_can_subscribe: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerCanSubscribe"
    )
    viewer_can_update_topics: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerCanUpdateTopics"
    )
    viewer_default_commit_email: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerDefaultCommitEmail"
    )
    viewer_default_merge_method: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerDefaultMergeMethod"
    )
    viewer_has_starred: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerHasStarred"
    )
    viewer_permission: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerPermission"
    )
    viewer_possible_commit_emails: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerPossibleCommitEmails"
    )
    viewer_subscription: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "viewerSubscription"
    )
    visibility: "RepositoryGraphQLField" = RepositoryGraphQLField("visibility")

    @classmethod
    def vulnerability_alert(cls, number: int) -> "RepositoryVulnerabilityAlertFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryVulnerabilityAlertFields(
            "vulnerability_alert", arguments=cleared_arguments
        )

    @classmethod
    def vulnerability_alerts(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        dependency_scopes: Optional[RepositoryVulnerabilityAlertDependencyScope] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        states: Optional[RepositoryVulnerabilityAlertState] = None
    ) -> "RepositoryVulnerabilityAlertConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "dependencyScopes": {
                "type": "RepositoryVulnerabilityAlertDependencyScope",
                "value": dependency_scopes,
            },
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "states": {"type": "RepositoryVulnerabilityAlertState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryVulnerabilityAlertConnectionFields(
            "vulnerability_alerts", arguments=cleared_arguments
        )

    @classmethod
    def watchers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields("watchers", arguments=cleared_arguments)

    web_commit_signoff_required: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "webCommitSignoffRequired"
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryGraphQLField,
            "ActorConnectionFields",
            "BranchProtectionRuleConnectionFields",
            "CodeOfConductFields",
            "CommitCommentConnectionFields",
            "ContributingGuidelinesFields",
            "DependencyGraphManifestConnectionFields",
            "DeployKeyConnectionFields",
            "DeploymentConnectionFields",
            "DiscussionCategoryConnectionFields",
            "DiscussionCategoryFields",
            "DiscussionConnectionFields",
            "DiscussionFields",
            "EnvironmentConnectionFields",
            "EnvironmentFields",
            "FundingLinkFields",
            "GitObjectInterface",
            "IssueConnectionFields",
            "IssueFields",
            "IssueOrPullRequestUnion",
            "IssueTemplateFields",
            "IssueTypeConnectionFields",
            "IssueTypeFields",
            "LabelConnectionFields",
            "LabelFields",
            "LanguageConnectionFields",
            "LanguageFields",
            "LicenseFields",
            "MergeQueueFields",
            "MilestoneConnectionFields",
            "MilestoneFields",
            "PackageConnectionFields",
            "PinnedDiscussionConnectionFields",
            "PinnedEnvironmentConnectionFields",
            "PinnedIssueConnectionFields",
            "ProjectConnectionFields",
            "ProjectFields",
            "ProjectV2ConnectionFields",
            "ProjectV2Fields",
            "PullRequestConnectionFields",
            "PullRequestFields",
            "PullRequestTemplateFields",
            "RefConnectionFields",
            "RefFields",
            "ReleaseConnectionFields",
            "ReleaseFields",
            "RepositoryCodeownersFields",
            "RepositoryCollaboratorConnectionFields",
            "RepositoryConnectionFields",
            "RepositoryContactLinkFields",
            "RepositoryFields",
            "RepositoryInteractionAbilityFields",
            "RepositoryOwnerInterface",
            "RepositoryPlanFeaturesFields",
            "RepositoryRulesetConnectionFields",
            "RepositoryRulesetFields",
            "RepositoryTopicConnectionFields",
            "RepositoryVulnerabilityAlertConnectionFields",
            "RepositoryVulnerabilityAlertFields",
            "StargazerConnectionFields",
            "SubmoduleConnectionFields",
            "UserConnectionFields",
        ]
    ) -> "RepositoryFields":
        """Subfields should come from the RepositoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryFields":
        self._alias = alias
        return self


class RepositoryAuditEntryDataInterface(GraphQLField):
    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "RepositoryAuditEntryDataGraphQLField" = (
        RepositoryAuditEntryDataGraphQLField("repositoryName")
    )
    repository_resource_path: "RepositoryAuditEntryDataGraphQLField" = (
        RepositoryAuditEntryDataGraphQLField("repositoryResourcePath")
    )
    repository_url: "RepositoryAuditEntryDataGraphQLField" = (
        RepositoryAuditEntryDataGraphQLField("repositoryUrl")
    )

    def fields(
        self,
        *subfields: Union[RepositoryAuditEntryDataGraphQLField, "RepositoryFields"]
    ) -> "RepositoryAuditEntryDataInterface":
        """Subfields should come from the RepositoryAuditEntryDataInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryAuditEntryDataInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "RepositoryAuditEntryDataInterface":
        self._inline_fragments[type_name] = subfields
        return self


class RepositoryCodeownersFields(GraphQLField):
    @classmethod
    def errors(cls) -> "RepositoryCodeownersErrorFields":
        return RepositoryCodeownersErrorFields("errors")

    def fields(
        self,
        *subfields: Union[
            RepositoryCodeownersGraphQLField, "RepositoryCodeownersErrorFields"
        ]
    ) -> "RepositoryCodeownersFields":
        """Subfields should come from the RepositoryCodeownersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryCodeownersFields":
        self._alias = alias
        return self


class RepositoryCodeownersErrorFields(GraphQLField):
    column: "RepositoryCodeownersErrorGraphQLField" = (
        RepositoryCodeownersErrorGraphQLField("column")
    )
    kind: "RepositoryCodeownersErrorGraphQLField" = (
        RepositoryCodeownersErrorGraphQLField("kind")
    )
    line: "RepositoryCodeownersErrorGraphQLField" = (
        RepositoryCodeownersErrorGraphQLField("line")
    )
    message: "RepositoryCodeownersErrorGraphQLField" = (
        RepositoryCodeownersErrorGraphQLField("message")
    )
    path: "RepositoryCodeownersErrorGraphQLField" = (
        RepositoryCodeownersErrorGraphQLField("path")
    )
    source: "RepositoryCodeownersErrorGraphQLField" = (
        RepositoryCodeownersErrorGraphQLField("source")
    )
    suggestion: "RepositoryCodeownersErrorGraphQLField" = (
        RepositoryCodeownersErrorGraphQLField("suggestion")
    )

    def fields(
        self, *subfields: RepositoryCodeownersErrorGraphQLField
    ) -> "RepositoryCodeownersErrorFields":
        """Subfields should come from the RepositoryCodeownersErrorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryCodeownersErrorFields":
        self._alias = alias
        return self


class RepositoryCollaboratorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryCollaboratorEdgeFields":
        return RepositoryCollaboratorEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryCollaboratorConnectionGraphQLField" = (
        RepositoryCollaboratorConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryCollaboratorConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryCollaboratorEdgeFields",
            "UserFields",
        ]
    ) -> "RepositoryCollaboratorConnectionFields":
        """Subfields should come from the RepositoryCollaboratorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryCollaboratorConnectionFields":
        self._alias = alias
        return self


class RepositoryCollaboratorEdgeFields(GraphQLField):
    cursor: "RepositoryCollaboratorEdgeGraphQLField" = (
        RepositoryCollaboratorEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    permission: "RepositoryCollaboratorEdgeGraphQLField" = (
        RepositoryCollaboratorEdgeGraphQLField("permission")
    )

    @classmethod
    def permission_sources(cls) -> "PermissionSourceFields":
        return PermissionSourceFields("permission_sources")

    def fields(
        self,
        *subfields: Union[
            RepositoryCollaboratorEdgeGraphQLField,
            "PermissionSourceFields",
            "UserFields",
        ]
    ) -> "RepositoryCollaboratorEdgeFields":
        """Subfields should come from the RepositoryCollaboratorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryCollaboratorEdgeFields":
        self._alias = alias
        return self


class RepositoryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryEdgeFields":
        return RepositoryEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryFields":
        return RepositoryFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryConnectionGraphQLField" = RepositoryConnectionGraphQLField(
        "totalCount"
    )
    total_disk_usage: "RepositoryConnectionGraphQLField" = (
        RepositoryConnectionGraphQLField("totalDiskUsage")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryEdgeFields",
            "RepositoryFields",
        ]
    ) -> "RepositoryConnectionFields":
        """Subfields should come from the RepositoryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryConnectionFields":
        self._alias = alias
        return self


class RepositoryContactLinkFields(GraphQLField):
    about: "RepositoryContactLinkGraphQLField" = RepositoryContactLinkGraphQLField(
        "about"
    )
    name: "RepositoryContactLinkGraphQLField" = RepositoryContactLinkGraphQLField(
        "name"
    )
    url: "RepositoryContactLinkGraphQLField" = RepositoryContactLinkGraphQLField("url")

    def fields(
        self, *subfields: RepositoryContactLinkGraphQLField
    ) -> "RepositoryContactLinkFields":
        """Subfields should come from the RepositoryContactLinkFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryContactLinkFields":
        self._alias = alias
        return self


class RepositoryDiscussionAuthorInterface(GraphQLField):
    @classmethod
    def repository_discussions(
        cls,
        *,
        after: Optional[str] = None,
        answered: Optional[bool] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[DiscussionOrder] = None,
        repository_id: Optional[str] = None,
        states: Optional[DiscussionState] = None
    ) -> "DiscussionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "answered": {"type": "Boolean", "value": answered},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "DiscussionOrder", "value": order_by},
            "repositoryId": {"type": "ID", "value": repository_id},
            "states": {"type": "DiscussionState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionConnectionFields(
            "repository_discussions", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            RepositoryDiscussionAuthorGraphQLField, "DiscussionConnectionFields"
        ]
    ) -> "RepositoryDiscussionAuthorInterface":
        """Subfields should come from the RepositoryDiscussionAuthorInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryDiscussionAuthorInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "RepositoryDiscussionAuthorInterface":
        self._inline_fragments[type_name] = subfields
        return self


class RepositoryDiscussionCommentAuthorInterface(GraphQLField):
    @classmethod
    def repository_discussion_comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        only_answers: Optional[bool] = None,
        repository_id: Optional[str] = None
    ) -> "DiscussionCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "onlyAnswers": {"type": "Boolean", "value": only_answers},
            "repositoryId": {"type": "ID", "value": repository_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionCommentConnectionFields(
            "repository_discussion_comments", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            RepositoryDiscussionCommentAuthorGraphQLField,
            "DiscussionCommentConnectionFields",
        ]
    ) -> "RepositoryDiscussionCommentAuthorInterface":
        """Subfields should come from the RepositoryDiscussionCommentAuthorInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryDiscussionCommentAuthorInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "RepositoryDiscussionCommentAuthorInterface":
        self._inline_fragments[type_name] = subfields
        return self


class RepositoryEdgeFields(GraphQLField):
    cursor: "RepositoryEdgeGraphQLField" = RepositoryEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "RepositoryFields":
        return RepositoryFields("node")

    def fields(
        self, *subfields: Union[RepositoryEdgeGraphQLField, "RepositoryFields"]
    ) -> "RepositoryEdgeFields":
        """Subfields should come from the RepositoryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryEdgeFields":
        self._alias = alias
        return self


class RepositoryIdConditionTargetFields(GraphQLField):
    repository_ids: "RepositoryIdConditionTargetGraphQLField" = (
        RepositoryIdConditionTargetGraphQLField("repositoryIds")
    )

    def fields(
        self, *subfields: RepositoryIdConditionTargetGraphQLField
    ) -> "RepositoryIdConditionTargetFields":
        """Subfields should come from the RepositoryIdConditionTargetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryIdConditionTargetFields":
        self._alias = alias
        return self


class RepositoryInfoInterface(GraphQLField):
    archived_at: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("archivedAt")
    created_at: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("createdAt")
    description: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "description"
    )
    description_html: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "descriptionHTML"
    )
    fork_count: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("forkCount")
    has_discussions_enabled: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "hasDiscussionsEnabled"
    )
    has_issues_enabled: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "hasIssuesEnabled"
    )
    has_projects_enabled: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "hasProjectsEnabled"
    )
    has_sponsorships_enabled: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "hasSponsorshipsEnabled"
    )
    has_wiki_enabled: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "hasWikiEnabled"
    )
    homepage_url: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "homepageUrl"
    )
    is_archived: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("isArchived")
    is_fork: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("isFork")
    is_in_organization: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "isInOrganization"
    )
    is_locked: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("isLocked")
    is_mirror: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("isMirror")
    is_private: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("isPrivate")
    is_template: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("isTemplate")

    @classmethod
    def license_info(cls) -> "LicenseFields":
        return LicenseFields("license_info")

    lock_reason: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("lockReason")
    mirror_url: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("mirrorUrl")
    name: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("name")
    name_with_owner: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "nameWithOwner"
    )
    open_graph_image_url: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "openGraphImageUrl"
    )

    @classmethod
    def owner(cls) -> "RepositoryOwnerInterface":
        return RepositoryOwnerInterface("owner")

    pushed_at: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("pushedAt")
    resource_path: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField(
        "resourcePath"
    )

    @classmethod
    def short_description_html(
        cls, *, limit: Optional[int] = None
    ) -> "RepositoryInfoGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "limit": {"type": "Int", "value": limit}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryInfoGraphQLField(
            "short_description_html", arguments=cleared_arguments
        )

    updated_at: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("updatedAt")
    url: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("url")
    uses_custom_open_graph_image: "RepositoryInfoGraphQLField" = (
        RepositoryInfoGraphQLField("usesCustomOpenGraphImage")
    )
    visibility: "RepositoryInfoGraphQLField" = RepositoryInfoGraphQLField("visibility")

    def fields(
        self,
        *subfields: Union[
            RepositoryInfoGraphQLField, "LicenseFields", "RepositoryOwnerInterface"
        ]
    ) -> "RepositoryInfoInterface":
        """Subfields should come from the RepositoryInfoInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryInfoInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "RepositoryInfoInterface":
        self._inline_fragments[type_name] = subfields
        return self


class RepositoryInteractionAbilityFields(GraphQLField):
    expires_at: "RepositoryInteractionAbilityGraphQLField" = (
        RepositoryInteractionAbilityGraphQLField("expiresAt")
    )
    limit: "RepositoryInteractionAbilityGraphQLField" = (
        RepositoryInteractionAbilityGraphQLField("limit")
    )
    origin: "RepositoryInteractionAbilityGraphQLField" = (
        RepositoryInteractionAbilityGraphQLField("origin")
    )

    def fields(
        self, *subfields: RepositoryInteractionAbilityGraphQLField
    ) -> "RepositoryInteractionAbilityFields":
        """Subfields should come from the RepositoryInteractionAbilityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryInteractionAbilityFields":
        self._alias = alias
        return self


class RepositoryInvitationFields(GraphQLField):
    email: "RepositoryInvitationGraphQLField" = RepositoryInvitationGraphQLField(
        "email"
    )
    id: "RepositoryInvitationGraphQLField" = RepositoryInvitationGraphQLField("id")

    @classmethod
    def invitee(cls) -> "UserFields":
        return UserFields("invitee")

    @classmethod
    def inviter(cls) -> "UserFields":
        return UserFields("inviter")

    permalink: "RepositoryInvitationGraphQLField" = RepositoryInvitationGraphQLField(
        "permalink"
    )
    permission: "RepositoryInvitationGraphQLField" = RepositoryInvitationGraphQLField(
        "permission"
    )

    @classmethod
    def repository(cls) -> "RepositoryInfoInterface":
        return RepositoryInfoInterface("repository")

    def fields(
        self,
        *subfields: Union[
            RepositoryInvitationGraphQLField, "RepositoryInfoInterface", "UserFields"
        ]
    ) -> "RepositoryInvitationFields":
        """Subfields should come from the RepositoryInvitationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryInvitationFields":
        self._alias = alias
        return self


class RepositoryInvitationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryInvitationEdgeFields":
        return RepositoryInvitationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryInvitationFields":
        return RepositoryInvitationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryInvitationConnectionGraphQLField" = (
        RepositoryInvitationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryInvitationConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryInvitationEdgeFields",
            "RepositoryInvitationFields",
        ]
    ) -> "RepositoryInvitationConnectionFields":
        """Subfields should come from the RepositoryInvitationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryInvitationConnectionFields":
        self._alias = alias
        return self


class RepositoryInvitationEdgeFields(GraphQLField):
    cursor: "RepositoryInvitationEdgeGraphQLField" = (
        RepositoryInvitationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "RepositoryInvitationFields":
        return RepositoryInvitationFields("node")

    def fields(
        self,
        *subfields: Union[
            RepositoryInvitationEdgeGraphQLField, "RepositoryInvitationFields"
        ]
    ) -> "RepositoryInvitationEdgeFields":
        """Subfields should come from the RepositoryInvitationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryInvitationEdgeFields":
        self._alias = alias
        return self


class RepositoryMigrationFields(GraphQLField):
    continue_on_error: "RepositoryMigrationGraphQLField" = (
        RepositoryMigrationGraphQLField("continueOnError")
    )
    created_at: "RepositoryMigrationGraphQLField" = RepositoryMigrationGraphQLField(
        "createdAt"
    )
    database_id: "RepositoryMigrationGraphQLField" = RepositoryMigrationGraphQLField(
        "databaseId"
    )
    failure_reason: "RepositoryMigrationGraphQLField" = RepositoryMigrationGraphQLField(
        "failureReason"
    )
    id: "RepositoryMigrationGraphQLField" = RepositoryMigrationGraphQLField("id")
    migration_log_url: "RepositoryMigrationGraphQLField" = (
        RepositoryMigrationGraphQLField("migrationLogUrl")
    )

    @classmethod
    def migration_source(cls) -> "MigrationSourceFields":
        return MigrationSourceFields("migration_source")

    repository_name: "RepositoryMigrationGraphQLField" = (
        RepositoryMigrationGraphQLField("repositoryName")
    )
    source_url: "RepositoryMigrationGraphQLField" = RepositoryMigrationGraphQLField(
        "sourceUrl"
    )
    state: "RepositoryMigrationGraphQLField" = RepositoryMigrationGraphQLField("state")
    warnings_count: "RepositoryMigrationGraphQLField" = RepositoryMigrationGraphQLField(
        "warningsCount"
    )

    def fields(
        self,
        *subfields: Union[RepositoryMigrationGraphQLField, "MigrationSourceFields"]
    ) -> "RepositoryMigrationFields":
        """Subfields should come from the RepositoryMigrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryMigrationFields":
        self._alias = alias
        return self


class RepositoryMigrationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryMigrationEdgeFields":
        return RepositoryMigrationEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryMigrationFields":
        return RepositoryMigrationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryMigrationConnectionGraphQLField" = (
        RepositoryMigrationConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryMigrationConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryMigrationEdgeFields",
            "RepositoryMigrationFields",
        ]
    ) -> "RepositoryMigrationConnectionFields":
        """Subfields should come from the RepositoryMigrationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryMigrationConnectionFields":
        self._alias = alias
        return self


class RepositoryMigrationEdgeFields(GraphQLField):
    cursor: "RepositoryMigrationEdgeGraphQLField" = RepositoryMigrationEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "RepositoryMigrationFields":
        return RepositoryMigrationFields("node")

    def fields(
        self,
        *subfields: Union[
            RepositoryMigrationEdgeGraphQLField, "RepositoryMigrationFields"
        ]
    ) -> "RepositoryMigrationEdgeFields":
        """Subfields should come from the RepositoryMigrationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryMigrationEdgeFields":
        self._alias = alias
        return self


class RepositoryNameConditionTargetFields(GraphQLField):
    exclude: "RepositoryNameConditionTargetGraphQLField" = (
        RepositoryNameConditionTargetGraphQLField("exclude")
    )
    include: "RepositoryNameConditionTargetGraphQLField" = (
        RepositoryNameConditionTargetGraphQLField("include")
    )
    protected: "RepositoryNameConditionTargetGraphQLField" = (
        RepositoryNameConditionTargetGraphQLField("protected")
    )

    def fields(
        self, *subfields: RepositoryNameConditionTargetGraphQLField
    ) -> "RepositoryNameConditionTargetFields":
        """Subfields should come from the RepositoryNameConditionTargetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryNameConditionTargetFields":
        self._alias = alias
        return self


class RepositoryNodeInterface(GraphQLField):
    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[RepositoryNodeGraphQLField, "RepositoryFields"]
    ) -> "RepositoryNodeInterface":
        """Subfields should come from the RepositoryNodeInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryNodeInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "RepositoryNodeInterface":
        self._inline_fragments[type_name] = subfields
        return self


class RepositoryOwnerInterface(GraphQLField):
    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "RepositoryOwnerGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryOwnerGraphQLField("avatar_url", arguments=cleared_arguments)

    id: "RepositoryOwnerGraphQLField" = RepositoryOwnerGraphQLField("id")
    login: "RepositoryOwnerGraphQLField" = RepositoryOwnerGraphQLField("login")

    @classmethod
    def repositories(
        cls,
        *,
        affiliations: Optional[RepositoryAffiliation] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        has_issues_enabled: Optional[bool] = None,
        is_archived: Optional[bool] = None,
        is_fork: Optional[bool] = None,
        is_locked: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None,
        owner_affiliations: Optional[RepositoryAffiliation] = None,
        privacy: Optional[RepositoryPrivacy] = None,
        visibility: Optional[RepositoryVisibility] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "affiliations": {"type": "RepositoryAffiliation", "value": affiliations},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "hasIssuesEnabled": {"type": "Boolean", "value": has_issues_enabled},
            "isArchived": {"type": "Boolean", "value": is_archived},
            "isFork": {"type": "Boolean", "value": is_fork},
            "isLocked": {"type": "Boolean", "value": is_locked},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
            "ownerAffiliations": {
                "type": "RepositoryAffiliation",
                "value": owner_affiliations,
            },
            "privacy": {"type": "RepositoryPrivacy", "value": privacy},
            "visibility": {"type": "RepositoryVisibility", "value": visibility},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields("repositories", arguments=cleared_arguments)

    @classmethod
    def repository(
        cls, name: str, *, follow_renames: Optional[bool] = None
    ) -> "RepositoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "followRenames": {"type": "Boolean", "value": follow_renames},
            "name": {"type": "String!", "value": name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryFields("repository", arguments=cleared_arguments)

    resource_path: "RepositoryOwnerGraphQLField" = RepositoryOwnerGraphQLField(
        "resourcePath"
    )
    url: "RepositoryOwnerGraphQLField" = RepositoryOwnerGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            RepositoryOwnerGraphQLField,
            "RepositoryConnectionFields",
            "RepositoryFields",
        ]
    ) -> "RepositoryOwnerInterface":
        """Subfields should come from the RepositoryOwnerInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryOwnerInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "RepositoryOwnerInterface":
        self._inline_fragments[type_name] = subfields
        return self


class RepositoryPlanFeaturesFields(GraphQLField):
    codeowners: "RepositoryPlanFeaturesGraphQLField" = (
        RepositoryPlanFeaturesGraphQLField("codeowners")
    )
    draft_pull_requests: "RepositoryPlanFeaturesGraphQLField" = (
        RepositoryPlanFeaturesGraphQLField("draftPullRequests")
    )
    maximum_assignees: "RepositoryPlanFeaturesGraphQLField" = (
        RepositoryPlanFeaturesGraphQLField("maximumAssignees")
    )
    maximum_manual_review_requests: "RepositoryPlanFeaturesGraphQLField" = (
        RepositoryPlanFeaturesGraphQLField("maximumManualReviewRequests")
    )
    team_review_requests: "RepositoryPlanFeaturesGraphQLField" = (
        RepositoryPlanFeaturesGraphQLField("teamReviewRequests")
    )

    def fields(
        self, *subfields: RepositoryPlanFeaturesGraphQLField
    ) -> "RepositoryPlanFeaturesFields":
        """Subfields should come from the RepositoryPlanFeaturesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryPlanFeaturesFields":
        self._alias = alias
        return self


class RepositoryPropertyConditionTargetFields(GraphQLField):
    @classmethod
    def exclude(cls) -> "PropertyTargetDefinitionFields":
        return PropertyTargetDefinitionFields("exclude")

    @classmethod
    def include(cls) -> "PropertyTargetDefinitionFields":
        return PropertyTargetDefinitionFields("include")

    def fields(
        self,
        *subfields: Union[
            RepositoryPropertyConditionTargetGraphQLField,
            "PropertyTargetDefinitionFields",
        ]
    ) -> "RepositoryPropertyConditionTargetFields":
        """Subfields should come from the RepositoryPropertyConditionTargetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryPropertyConditionTargetFields":
        self._alias = alias
        return self


class RepositoryRuleFields(GraphQLField):
    id: "RepositoryRuleGraphQLField" = RepositoryRuleGraphQLField("id")
    parameters: "RuleParametersUnion" = RuleParametersUnion("parameters")

    @classmethod
    def repository_ruleset(cls) -> "RepositoryRulesetFields":
        return RepositoryRulesetFields("repository_ruleset")

    type: "RepositoryRuleGraphQLField" = RepositoryRuleGraphQLField("type")

    def fields(
        self,
        *subfields: Union[
            RepositoryRuleGraphQLField, "RepositoryRulesetFields", "RuleParametersUnion"
        ]
    ) -> "RepositoryRuleFields":
        """Subfields should come from the RepositoryRuleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRuleFields":
        self._alias = alias
        return self


class RepositoryRuleConditionsFields(GraphQLField):
    @classmethod
    def ref_name(cls) -> "RefNameConditionTargetFields":
        return RefNameConditionTargetFields("ref_name")

    @classmethod
    def repository_id(cls) -> "RepositoryIdConditionTargetFields":
        return RepositoryIdConditionTargetFields("repository_id")

    @classmethod
    def repository_name(cls) -> "RepositoryNameConditionTargetFields":
        return RepositoryNameConditionTargetFields("repository_name")

    @classmethod
    def repository_property(cls) -> "RepositoryPropertyConditionTargetFields":
        return RepositoryPropertyConditionTargetFields("repository_property")

    def fields(
        self,
        *subfields: Union[
            RepositoryRuleConditionsGraphQLField,
            "RefNameConditionTargetFields",
            "RepositoryIdConditionTargetFields",
            "RepositoryNameConditionTargetFields",
            "RepositoryPropertyConditionTargetFields",
        ]
    ) -> "RepositoryRuleConditionsFields":
        """Subfields should come from the RepositoryRuleConditionsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRuleConditionsFields":
        self._alias = alias
        return self


class RepositoryRuleConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryRuleEdgeFields":
        return RepositoryRuleEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryRuleFields":
        return RepositoryRuleFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryRuleConnectionGraphQLField" = (
        RepositoryRuleConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryRuleConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryRuleEdgeFields",
            "RepositoryRuleFields",
        ]
    ) -> "RepositoryRuleConnectionFields":
        """Subfields should come from the RepositoryRuleConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRuleConnectionFields":
        self._alias = alias
        return self


class RepositoryRuleEdgeFields(GraphQLField):
    cursor: "RepositoryRuleEdgeGraphQLField" = RepositoryRuleEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "RepositoryRuleFields":
        return RepositoryRuleFields("node")

    def fields(
        self, *subfields: Union[RepositoryRuleEdgeGraphQLField, "RepositoryRuleFields"]
    ) -> "RepositoryRuleEdgeFields":
        """Subfields should come from the RepositoryRuleEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRuleEdgeFields":
        self._alias = alias
        return self


class RepositoryRulesetFields(GraphQLField):
    @classmethod
    def bypass_actors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "RepositoryRulesetBypassActorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRulesetBypassActorConnectionFields(
            "bypass_actors", arguments=cleared_arguments
        )

    @classmethod
    def conditions(cls) -> "RepositoryRuleConditionsFields":
        return RepositoryRuleConditionsFields("conditions")

    created_at: "RepositoryRulesetGraphQLField" = RepositoryRulesetGraphQLField(
        "createdAt"
    )
    database_id: "RepositoryRulesetGraphQLField" = RepositoryRulesetGraphQLField(
        "databaseId"
    )
    enforcement: "RepositoryRulesetGraphQLField" = RepositoryRulesetGraphQLField(
        "enforcement"
    )
    id: "RepositoryRulesetGraphQLField" = RepositoryRulesetGraphQLField("id")
    name: "RepositoryRulesetGraphQLField" = RepositoryRulesetGraphQLField("name")

    @classmethod
    def rules(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        type: Optional[RepositoryRuleType] = None
    ) -> "RepositoryRuleConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "type": {"type": "RepositoryRuleType", "value": type},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryRuleConnectionFields("rules", arguments=cleared_arguments)

    source: "RuleSourceUnion" = RuleSourceUnion("source")
    target: "RepositoryRulesetGraphQLField" = RepositoryRulesetGraphQLField("target")
    updated_at: "RepositoryRulesetGraphQLField" = RepositoryRulesetGraphQLField(
        "updatedAt"
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryRulesetGraphQLField,
            "RepositoryRuleConditionsFields",
            "RepositoryRuleConnectionFields",
            "RepositoryRulesetBypassActorConnectionFields",
            "RuleSourceUnion",
        ]
    ) -> "RepositoryRulesetFields":
        """Subfields should come from the RepositoryRulesetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRulesetFields":
        self._alias = alias
        return self


class RepositoryRulesetBypassActorFields(GraphQLField):
    actor: "BypassActorUnion" = BypassActorUnion("actor")
    bypass_mode: "RepositoryRulesetBypassActorGraphQLField" = (
        RepositoryRulesetBypassActorGraphQLField("bypassMode")
    )
    deploy_key: "RepositoryRulesetBypassActorGraphQLField" = (
        RepositoryRulesetBypassActorGraphQLField("deployKey")
    )
    enterprise_owner: "RepositoryRulesetBypassActorGraphQLField" = (
        RepositoryRulesetBypassActorGraphQLField("enterpriseOwner")
    )
    id: "RepositoryRulesetBypassActorGraphQLField" = (
        RepositoryRulesetBypassActorGraphQLField("id")
    )
    organization_admin: "RepositoryRulesetBypassActorGraphQLField" = (
        RepositoryRulesetBypassActorGraphQLField("organizationAdmin")
    )
    repository_role_database_id: "RepositoryRulesetBypassActorGraphQLField" = (
        RepositoryRulesetBypassActorGraphQLField("repositoryRoleDatabaseId")
    )
    repository_role_name: "RepositoryRulesetBypassActorGraphQLField" = (
        RepositoryRulesetBypassActorGraphQLField("repositoryRoleName")
    )

    @classmethod
    def repository_ruleset(cls) -> "RepositoryRulesetFields":
        return RepositoryRulesetFields("repository_ruleset")

    def fields(
        self,
        *subfields: Union[
            RepositoryRulesetBypassActorGraphQLField,
            "BypassActorUnion",
            "RepositoryRulesetFields",
        ]
    ) -> "RepositoryRulesetBypassActorFields":
        """Subfields should come from the RepositoryRulesetBypassActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRulesetBypassActorFields":
        self._alias = alias
        return self


class RepositoryRulesetBypassActorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryRulesetBypassActorEdgeFields":
        return RepositoryRulesetBypassActorEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryRulesetBypassActorFields":
        return RepositoryRulesetBypassActorFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryRulesetBypassActorConnectionGraphQLField" = (
        RepositoryRulesetBypassActorConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryRulesetBypassActorConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryRulesetBypassActorEdgeFields",
            "RepositoryRulesetBypassActorFields",
        ]
    ) -> "RepositoryRulesetBypassActorConnectionFields":
        """Subfields should come from the RepositoryRulesetBypassActorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRulesetBypassActorConnectionFields":
        self._alias = alias
        return self


class RepositoryRulesetBypassActorEdgeFields(GraphQLField):
    cursor: "RepositoryRulesetBypassActorEdgeGraphQLField" = (
        RepositoryRulesetBypassActorEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "RepositoryRulesetBypassActorFields":
        return RepositoryRulesetBypassActorFields("node")

    def fields(
        self,
        *subfields: Union[
            RepositoryRulesetBypassActorEdgeGraphQLField,
            "RepositoryRulesetBypassActorFields",
        ]
    ) -> "RepositoryRulesetBypassActorEdgeFields":
        """Subfields should come from the RepositoryRulesetBypassActorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRulesetBypassActorEdgeFields":
        self._alias = alias
        return self


class RepositoryRulesetConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryRulesetEdgeFields":
        return RepositoryRulesetEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryRulesetFields":
        return RepositoryRulesetFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryRulesetConnectionGraphQLField" = (
        RepositoryRulesetConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryRulesetConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryRulesetEdgeFields",
            "RepositoryRulesetFields",
        ]
    ) -> "RepositoryRulesetConnectionFields":
        """Subfields should come from the RepositoryRulesetConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRulesetConnectionFields":
        self._alias = alias
        return self


class RepositoryRulesetEdgeFields(GraphQLField):
    cursor: "RepositoryRulesetEdgeGraphQLField" = RepositoryRulesetEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "RepositoryRulesetFields":
        return RepositoryRulesetFields("node")

    def fields(
        self,
        *subfields: Union[RepositoryRulesetEdgeGraphQLField, "RepositoryRulesetFields"]
    ) -> "RepositoryRulesetEdgeFields":
        """Subfields should come from the RepositoryRulesetEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryRulesetEdgeFields":
        self._alias = alias
        return self


class RepositoryTopicFields(GraphQLField):
    id: "RepositoryTopicGraphQLField" = RepositoryTopicGraphQLField("id")
    resource_path: "RepositoryTopicGraphQLField" = RepositoryTopicGraphQLField(
        "resourcePath"
    )

    @classmethod
    def topic(cls) -> "TopicFields":
        return TopicFields("topic")

    url: "RepositoryTopicGraphQLField" = RepositoryTopicGraphQLField("url")

    def fields(
        self, *subfields: Union[RepositoryTopicGraphQLField, "TopicFields"]
    ) -> "RepositoryTopicFields":
        """Subfields should come from the RepositoryTopicFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryTopicFields":
        self._alias = alias
        return self


class RepositoryTopicConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryTopicEdgeFields":
        return RepositoryTopicEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryTopicFields":
        return RepositoryTopicFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryTopicConnectionGraphQLField" = (
        RepositoryTopicConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryTopicConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryTopicEdgeFields",
            "RepositoryTopicFields",
        ]
    ) -> "RepositoryTopicConnectionFields":
        """Subfields should come from the RepositoryTopicConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryTopicConnectionFields":
        self._alias = alias
        return self


class RepositoryTopicEdgeFields(GraphQLField):
    cursor: "RepositoryTopicEdgeGraphQLField" = RepositoryTopicEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "RepositoryTopicFields":
        return RepositoryTopicFields("node")

    def fields(
        self,
        *subfields: Union[RepositoryTopicEdgeGraphQLField, "RepositoryTopicFields"]
    ) -> "RepositoryTopicEdgeFields":
        """Subfields should come from the RepositoryTopicEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryTopicEdgeFields":
        self._alias = alias
        return self


class RepositoryVisibilityChangeDisableAuditEntryFields(GraphQLField):
    action: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("createdAt")
    )
    enterprise_resource_path: (
        "RepositoryVisibilityChangeDisableAuditEntryGraphQLField"
    ) = RepositoryVisibilityChangeDisableAuditEntryGraphQLField(
        "enterpriseResourcePath"
    )
    enterprise_slug: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("enterpriseSlug")
    )
    enterprise_url: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("enterpriseUrl")
    )
    id: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("id")
    )
    operation_type: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepositoryVisibilityChangeDisableAuditEntryGraphQLField"
    ) = RepositoryVisibilityChangeDisableAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepositoryVisibilityChangeDisableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeDisableAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryVisibilityChangeDisableAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "RepositoryVisibilityChangeDisableAuditEntryFields":
        """Subfields should come from the RepositoryVisibilityChangeDisableAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryVisibilityChangeDisableAuditEntryFields":
        self._alias = alias
        return self


class RepositoryVisibilityChangeEnableAuditEntryFields(GraphQLField):
    action: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("actorUrl")
    )
    created_at: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("createdAt")
    )
    enterprise_resource_path: (
        "RepositoryVisibilityChangeEnableAuditEntryGraphQLField"
    ) = RepositoryVisibilityChangeEnableAuditEntryGraphQLField("enterpriseResourcePath")
    enterprise_slug: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("enterpriseSlug")
    )
    enterprise_url: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("enterpriseUrl")
    )
    id: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("id")
    )
    operation_type: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: (
        "RepositoryVisibilityChangeEnableAuditEntryGraphQLField"
    ) = RepositoryVisibilityChangeEnableAuditEntryGraphQLField(
        "organizationResourcePath"
    )
    organization_url: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "RepositoryVisibilityChangeEnableAuditEntryGraphQLField" = (
        RepositoryVisibilityChangeEnableAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryVisibilityChangeEnableAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "UserFields",
        ]
    ) -> "RepositoryVisibilityChangeEnableAuditEntryFields":
        """Subfields should come from the RepositoryVisibilityChangeEnableAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryVisibilityChangeEnableAuditEntryFields":
        self._alias = alias
        return self


class RepositoryVulnerabilityAlertFields(GraphQLField):
    auto_dismissed_at: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("autoDismissedAt")
    )
    created_at: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("createdAt")
    )

    @classmethod
    def dependabot_update(cls) -> "DependabotUpdateFields":
        return DependabotUpdateFields("dependabot_update")

    dependency_relationship: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("dependencyRelationship")
    )
    dependency_scope: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("dependencyScope")
    )
    dismiss_comment: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("dismissComment")
    )
    dismiss_reason: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("dismissReason")
    )
    dismissed_at: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("dismissedAt")
    )

    @classmethod
    def dismisser(cls) -> "UserFields":
        return UserFields("dismisser")

    fixed_at: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("fixedAt")
    )
    id: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("id")
    )
    number: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("number")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    @classmethod
    def security_advisory(cls) -> "SecurityAdvisoryFields":
        return SecurityAdvisoryFields("security_advisory")

    @classmethod
    def security_vulnerability(cls) -> "SecurityVulnerabilityFields":
        return SecurityVulnerabilityFields("security_vulnerability")

    state: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("state")
    )
    vulnerable_manifest_filename: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("vulnerableManifestFilename")
    )
    vulnerable_manifest_path: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("vulnerableManifestPath")
    )
    vulnerable_requirements: "RepositoryVulnerabilityAlertGraphQLField" = (
        RepositoryVulnerabilityAlertGraphQLField("vulnerableRequirements")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryVulnerabilityAlertGraphQLField,
            "DependabotUpdateFields",
            "RepositoryFields",
            "SecurityAdvisoryFields",
            "SecurityVulnerabilityFields",
            "UserFields",
        ]
    ) -> "RepositoryVulnerabilityAlertFields":
        """Subfields should come from the RepositoryVulnerabilityAlertFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryVulnerabilityAlertFields":
        self._alias = alias
        return self


class RepositoryVulnerabilityAlertConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RepositoryVulnerabilityAlertEdgeFields":
        return RepositoryVulnerabilityAlertEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryVulnerabilityAlertFields":
        return RepositoryVulnerabilityAlertFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RepositoryVulnerabilityAlertConnectionGraphQLField" = (
        RepositoryVulnerabilityAlertConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RepositoryVulnerabilityAlertConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryVulnerabilityAlertEdgeFields",
            "RepositoryVulnerabilityAlertFields",
        ]
    ) -> "RepositoryVulnerabilityAlertConnectionFields":
        """Subfields should come from the RepositoryVulnerabilityAlertConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryVulnerabilityAlertConnectionFields":
        self._alias = alias
        return self


class RepositoryVulnerabilityAlertEdgeFields(GraphQLField):
    cursor: "RepositoryVulnerabilityAlertEdgeGraphQLField" = (
        RepositoryVulnerabilityAlertEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "RepositoryVulnerabilityAlertFields":
        return RepositoryVulnerabilityAlertFields("node")

    def fields(
        self,
        *subfields: Union[
            RepositoryVulnerabilityAlertEdgeGraphQLField,
            "RepositoryVulnerabilityAlertFields",
        ]
    ) -> "RepositoryVulnerabilityAlertEdgeFields":
        """Subfields should come from the RepositoryVulnerabilityAlertEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryVulnerabilityAlertEdgeFields":
        self._alias = alias
        return self


class ReprioritizeSubIssuePayloadFields(GraphQLField):
    client_mutation_id: "ReprioritizeSubIssuePayloadGraphQLField" = (
        ReprioritizeSubIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[ReprioritizeSubIssuePayloadGraphQLField, "IssueFields"]
    ) -> "ReprioritizeSubIssuePayloadFields":
        """Subfields should come from the ReprioritizeSubIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReprioritizeSubIssuePayloadFields":
        self._alias = alias
        return self


class RequestReviewsPayloadFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    client_mutation_id: "RequestReviewsPayloadGraphQLField" = (
        RequestReviewsPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def requested_reviewers_edge(cls) -> "UserEdgeFields":
        return UserEdgeFields("requested_reviewers_edge")

    def fields(
        self,
        *subfields: Union[
            RequestReviewsPayloadGraphQLField,
            "ActorInterface",
            "PullRequestFields",
            "UserEdgeFields",
        ]
    ) -> "RequestReviewsPayloadFields":
        """Subfields should come from the RequestReviewsPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RequestReviewsPayloadFields":
        self._alias = alias
        return self


class RequestedReviewerConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RequestedReviewerEdgeFields":
        return RequestedReviewerEdgeFields("edges")

    nodes: "RequestedReviewerUnion" = RequestedReviewerUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "RequestedReviewerConnectionGraphQLField" = (
        RequestedReviewerConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            RequestedReviewerConnectionGraphQLField,
            "PageInfoFields",
            "RequestedReviewerEdgeFields",
            "RequestedReviewerUnion",
        ]
    ) -> "RequestedReviewerConnectionFields":
        """Subfields should come from the RequestedReviewerConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RequestedReviewerConnectionFields":
        self._alias = alias
        return self


class RequestedReviewerEdgeFields(GraphQLField):
    cursor: "RequestedReviewerEdgeGraphQLField" = RequestedReviewerEdgeGraphQLField(
        "cursor"
    )
    node: "RequestedReviewerUnion" = RequestedReviewerUnion("node")

    def fields(
        self,
        *subfields: Union[RequestedReviewerEdgeGraphQLField, "RequestedReviewerUnion"]
    ) -> "RequestedReviewerEdgeFields":
        """Subfields should come from the RequestedReviewerEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RequestedReviewerEdgeFields":
        self._alias = alias
        return self


class RequirableByPullRequestInterface(GraphQLField):
    @classmethod
    def is_required(
        cls,
        *,
        pull_request_id: Optional[str] = None,
        pull_request_number: Optional[int] = None
    ) -> "RequirableByPullRequestGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "pullRequestId": {"type": "ID", "value": pull_request_id},
            "pullRequestNumber": {"type": "Int", "value": pull_request_number},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RequirableByPullRequestGraphQLField(
            "is_required", arguments=cleared_arguments
        )

    def fields(
        self, *subfields: RequirableByPullRequestGraphQLField
    ) -> "RequirableByPullRequestInterface":
        """Subfields should come from the RequirableByPullRequestInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RequirableByPullRequestInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "RequirableByPullRequestInterface":
        self._inline_fragments[type_name] = subfields
        return self


class RequiredDeploymentsParametersFields(GraphQLField):
    required_deployment_environments: "RequiredDeploymentsParametersGraphQLField" = (
        RequiredDeploymentsParametersGraphQLField("requiredDeploymentEnvironments")
    )

    def fields(
        self, *subfields: RequiredDeploymentsParametersGraphQLField
    ) -> "RequiredDeploymentsParametersFields":
        """Subfields should come from the RequiredDeploymentsParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RequiredDeploymentsParametersFields":
        self._alias = alias
        return self


class RequiredStatusCheckDescriptionFields(GraphQLField):
    @classmethod
    def app(cls) -> "AppFields":
        return AppFields("app")

    context: "RequiredStatusCheckDescriptionGraphQLField" = (
        RequiredStatusCheckDescriptionGraphQLField("context")
    )

    def fields(
        self, *subfields: Union[RequiredStatusCheckDescriptionGraphQLField, "AppFields"]
    ) -> "RequiredStatusCheckDescriptionFields":
        """Subfields should come from the RequiredStatusCheckDescriptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RequiredStatusCheckDescriptionFields":
        self._alias = alias
        return self


class RequiredStatusChecksParametersFields(GraphQLField):
    do_not_enforce_on_create: "RequiredStatusChecksParametersGraphQLField" = (
        RequiredStatusChecksParametersGraphQLField("doNotEnforceOnCreate")
    )

    @classmethod
    def required_status_checks(cls) -> "StatusCheckConfigurationFields":
        return StatusCheckConfigurationFields("required_status_checks")

    strict_required_status_checks_policy: (
        "RequiredStatusChecksParametersGraphQLField"
    ) = RequiredStatusChecksParametersGraphQLField("strictRequiredStatusChecksPolicy")

    def fields(
        self,
        *subfields: Union[
            RequiredStatusChecksParametersGraphQLField, "StatusCheckConfigurationFields"
        ]
    ) -> "RequiredStatusChecksParametersFields":
        """Subfields should come from the RequiredStatusChecksParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RequiredStatusChecksParametersFields":
        self._alias = alias
        return self


class RerequestCheckSuitePayloadFields(GraphQLField):
    @classmethod
    def check_suite(cls) -> "CheckSuiteFields":
        return CheckSuiteFields("check_suite")

    client_mutation_id: "RerequestCheckSuitePayloadGraphQLField" = (
        RerequestCheckSuitePayloadGraphQLField("clientMutationId")
    )

    def fields(
        self,
        *subfields: Union[RerequestCheckSuitePayloadGraphQLField, "CheckSuiteFields"]
    ) -> "RerequestCheckSuitePayloadFields":
        """Subfields should come from the RerequestCheckSuitePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RerequestCheckSuitePayloadFields":
        self._alias = alias
        return self


class ResolveReviewThreadPayloadFields(GraphQLField):
    client_mutation_id: "ResolveReviewThreadPayloadGraphQLField" = (
        ResolveReviewThreadPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def thread(cls) -> "PullRequestReviewThreadFields":
        return PullRequestReviewThreadFields("thread")

    def fields(
        self,
        *subfields: Union[
            ResolveReviewThreadPayloadGraphQLField, "PullRequestReviewThreadFields"
        ]
    ) -> "ResolveReviewThreadPayloadFields":
        """Subfields should come from the ResolveReviewThreadPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ResolveReviewThreadPayloadFields":
        self._alias = alias
        return self


class RestrictedContributionFields(GraphQLField):
    is_restricted: "RestrictedContributionGraphQLField" = (
        RestrictedContributionGraphQLField("isRestricted")
    )
    occurred_at: "RestrictedContributionGraphQLField" = (
        RestrictedContributionGraphQLField("occurredAt")
    )
    resource_path: "RestrictedContributionGraphQLField" = (
        RestrictedContributionGraphQLField("resourcePath")
    )
    url: "RestrictedContributionGraphQLField" = RestrictedContributionGraphQLField(
        "url"
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[RestrictedContributionGraphQLField, "UserFields"]
    ) -> "RestrictedContributionFields":
        """Subfields should come from the RestrictedContributionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RestrictedContributionFields":
        self._alias = alias
        return self


class RetireSponsorsTierPayloadFields(GraphQLField):
    client_mutation_id: "RetireSponsorsTierPayloadGraphQLField" = (
        RetireSponsorsTierPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsors_tier(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("sponsors_tier")

    def fields(
        self,
        *subfields: Union[RetireSponsorsTierPayloadGraphQLField, "SponsorsTierFields"]
    ) -> "RetireSponsorsTierPayloadFields":
        """Subfields should come from the RetireSponsorsTierPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RetireSponsorsTierPayloadFields":
        self._alias = alias
        return self


class RevertPullRequestPayloadFields(GraphQLField):
    client_mutation_id: "RevertPullRequestPayloadGraphQLField" = (
        RevertPullRequestPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def revert_pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("revert_pull_request")

    def fields(
        self,
        *subfields: Union[RevertPullRequestPayloadGraphQLField, "PullRequestFields"]
    ) -> "RevertPullRequestPayloadFields":
        """Subfields should come from the RevertPullRequestPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RevertPullRequestPayloadFields":
        self._alias = alias
        return self


class ReviewDismissalAllowanceFields(GraphQLField):
    actor: "ReviewDismissalAllowanceActorUnion" = ReviewDismissalAllowanceActorUnion(
        "actor"
    )

    @classmethod
    def branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("branch_protection_rule")

    id: "ReviewDismissalAllowanceGraphQLField" = ReviewDismissalAllowanceGraphQLField(
        "id"
    )

    def fields(
        self,
        *subfields: Union[
            ReviewDismissalAllowanceGraphQLField,
            "BranchProtectionRuleFields",
            "ReviewDismissalAllowanceActorUnion",
        ]
    ) -> "ReviewDismissalAllowanceFields":
        """Subfields should come from the ReviewDismissalAllowanceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewDismissalAllowanceFields":
        self._alias = alias
        return self


class ReviewDismissalAllowanceConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ReviewDismissalAllowanceEdgeFields":
        return ReviewDismissalAllowanceEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ReviewDismissalAllowanceFields":
        return ReviewDismissalAllowanceFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ReviewDismissalAllowanceConnectionGraphQLField" = (
        ReviewDismissalAllowanceConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ReviewDismissalAllowanceConnectionGraphQLField,
            "PageInfoFields",
            "ReviewDismissalAllowanceEdgeFields",
            "ReviewDismissalAllowanceFields",
        ]
    ) -> "ReviewDismissalAllowanceConnectionFields":
        """Subfields should come from the ReviewDismissalAllowanceConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewDismissalAllowanceConnectionFields":
        self._alias = alias
        return self


class ReviewDismissalAllowanceEdgeFields(GraphQLField):
    cursor: "ReviewDismissalAllowanceEdgeGraphQLField" = (
        ReviewDismissalAllowanceEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "ReviewDismissalAllowanceFields":
        return ReviewDismissalAllowanceFields("node")

    def fields(
        self,
        *subfields: Union[
            ReviewDismissalAllowanceEdgeGraphQLField, "ReviewDismissalAllowanceFields"
        ]
    ) -> "ReviewDismissalAllowanceEdgeFields":
        """Subfields should come from the ReviewDismissalAllowanceEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewDismissalAllowanceEdgeFields":
        self._alias = alias
        return self


class ReviewDismissedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ReviewDismissedEventGraphQLField" = ReviewDismissedEventGraphQLField(
        "createdAt"
    )
    database_id: "ReviewDismissedEventGraphQLField" = ReviewDismissedEventGraphQLField(
        "databaseId"
    )
    dismissal_message: "ReviewDismissedEventGraphQLField" = (
        ReviewDismissedEventGraphQLField("dismissalMessage")
    )
    dismissal_message_html: "ReviewDismissedEventGraphQLField" = (
        ReviewDismissedEventGraphQLField("dismissalMessageHTML")
    )
    id: "ReviewDismissedEventGraphQLField" = ReviewDismissedEventGraphQLField("id")
    previous_review_state: "ReviewDismissedEventGraphQLField" = (
        ReviewDismissedEventGraphQLField("previousReviewState")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    @classmethod
    def pull_request_commit(cls) -> "PullRequestCommitFields":
        return PullRequestCommitFields("pull_request_commit")

    resource_path: "ReviewDismissedEventGraphQLField" = (
        ReviewDismissedEventGraphQLField("resourcePath")
    )

    @classmethod
    def review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("review")

    url: "ReviewDismissedEventGraphQLField" = ReviewDismissedEventGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            ReviewDismissedEventGraphQLField,
            "ActorInterface",
            "PullRequestCommitFields",
            "PullRequestFields",
            "PullRequestReviewFields",
        ]
    ) -> "ReviewDismissedEventFields":
        """Subfields should come from the ReviewDismissedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewDismissedEventFields":
        self._alias = alias
        return self


class ReviewRequestFields(GraphQLField):
    as_code_owner: "ReviewRequestGraphQLField" = ReviewRequestGraphQLField(
        "asCodeOwner"
    )
    database_id: "ReviewRequestGraphQLField" = ReviewRequestGraphQLField("databaseId")
    id: "ReviewRequestGraphQLField" = ReviewRequestGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    requested_reviewer: "RequestedReviewerUnion" = RequestedReviewerUnion(
        "requestedReviewer"
    )

    def fields(
        self,
        *subfields: Union[
            ReviewRequestGraphQLField, "PullRequestFields", "RequestedReviewerUnion"
        ]
    ) -> "ReviewRequestFields":
        """Subfields should come from the ReviewRequestFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewRequestFields":
        self._alias = alias
        return self


class ReviewRequestConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ReviewRequestEdgeFields":
        return ReviewRequestEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "ReviewRequestFields":
        return ReviewRequestFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ReviewRequestConnectionGraphQLField" = (
        ReviewRequestConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ReviewRequestConnectionGraphQLField,
            "PageInfoFields",
            "ReviewRequestEdgeFields",
            "ReviewRequestFields",
        ]
    ) -> "ReviewRequestConnectionFields":
        """Subfields should come from the ReviewRequestConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewRequestConnectionFields":
        self._alias = alias
        return self


class ReviewRequestEdgeFields(GraphQLField):
    cursor: "ReviewRequestEdgeGraphQLField" = ReviewRequestEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ReviewRequestFields":
        return ReviewRequestFields("node")

    def fields(
        self, *subfields: Union[ReviewRequestEdgeGraphQLField, "ReviewRequestFields"]
    ) -> "ReviewRequestEdgeFields":
        """Subfields should come from the ReviewRequestEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewRequestEdgeFields":
        self._alias = alias
        return self


class ReviewRequestRemovedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ReviewRequestRemovedEventGraphQLField" = (
        ReviewRequestRemovedEventGraphQLField("createdAt")
    )
    id: "ReviewRequestRemovedEventGraphQLField" = ReviewRequestRemovedEventGraphQLField(
        "id"
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    requested_reviewer: "RequestedReviewerUnion" = RequestedReviewerUnion(
        "requestedReviewer"
    )

    def fields(
        self,
        *subfields: Union[
            ReviewRequestRemovedEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
            "RequestedReviewerUnion",
        ]
    ) -> "ReviewRequestRemovedEventFields":
        """Subfields should come from the ReviewRequestRemovedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewRequestRemovedEventFields":
        self._alias = alias
        return self


class ReviewRequestedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "ReviewRequestedEventGraphQLField" = ReviewRequestedEventGraphQLField(
        "createdAt"
    )
    id: "ReviewRequestedEventGraphQLField" = ReviewRequestedEventGraphQLField("id")

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    requested_reviewer: "RequestedReviewerUnion" = RequestedReviewerUnion(
        "requestedReviewer"
    )

    def fields(
        self,
        *subfields: Union[
            ReviewRequestedEventGraphQLField,
            "ActorInterface",
            "PullRequestFields",
            "RequestedReviewerUnion",
        ]
    ) -> "ReviewRequestedEventFields":
        """Subfields should come from the ReviewRequestedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReviewRequestedEventFields":
        self._alias = alias
        return self


class RevokeEnterpriseOrganizationsMigratorRolePayloadFields(GraphQLField):
    client_mutation_id: (
        "RevokeEnterpriseOrganizationsMigratorRolePayloadGraphQLField"
    ) = RevokeEnterpriseOrganizationsMigratorRolePayloadGraphQLField("clientMutationId")

    @classmethod
    def organizations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "organizations", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            RevokeEnterpriseOrganizationsMigratorRolePayloadGraphQLField,
            "OrganizationConnectionFields",
        ]
    ) -> "RevokeEnterpriseOrganizationsMigratorRolePayloadFields":
        """Subfields should come from the RevokeEnterpriseOrganizationsMigratorRolePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "RevokeEnterpriseOrganizationsMigratorRolePayloadFields":
        self._alias = alias
        return self


class RevokeMigratorRolePayloadFields(GraphQLField):
    client_mutation_id: "RevokeMigratorRolePayloadGraphQLField" = (
        RevokeMigratorRolePayloadGraphQLField("clientMutationId")
    )
    success: "RevokeMigratorRolePayloadGraphQLField" = (
        RevokeMigratorRolePayloadGraphQLField("success")
    )

    def fields(
        self, *subfields: RevokeMigratorRolePayloadGraphQLField
    ) -> "RevokeMigratorRolePayloadFields":
        """Subfields should come from the RevokeMigratorRolePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RevokeMigratorRolePayloadFields":
        self._alias = alias
        return self


class SavedReplyFields(GraphQLField):
    body: "SavedReplyGraphQLField" = SavedReplyGraphQLField("body")
    body_html: "SavedReplyGraphQLField" = SavedReplyGraphQLField("bodyHTML")
    database_id: "SavedReplyGraphQLField" = SavedReplyGraphQLField("databaseId")
    id: "SavedReplyGraphQLField" = SavedReplyGraphQLField("id")
    title: "SavedReplyGraphQLField" = SavedReplyGraphQLField("title")

    @classmethod
    def user(cls) -> "ActorInterface":
        return ActorInterface("user")

    def fields(
        self, *subfields: Union[SavedReplyGraphQLField, "ActorInterface"]
    ) -> "SavedReplyFields":
        """Subfields should come from the SavedReplyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedReplyFields":
        self._alias = alias
        return self


class SavedReplyConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SavedReplyEdgeFields":
        return SavedReplyEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SavedReplyFields":
        return SavedReplyFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SavedReplyConnectionGraphQLField" = SavedReplyConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            SavedReplyConnectionGraphQLField,
            "PageInfoFields",
            "SavedReplyEdgeFields",
            "SavedReplyFields",
        ]
    ) -> "SavedReplyConnectionFields":
        """Subfields should come from the SavedReplyConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedReplyConnectionFields":
        self._alias = alias
        return self


class SavedReplyEdgeFields(GraphQLField):
    cursor: "SavedReplyEdgeGraphQLField" = SavedReplyEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "SavedReplyFields":
        return SavedReplyFields("node")

    def fields(
        self, *subfields: Union[SavedReplyEdgeGraphQLField, "SavedReplyFields"]
    ) -> "SavedReplyEdgeFields":
        """Subfields should come from the SavedReplyEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedReplyEdgeFields":
        self._alias = alias
        return self


class SearchResultItemConnectionFields(GraphQLField):
    code_count: "SearchResultItemConnectionGraphQLField" = (
        SearchResultItemConnectionGraphQLField("codeCount")
    )
    discussion_count: "SearchResultItemConnectionGraphQLField" = (
        SearchResultItemConnectionGraphQLField("discussionCount")
    )

    @classmethod
    def edges(cls) -> "SearchResultItemEdgeFields":
        return SearchResultItemEdgeFields("edges")

    issue_count: "SearchResultItemConnectionGraphQLField" = (
        SearchResultItemConnectionGraphQLField("issueCount")
    )
    nodes: "SearchResultItemUnion" = SearchResultItemUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    repository_count: "SearchResultItemConnectionGraphQLField" = (
        SearchResultItemConnectionGraphQLField("repositoryCount")
    )
    user_count: "SearchResultItemConnectionGraphQLField" = (
        SearchResultItemConnectionGraphQLField("userCount")
    )
    wiki_count: "SearchResultItemConnectionGraphQLField" = (
        SearchResultItemConnectionGraphQLField("wikiCount")
    )

    def fields(
        self,
        *subfields: Union[
            SearchResultItemConnectionGraphQLField,
            "PageInfoFields",
            "SearchResultItemEdgeFields",
            "SearchResultItemUnion",
        ]
    ) -> "SearchResultItemConnectionFields":
        """Subfields should come from the SearchResultItemConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SearchResultItemConnectionFields":
        self._alias = alias
        return self


class SearchResultItemEdgeFields(GraphQLField):
    cursor: "SearchResultItemEdgeGraphQLField" = SearchResultItemEdgeGraphQLField(
        "cursor"
    )
    node: "SearchResultItemUnion" = SearchResultItemUnion("node")

    @classmethod
    def text_matches(cls) -> "TextMatchFields":
        return TextMatchFields("text_matches")

    def fields(
        self,
        *subfields: Union[
            SearchResultItemEdgeGraphQLField, "SearchResultItemUnion", "TextMatchFields"
        ]
    ) -> "SearchResultItemEdgeFields":
        """Subfields should come from the SearchResultItemEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SearchResultItemEdgeFields":
        self._alias = alias
        return self


class SecurityAdvisoryFields(GraphQLField):
    classification: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField(
        "classification"
    )

    @classmethod
    def cvss(cls) -> "CVSSFields":
        return CVSSFields("cvss")

    @classmethod
    def cvss_severities(cls) -> "CvssSeveritiesFields":
        return CvssSeveritiesFields("cvss_severities")

    @classmethod
    def cwes(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CWEConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CWEConnectionFields("cwes", arguments=cleared_arguments)

    database_id: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField(
        "databaseId"
    )
    description: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField(
        "description"
    )

    @classmethod
    def epss(cls) -> "EPSSFields":
        return EPSSFields("epss")

    ghsa_id: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField("ghsaId")
    id: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField("id")

    @classmethod
    def identifiers(cls) -> "SecurityAdvisoryIdentifierFields":
        return SecurityAdvisoryIdentifierFields("identifiers")

    notifications_permalink: "SecurityAdvisoryGraphQLField" = (
        SecurityAdvisoryGraphQLField("notificationsPermalink")
    )
    origin: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField("origin")
    permalink: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField(
        "permalink"
    )
    published_at: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField(
        "publishedAt"
    )

    @classmethod
    def references(cls) -> "SecurityAdvisoryReferenceFields":
        return SecurityAdvisoryReferenceFields("references")

    severity: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField("severity")
    summary: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField("summary")
    updated_at: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField(
        "updatedAt"
    )

    @classmethod
    def vulnerabilities(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        classifications: Optional[SecurityAdvisoryClassification] = None,
        ecosystem: Optional[SecurityAdvisoryEcosystem] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SecurityVulnerabilityOrder] = None,
        package: Optional[str] = None,
        severities: Optional[SecurityAdvisorySeverity] = None
    ) -> "SecurityVulnerabilityConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "classifications": {
                "type": "SecurityAdvisoryClassification",
                "value": classifications,
            },
            "ecosystem": {"type": "SecurityAdvisoryEcosystem", "value": ecosystem},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SecurityVulnerabilityOrder", "value": order_by},
            "package": {"type": "String", "value": package},
            "severities": {"type": "SecurityAdvisorySeverity", "value": severities},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SecurityVulnerabilityConnectionFields(
            "vulnerabilities", arguments=cleared_arguments
        )

    withdrawn_at: "SecurityAdvisoryGraphQLField" = SecurityAdvisoryGraphQLField(
        "withdrawnAt"
    )

    def fields(
        self,
        *subfields: Union[
            SecurityAdvisoryGraphQLField,
            "CVSSFields",
            "CWEConnectionFields",
            "CvssSeveritiesFields",
            "EPSSFields",
            "SecurityAdvisoryIdentifierFields",
            "SecurityAdvisoryReferenceFields",
            "SecurityVulnerabilityConnectionFields",
        ]
    ) -> "SecurityAdvisoryFields":
        """Subfields should come from the SecurityAdvisoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityAdvisoryFields":
        self._alias = alias
        return self


class SecurityAdvisoryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SecurityAdvisoryEdgeFields":
        return SecurityAdvisoryEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SecurityAdvisoryFields":
        return SecurityAdvisoryFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SecurityAdvisoryConnectionGraphQLField" = (
        SecurityAdvisoryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            SecurityAdvisoryConnectionGraphQLField,
            "PageInfoFields",
            "SecurityAdvisoryEdgeFields",
            "SecurityAdvisoryFields",
        ]
    ) -> "SecurityAdvisoryConnectionFields":
        """Subfields should come from the SecurityAdvisoryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityAdvisoryConnectionFields":
        self._alias = alias
        return self


class SecurityAdvisoryEdgeFields(GraphQLField):
    cursor: "SecurityAdvisoryEdgeGraphQLField" = SecurityAdvisoryEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "SecurityAdvisoryFields":
        return SecurityAdvisoryFields("node")

    def fields(
        self,
        *subfields: Union[SecurityAdvisoryEdgeGraphQLField, "SecurityAdvisoryFields"]
    ) -> "SecurityAdvisoryEdgeFields":
        """Subfields should come from the SecurityAdvisoryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityAdvisoryEdgeFields":
        self._alias = alias
        return self


class SecurityAdvisoryIdentifierFields(GraphQLField):
    type: "SecurityAdvisoryIdentifierGraphQLField" = (
        SecurityAdvisoryIdentifierGraphQLField("type")
    )
    value: "SecurityAdvisoryIdentifierGraphQLField" = (
        SecurityAdvisoryIdentifierGraphQLField("value")
    )

    def fields(
        self, *subfields: SecurityAdvisoryIdentifierGraphQLField
    ) -> "SecurityAdvisoryIdentifierFields":
        """Subfields should come from the SecurityAdvisoryIdentifierFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityAdvisoryIdentifierFields":
        self._alias = alias
        return self


class SecurityAdvisoryPackageFields(GraphQLField):
    ecosystem: "SecurityAdvisoryPackageGraphQLField" = (
        SecurityAdvisoryPackageGraphQLField("ecosystem")
    )
    name: "SecurityAdvisoryPackageGraphQLField" = SecurityAdvisoryPackageGraphQLField(
        "name"
    )

    def fields(
        self, *subfields: SecurityAdvisoryPackageGraphQLField
    ) -> "SecurityAdvisoryPackageFields":
        """Subfields should come from the SecurityAdvisoryPackageFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityAdvisoryPackageFields":
        self._alias = alias
        return self


class SecurityAdvisoryPackageVersionFields(GraphQLField):
    identifier: "SecurityAdvisoryPackageVersionGraphQLField" = (
        SecurityAdvisoryPackageVersionGraphQLField("identifier")
    )

    def fields(
        self, *subfields: SecurityAdvisoryPackageVersionGraphQLField
    ) -> "SecurityAdvisoryPackageVersionFields":
        """Subfields should come from the SecurityAdvisoryPackageVersionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityAdvisoryPackageVersionFields":
        self._alias = alias
        return self


class SecurityAdvisoryReferenceFields(GraphQLField):
    url: "SecurityAdvisoryReferenceGraphQLField" = (
        SecurityAdvisoryReferenceGraphQLField("url")
    )

    def fields(
        self, *subfields: SecurityAdvisoryReferenceGraphQLField
    ) -> "SecurityAdvisoryReferenceFields":
        """Subfields should come from the SecurityAdvisoryReferenceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityAdvisoryReferenceFields":
        self._alias = alias
        return self


class SecurityVulnerabilityFields(GraphQLField):
    @classmethod
    def advisory(cls) -> "SecurityAdvisoryFields":
        return SecurityAdvisoryFields("advisory")

    @classmethod
    def first_patched_version(cls) -> "SecurityAdvisoryPackageVersionFields":
        return SecurityAdvisoryPackageVersionFields("first_patched_version")

    @classmethod
    def package(cls) -> "SecurityAdvisoryPackageFields":
        return SecurityAdvisoryPackageFields("package")

    severity: "SecurityVulnerabilityGraphQLField" = SecurityVulnerabilityGraphQLField(
        "severity"
    )
    updated_at: "SecurityVulnerabilityGraphQLField" = SecurityVulnerabilityGraphQLField(
        "updatedAt"
    )
    vulnerable_version_range: "SecurityVulnerabilityGraphQLField" = (
        SecurityVulnerabilityGraphQLField("vulnerableVersionRange")
    )

    def fields(
        self,
        *subfields: Union[
            SecurityVulnerabilityGraphQLField,
            "SecurityAdvisoryFields",
            "SecurityAdvisoryPackageFields",
            "SecurityAdvisoryPackageVersionFields",
        ]
    ) -> "SecurityVulnerabilityFields":
        """Subfields should come from the SecurityVulnerabilityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityVulnerabilityFields":
        self._alias = alias
        return self


class SecurityVulnerabilityConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SecurityVulnerabilityEdgeFields":
        return SecurityVulnerabilityEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SecurityVulnerabilityFields":
        return SecurityVulnerabilityFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SecurityVulnerabilityConnectionGraphQLField" = (
        SecurityVulnerabilityConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            SecurityVulnerabilityConnectionGraphQLField,
            "PageInfoFields",
            "SecurityVulnerabilityEdgeFields",
            "SecurityVulnerabilityFields",
        ]
    ) -> "SecurityVulnerabilityConnectionFields":
        """Subfields should come from the SecurityVulnerabilityConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityVulnerabilityConnectionFields":
        self._alias = alias
        return self


class SecurityVulnerabilityEdgeFields(GraphQLField):
    cursor: "SecurityVulnerabilityEdgeGraphQLField" = (
        SecurityVulnerabilityEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "SecurityVulnerabilityFields":
        return SecurityVulnerabilityFields("node")

    def fields(
        self,
        *subfields: Union[
            SecurityVulnerabilityEdgeGraphQLField, "SecurityVulnerabilityFields"
        ]
    ) -> "SecurityVulnerabilityEdgeFields":
        """Subfields should come from the SecurityVulnerabilityEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SecurityVulnerabilityEdgeFields":
        self._alias = alias
        return self


class SetEnterpriseIdentityProviderPayloadFields(GraphQLField):
    client_mutation_id: "SetEnterpriseIdentityProviderPayloadGraphQLField" = (
        SetEnterpriseIdentityProviderPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def identity_provider(cls) -> "EnterpriseIdentityProviderFields":
        return EnterpriseIdentityProviderFields("identity_provider")

    def fields(
        self,
        *subfields: Union[
            SetEnterpriseIdentityProviderPayloadGraphQLField,
            "EnterpriseIdentityProviderFields",
        ]
    ) -> "SetEnterpriseIdentityProviderPayloadFields":
        """Subfields should come from the SetEnterpriseIdentityProviderPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetEnterpriseIdentityProviderPayloadFields":
        self._alias = alias
        return self


class SetOrganizationInteractionLimitPayloadFields(GraphQLField):
    client_mutation_id: "SetOrganizationInteractionLimitPayloadGraphQLField" = (
        SetOrganizationInteractionLimitPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    def fields(
        self,
        *subfields: Union[
            SetOrganizationInteractionLimitPayloadGraphQLField, "OrganizationFields"
        ]
    ) -> "SetOrganizationInteractionLimitPayloadFields":
        """Subfields should come from the SetOrganizationInteractionLimitPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetOrganizationInteractionLimitPayloadFields":
        self._alias = alias
        return self


class SetRepositoryInteractionLimitPayloadFields(GraphQLField):
    client_mutation_id: "SetRepositoryInteractionLimitPayloadGraphQLField" = (
        SetRepositoryInteractionLimitPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            SetRepositoryInteractionLimitPayloadGraphQLField, "RepositoryFields"
        ]
    ) -> "SetRepositoryInteractionLimitPayloadFields":
        """Subfields should come from the SetRepositoryInteractionLimitPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetRepositoryInteractionLimitPayloadFields":
        self._alias = alias
        return self


class SetUserInteractionLimitPayloadFields(GraphQLField):
    client_mutation_id: "SetUserInteractionLimitPayloadGraphQLField" = (
        SetUserInteractionLimitPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[SetUserInteractionLimitPayloadGraphQLField, "UserFields"]
    ) -> "SetUserInteractionLimitPayloadFields":
        """Subfields should come from the SetUserInteractionLimitPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetUserInteractionLimitPayloadFields":
        self._alias = alias
        return self


class SocialAccountFields(GraphQLField):
    display_name: "SocialAccountGraphQLField" = SocialAccountGraphQLField("displayName")
    provider: "SocialAccountGraphQLField" = SocialAccountGraphQLField("provider")
    url: "SocialAccountGraphQLField" = SocialAccountGraphQLField("url")

    def fields(self, *subfields: SocialAccountGraphQLField) -> "SocialAccountFields":
        """Subfields should come from the SocialAccountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SocialAccountFields":
        self._alias = alias
        return self


class SocialAccountConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SocialAccountEdgeFields":
        return SocialAccountEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SocialAccountFields":
        return SocialAccountFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SocialAccountConnectionGraphQLField" = (
        SocialAccountConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            SocialAccountConnectionGraphQLField,
            "PageInfoFields",
            "SocialAccountEdgeFields",
            "SocialAccountFields",
        ]
    ) -> "SocialAccountConnectionFields":
        """Subfields should come from the SocialAccountConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SocialAccountConnectionFields":
        self._alias = alias
        return self


class SocialAccountEdgeFields(GraphQLField):
    cursor: "SocialAccountEdgeGraphQLField" = SocialAccountEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "SocialAccountFields":
        return SocialAccountFields("node")

    def fields(
        self, *subfields: Union[SocialAccountEdgeGraphQLField, "SocialAccountFields"]
    ) -> "SocialAccountEdgeFields":
        """Subfields should come from the SocialAccountEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SocialAccountEdgeFields":
        self._alias = alias
        return self


class SponsorAndLifetimeValueFields(GraphQLField):
    amount_in_cents: "SponsorAndLifetimeValueGraphQLField" = (
        SponsorAndLifetimeValueGraphQLField("amountInCents")
    )
    formatted_amount: "SponsorAndLifetimeValueGraphQLField" = (
        SponsorAndLifetimeValueGraphQLField("formattedAmount")
    )

    @classmethod
    def sponsor(cls) -> "SponsorableInterface":
        return SponsorableInterface("sponsor")

    @classmethod
    def sponsorable(cls) -> "SponsorableInterface":
        return SponsorableInterface("sponsorable")

    def fields(
        self,
        *subfields: Union[SponsorAndLifetimeValueGraphQLField, "SponsorableInterface"]
    ) -> "SponsorAndLifetimeValueFields":
        """Subfields should come from the SponsorAndLifetimeValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorAndLifetimeValueFields":
        self._alias = alias
        return self


class SponsorAndLifetimeValueConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SponsorAndLifetimeValueEdgeFields":
        return SponsorAndLifetimeValueEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SponsorAndLifetimeValueFields":
        return SponsorAndLifetimeValueFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SponsorAndLifetimeValueConnectionGraphQLField" = (
        SponsorAndLifetimeValueConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            SponsorAndLifetimeValueConnectionGraphQLField,
            "PageInfoFields",
            "SponsorAndLifetimeValueEdgeFields",
            "SponsorAndLifetimeValueFields",
        ]
    ) -> "SponsorAndLifetimeValueConnectionFields":
        """Subfields should come from the SponsorAndLifetimeValueConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorAndLifetimeValueConnectionFields":
        self._alias = alias
        return self


class SponsorAndLifetimeValueEdgeFields(GraphQLField):
    cursor: "SponsorAndLifetimeValueEdgeGraphQLField" = (
        SponsorAndLifetimeValueEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "SponsorAndLifetimeValueFields":
        return SponsorAndLifetimeValueFields("node")

    def fields(
        self,
        *subfields: Union[
            SponsorAndLifetimeValueEdgeGraphQLField, "SponsorAndLifetimeValueFields"
        ]
    ) -> "SponsorAndLifetimeValueEdgeFields":
        """Subfields should come from the SponsorAndLifetimeValueEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorAndLifetimeValueEdgeFields":
        self._alias = alias
        return self


class SponsorConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SponsorEdgeFields":
        return SponsorEdgeFields("edges")

    nodes: "SponsorUnion" = SponsorUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SponsorConnectionGraphQLField" = SponsorConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            SponsorConnectionGraphQLField,
            "PageInfoFields",
            "SponsorEdgeFields",
            "SponsorUnion",
        ]
    ) -> "SponsorConnectionFields":
        """Subfields should come from the SponsorConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorConnectionFields":
        self._alias = alias
        return self


class SponsorEdgeFields(GraphQLField):
    cursor: "SponsorEdgeGraphQLField" = SponsorEdgeGraphQLField("cursor")
    node: "SponsorUnion" = SponsorUnion("node")

    def fields(
        self, *subfields: Union[SponsorEdgeGraphQLField, "SponsorUnion"]
    ) -> "SponsorEdgeFields":
        """Subfields should come from the SponsorEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorEdgeFields":
        self._alias = alias
        return self


class SponsorableInterface(GraphQLField):
    estimated_next_sponsors_payout_in_cents: "SponsorableGraphQLField" = (
        SponsorableGraphQLField("estimatedNextSponsorsPayoutInCents")
    )
    has_sponsors_listing: "SponsorableGraphQLField" = SponsorableGraphQLField(
        "hasSponsorsListing"
    )

    @classmethod
    def is_sponsored_by(cls, account_login: str) -> "SponsorableGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "accountLogin": {"type": "String!", "value": account_login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorableGraphQLField("is_sponsored_by", arguments=cleared_arguments)

    is_sponsoring_viewer: "SponsorableGraphQLField" = SponsorableGraphQLField(
        "isSponsoringViewer"
    )

    @classmethod
    def lifetime_received_sponsorship_values(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorAndLifetimeValueOrder] = None
    ) -> "SponsorAndLifetimeValueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorAndLifetimeValueOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorAndLifetimeValueConnectionFields(
            "lifetime_received_sponsorship_values", arguments=cleared_arguments
        )

    monthly_estimated_sponsors_income_in_cents: "SponsorableGraphQLField" = (
        SponsorableGraphQLField("monthlyEstimatedSponsorsIncomeInCents")
    )

    @classmethod
    def sponsoring(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorOrder] = None
    ) -> "SponsorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorConnectionFields("sponsoring", arguments=cleared_arguments)

    @classmethod
    def sponsors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorOrder] = None,
        tier_id: Optional[str] = None
    ) -> "SponsorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorOrder", "value": order_by},
            "tierId": {"type": "ID", "value": tier_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorConnectionFields("sponsors", arguments=cleared_arguments)

    @classmethod
    def sponsors_activities(
        cls,
        *,
        actions: Optional[SponsorsActivityAction] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_as_sponsor: Optional[bool] = None,
        include_private: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorsActivityOrder] = None,
        period: Optional[SponsorsActivityPeriod] = None,
        since: Optional[Any] = None,
        until: Optional[Any] = None
    ) -> "SponsorsActivityConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "actions": {"type": "SponsorsActivityAction", "value": actions},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeAsSponsor": {"type": "Boolean", "value": include_as_sponsor},
            "includePrivate": {"type": "Boolean", "value": include_private},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorsActivityOrder", "value": order_by},
            "period": {"type": "SponsorsActivityPeriod", "value": period},
            "since": {"type": "DateTime", "value": since},
            "until": {"type": "DateTime", "value": until},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorsActivityConnectionFields(
            "sponsors_activities", arguments=cleared_arguments
        )

    @classmethod
    def sponsors_listing(cls) -> "SponsorsListingFields":
        return SponsorsListingFields("sponsors_listing")

    @classmethod
    def sponsorship_for_viewer_as_sponsor(
        cls, *, active_only: Optional[bool] = None
    ) -> "SponsorshipFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipFields(
            "sponsorship_for_viewer_as_sponsor", arguments=cleared_arguments
        )

    @classmethod
    def sponsorship_for_viewer_as_sponsorable(
        cls, *, active_only: Optional[bool] = None
    ) -> "SponsorshipFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipFields(
            "sponsorship_for_viewer_as_sponsorable", arguments=cleared_arguments
        )

    @classmethod
    def sponsorship_newsletters(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorshipNewsletterOrder] = None
    ) -> "SponsorshipNewsletterConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorshipNewsletterOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipNewsletterConnectionFields(
            "sponsorship_newsletters", arguments=cleared_arguments
        )

    @classmethod
    def sponsorships_as_maintainer(
        cls,
        *,
        active_only: Optional[bool] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_private: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorshipOrder] = None
    ) -> "SponsorshipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includePrivate": {"type": "Boolean", "value": include_private},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorshipOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipConnectionFields(
            "sponsorships_as_maintainer", arguments=cleared_arguments
        )

    @classmethod
    def sponsorships_as_sponsor(
        cls,
        *,
        active_only: Optional[bool] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        maintainer_logins: Optional[str] = None,
        order_by: Optional[SponsorshipOrder] = None
    ) -> "SponsorshipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "maintainerLogins": {"type": "String", "value": maintainer_logins},
            "orderBy": {"type": "SponsorshipOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipConnectionFields(
            "sponsorships_as_sponsor", arguments=cleared_arguments
        )

    @classmethod
    def total_sponsorship_amount_as_sponsor_in_cents(
        cls,
        *,
        since: Optional[Any] = None,
        sponsorable_logins: Optional[str] = None,
        until: Optional[Any] = None
    ) -> "SponsorableGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "since": {"type": "DateTime", "value": since},
            "sponsorableLogins": {"type": "String", "value": sponsorable_logins},
            "until": {"type": "DateTime", "value": until},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorableGraphQLField(
            "total_sponsorship_amount_as_sponsor_in_cents", arguments=cleared_arguments
        )

    viewer_can_sponsor: "SponsorableGraphQLField" = SponsorableGraphQLField(
        "viewerCanSponsor"
    )
    viewer_is_sponsoring: "SponsorableGraphQLField" = SponsorableGraphQLField(
        "viewerIsSponsoring"
    )

    def fields(
        self,
        *subfields: Union[
            SponsorableGraphQLField,
            "SponsorAndLifetimeValueConnectionFields",
            "SponsorConnectionFields",
            "SponsorsActivityConnectionFields",
            "SponsorsListingFields",
            "SponsorshipConnectionFields",
            "SponsorshipFields",
            "SponsorshipNewsletterConnectionFields",
        ]
    ) -> "SponsorableInterface":
        """Subfields should come from the SponsorableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "SponsorableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class SponsorableItemConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SponsorableItemEdgeFields":
        return SponsorableItemEdgeFields("edges")

    nodes: "SponsorableItemUnion" = SponsorableItemUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SponsorableItemConnectionGraphQLField" = (
        SponsorableItemConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            SponsorableItemConnectionGraphQLField,
            "PageInfoFields",
            "SponsorableItemEdgeFields",
            "SponsorableItemUnion",
        ]
    ) -> "SponsorableItemConnectionFields":
        """Subfields should come from the SponsorableItemConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorableItemConnectionFields":
        self._alias = alias
        return self


class SponsorableItemEdgeFields(GraphQLField):
    cursor: "SponsorableItemEdgeGraphQLField" = SponsorableItemEdgeGraphQLField(
        "cursor"
    )
    node: "SponsorableItemUnion" = SponsorableItemUnion("node")

    def fields(
        self, *subfields: Union[SponsorableItemEdgeGraphQLField, "SponsorableItemUnion"]
    ) -> "SponsorableItemEdgeFields":
        """Subfields should come from the SponsorableItemEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorableItemEdgeFields":
        self._alias = alias
        return self


class SponsorsActivityFields(GraphQLField):
    action: "SponsorsActivityGraphQLField" = SponsorsActivityGraphQLField("action")
    current_privacy_level: "SponsorsActivityGraphQLField" = (
        SponsorsActivityGraphQLField("currentPrivacyLevel")
    )
    id: "SponsorsActivityGraphQLField" = SponsorsActivityGraphQLField("id")
    payment_source: "SponsorsActivityGraphQLField" = SponsorsActivityGraphQLField(
        "paymentSource"
    )

    @classmethod
    def previous_sponsors_tier(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("previous_sponsors_tier")

    sponsor: "SponsorUnion" = SponsorUnion("sponsor")

    @classmethod
    def sponsorable(cls) -> "SponsorableInterface":
        return SponsorableInterface("sponsorable")

    @classmethod
    def sponsors_tier(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("sponsors_tier")

    timestamp: "SponsorsActivityGraphQLField" = SponsorsActivityGraphQLField(
        "timestamp"
    )
    via_bulk_sponsorship: "SponsorsActivityGraphQLField" = SponsorsActivityGraphQLField(
        "viaBulkSponsorship"
    )

    def fields(
        self,
        *subfields: Union[
            SponsorsActivityGraphQLField,
            "SponsorUnion",
            "SponsorableInterface",
            "SponsorsTierFields",
        ]
    ) -> "SponsorsActivityFields":
        """Subfields should come from the SponsorsActivityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsActivityFields":
        self._alias = alias
        return self


class SponsorsActivityConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SponsorsActivityEdgeFields":
        return SponsorsActivityEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SponsorsActivityFields":
        return SponsorsActivityFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SponsorsActivityConnectionGraphQLField" = (
        SponsorsActivityConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            SponsorsActivityConnectionGraphQLField,
            "PageInfoFields",
            "SponsorsActivityEdgeFields",
            "SponsorsActivityFields",
        ]
    ) -> "SponsorsActivityConnectionFields":
        """Subfields should come from the SponsorsActivityConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsActivityConnectionFields":
        self._alias = alias
        return self


class SponsorsActivityEdgeFields(GraphQLField):
    cursor: "SponsorsActivityEdgeGraphQLField" = SponsorsActivityEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "SponsorsActivityFields":
        return SponsorsActivityFields("node")

    def fields(
        self,
        *subfields: Union[SponsorsActivityEdgeGraphQLField, "SponsorsActivityFields"]
    ) -> "SponsorsActivityEdgeFields":
        """Subfields should come from the SponsorsActivityEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsActivityEdgeFields":
        self._alias = alias
        return self


class SponsorsGoalFields(GraphQLField):
    description: "SponsorsGoalGraphQLField" = SponsorsGoalGraphQLField("description")
    kind: "SponsorsGoalGraphQLField" = SponsorsGoalGraphQLField("kind")
    percent_complete: "SponsorsGoalGraphQLField" = SponsorsGoalGraphQLField(
        "percentComplete"
    )
    target_value: "SponsorsGoalGraphQLField" = SponsorsGoalGraphQLField("targetValue")
    title: "SponsorsGoalGraphQLField" = SponsorsGoalGraphQLField("title")

    def fields(self, *subfields: SponsorsGoalGraphQLField) -> "SponsorsGoalFields":
        """Subfields should come from the SponsorsGoalFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsGoalFields":
        self._alias = alias
        return self


class SponsorsListingFields(GraphQLField):
    @classmethod
    def active_goal(cls) -> "SponsorsGoalFields":
        return SponsorsGoalFields("active_goal")

    @classmethod
    def active_stripe_connect_account(cls) -> "StripeConnectAccountFields":
        return StripeConnectAccountFields("active_stripe_connect_account")

    billing_country_or_region: "SponsorsListingGraphQLField" = (
        SponsorsListingGraphQLField("billingCountryOrRegion")
    )
    contact_email_address: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField(
        "contactEmailAddress"
    )
    created_at: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField("createdAt")
    dashboard_resource_path: "SponsorsListingGraphQLField" = (
        SponsorsListingGraphQLField("dashboardResourcePath")
    )
    dashboard_url: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField(
        "dashboardUrl"
    )

    @classmethod
    def featured_items(
        cls,
        *,
        featureable_types: Optional[SponsorsListingFeaturedItemFeatureableType] = None
    ) -> "SponsorsListingFeaturedItemFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "featureableTypes": {
                "type": "SponsorsListingFeaturedItemFeatureableType",
                "value": featureable_types,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorsListingFeaturedItemFields(
            "featured_items", arguments=cleared_arguments
        )

    @classmethod
    def fiscal_host(cls) -> "OrganizationFields":
        return OrganizationFields("fiscal_host")

    full_description: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField(
        "fullDescription"
    )
    full_description_html: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField(
        "fullDescriptionHTML"
    )
    id: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField("id")
    is_public: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField("isPublic")
    name: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField("name")
    next_payout_date: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField(
        "nextPayoutDate"
    )
    residence_country_or_region: "SponsorsListingGraphQLField" = (
        SponsorsListingGraphQLField("residenceCountryOrRegion")
    )
    resource_path: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField(
        "resourcePath"
    )
    short_description: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField(
        "shortDescription"
    )
    slug: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField("slug")

    @classmethod
    def sponsorable(cls) -> "SponsorableInterface":
        return SponsorableInterface("sponsorable")

    @classmethod
    def tiers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_unpublished: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorsTierOrder] = None
    ) -> "SponsorsTierConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeUnpublished": {"type": "Boolean", "value": include_unpublished},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorsTierOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorsTierConnectionFields("tiers", arguments=cleared_arguments)

    url: "SponsorsListingGraphQLField" = SponsorsListingGraphQLField("url")

    def fields(
        self,
        *subfields: Union[
            SponsorsListingGraphQLField,
            "OrganizationFields",
            "SponsorableInterface",
            "SponsorsGoalFields",
            "SponsorsListingFeaturedItemFields",
            "SponsorsTierConnectionFields",
            "StripeConnectAccountFields",
        ]
    ) -> "SponsorsListingFields":
        """Subfields should come from the SponsorsListingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsListingFields":
        self._alias = alias
        return self


class SponsorsListingFeaturedItemFields(GraphQLField):
    created_at: "SponsorsListingFeaturedItemGraphQLField" = (
        SponsorsListingFeaturedItemGraphQLField("createdAt")
    )
    description: "SponsorsListingFeaturedItemGraphQLField" = (
        SponsorsListingFeaturedItemGraphQLField("description")
    )
    featureable: "SponsorsListingFeatureableItemUnion" = (
        SponsorsListingFeatureableItemUnion("featureable")
    )
    id: "SponsorsListingFeaturedItemGraphQLField" = (
        SponsorsListingFeaturedItemGraphQLField("id")
    )
    position: "SponsorsListingFeaturedItemGraphQLField" = (
        SponsorsListingFeaturedItemGraphQLField("position")
    )

    @classmethod
    def sponsors_listing(cls) -> "SponsorsListingFields":
        return SponsorsListingFields("sponsors_listing")

    updated_at: "SponsorsListingFeaturedItemGraphQLField" = (
        SponsorsListingFeaturedItemGraphQLField("updatedAt")
    )

    def fields(
        self,
        *subfields: Union[
            SponsorsListingFeaturedItemGraphQLField,
            "SponsorsListingFeatureableItemUnion",
            "SponsorsListingFields",
        ]
    ) -> "SponsorsListingFeaturedItemFields":
        """Subfields should come from the SponsorsListingFeaturedItemFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsListingFeaturedItemFields":
        self._alias = alias
        return self


class SponsorsTierFields(GraphQLField):
    @classmethod
    def admin_info(cls) -> "SponsorsTierAdminInfoFields":
        return SponsorsTierAdminInfoFields("admin_info")

    @classmethod
    def closest_lesser_value_tier(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("closest_lesser_value_tier")

    created_at: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField("createdAt")
    description: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField("description")
    description_html: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField(
        "descriptionHTML"
    )
    id: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField("id")
    is_custom_amount: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField(
        "isCustomAmount"
    )
    is_one_time: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField("isOneTime")
    monthly_price_in_cents: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField(
        "monthlyPriceInCents"
    )
    monthly_price_in_dollars: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField(
        "monthlyPriceInDollars"
    )
    name: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField("name")

    @classmethod
    def sponsors_listing(cls) -> "SponsorsListingFields":
        return SponsorsListingFields("sponsors_listing")

    updated_at: "SponsorsTierGraphQLField" = SponsorsTierGraphQLField("updatedAt")

    def fields(
        self,
        *subfields: Union[
            SponsorsTierGraphQLField,
            "SponsorsListingFields",
            "SponsorsTierAdminInfoFields",
            "SponsorsTierFields",
        ]
    ) -> "SponsorsTierFields":
        """Subfields should come from the SponsorsTierFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsTierFields":
        self._alias = alias
        return self


class SponsorsTierAdminInfoFields(GraphQLField):
    is_draft: "SponsorsTierAdminInfoGraphQLField" = SponsorsTierAdminInfoGraphQLField(
        "isDraft"
    )
    is_published: "SponsorsTierAdminInfoGraphQLField" = (
        SponsorsTierAdminInfoGraphQLField("isPublished")
    )
    is_retired: "SponsorsTierAdminInfoGraphQLField" = SponsorsTierAdminInfoGraphQLField(
        "isRetired"
    )

    @classmethod
    def sponsorships(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_private: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorshipOrder] = None
    ) -> "SponsorshipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includePrivate": {"type": "Boolean", "value": include_private},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorshipOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipConnectionFields("sponsorships", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            SponsorsTierAdminInfoGraphQLField, "SponsorshipConnectionFields"
        ]
    ) -> "SponsorsTierAdminInfoFields":
        """Subfields should come from the SponsorsTierAdminInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsTierAdminInfoFields":
        self._alias = alias
        return self


class SponsorsTierConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SponsorsTierEdgeFields":
        return SponsorsTierEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SponsorsTierConnectionGraphQLField" = (
        SponsorsTierConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            SponsorsTierConnectionGraphQLField,
            "PageInfoFields",
            "SponsorsTierEdgeFields",
            "SponsorsTierFields",
        ]
    ) -> "SponsorsTierConnectionFields":
        """Subfields should come from the SponsorsTierConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsTierConnectionFields":
        self._alias = alias
        return self


class SponsorsTierEdgeFields(GraphQLField):
    cursor: "SponsorsTierEdgeGraphQLField" = SponsorsTierEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("node")

    def fields(
        self, *subfields: Union[SponsorsTierEdgeGraphQLField, "SponsorsTierFields"]
    ) -> "SponsorsTierEdgeFields":
        """Subfields should come from the SponsorsTierEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorsTierEdgeFields":
        self._alias = alias
        return self


class SponsorshipFields(GraphQLField):
    created_at: "SponsorshipGraphQLField" = SponsorshipGraphQLField("createdAt")
    id: "SponsorshipGraphQLField" = SponsorshipGraphQLField("id")
    is_active: "SponsorshipGraphQLField" = SponsorshipGraphQLField("isActive")
    is_one_time_payment: "SponsorshipGraphQLField" = SponsorshipGraphQLField(
        "isOneTimePayment"
    )
    is_sponsor_opted_into_email: "SponsorshipGraphQLField" = SponsorshipGraphQLField(
        "isSponsorOptedIntoEmail"
    )

    @classmethod
    def maintainer(cls) -> "UserFields":
        return UserFields("maintainer")

    payment_source: "SponsorshipGraphQLField" = SponsorshipGraphQLField("paymentSource")
    privacy_level: "SponsorshipGraphQLField" = SponsorshipGraphQLField("privacyLevel")

    @classmethod
    def sponsor(cls) -> "UserFields":
        return UserFields("sponsor")

    sponsor_entity: "SponsorUnion" = SponsorUnion("sponsorEntity")

    @classmethod
    def sponsorable(cls) -> "SponsorableInterface":
        return SponsorableInterface("sponsorable")

    @classmethod
    def tier(cls) -> "SponsorsTierFields":
        return SponsorsTierFields("tier")

    tier_selected_at: "SponsorshipGraphQLField" = SponsorshipGraphQLField(
        "tierSelectedAt"
    )

    def fields(
        self,
        *subfields: Union[
            SponsorshipGraphQLField,
            "SponsorUnion",
            "SponsorableInterface",
            "SponsorsTierFields",
            "UserFields",
        ]
    ) -> "SponsorshipFields":
        """Subfields should come from the SponsorshipFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorshipFields":
        self._alias = alias
        return self


class SponsorshipConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SponsorshipEdgeFields":
        return SponsorshipEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SponsorshipFields":
        return SponsorshipFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SponsorshipConnectionGraphQLField" = (
        SponsorshipConnectionGraphQLField("totalCount")
    )
    total_recurring_monthly_price_in_cents: "SponsorshipConnectionGraphQLField" = (
        SponsorshipConnectionGraphQLField("totalRecurringMonthlyPriceInCents")
    )
    total_recurring_monthly_price_in_dollars: "SponsorshipConnectionGraphQLField" = (
        SponsorshipConnectionGraphQLField("totalRecurringMonthlyPriceInDollars")
    )

    def fields(
        self,
        *subfields: Union[
            SponsorshipConnectionGraphQLField,
            "PageInfoFields",
            "SponsorshipEdgeFields",
            "SponsorshipFields",
        ]
    ) -> "SponsorshipConnectionFields":
        """Subfields should come from the SponsorshipConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorshipConnectionFields":
        self._alias = alias
        return self


class SponsorshipEdgeFields(GraphQLField):
    cursor: "SponsorshipEdgeGraphQLField" = SponsorshipEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "SponsorshipFields":
        return SponsorshipFields("node")

    def fields(
        self, *subfields: Union[SponsorshipEdgeGraphQLField, "SponsorshipFields"]
    ) -> "SponsorshipEdgeFields":
        """Subfields should come from the SponsorshipEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorshipEdgeFields":
        self._alias = alias
        return self


class SponsorshipNewsletterFields(GraphQLField):
    @classmethod
    def author(cls) -> "UserFields":
        return UserFields("author")

    body: "SponsorshipNewsletterGraphQLField" = SponsorshipNewsletterGraphQLField(
        "body"
    )
    created_at: "SponsorshipNewsletterGraphQLField" = SponsorshipNewsletterGraphQLField(
        "createdAt"
    )
    id: "SponsorshipNewsletterGraphQLField" = SponsorshipNewsletterGraphQLField("id")
    is_published: "SponsorshipNewsletterGraphQLField" = (
        SponsorshipNewsletterGraphQLField("isPublished")
    )

    @classmethod
    def sponsorable(cls) -> "SponsorableInterface":
        return SponsorableInterface("sponsorable")

    subject: "SponsorshipNewsletterGraphQLField" = SponsorshipNewsletterGraphQLField(
        "subject"
    )
    updated_at: "SponsorshipNewsletterGraphQLField" = SponsorshipNewsletterGraphQLField(
        "updatedAt"
    )

    def fields(
        self,
        *subfields: Union[
            SponsorshipNewsletterGraphQLField, "SponsorableInterface", "UserFields"
        ]
    ) -> "SponsorshipNewsletterFields":
        """Subfields should come from the SponsorshipNewsletterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorshipNewsletterFields":
        self._alias = alias
        return self


class SponsorshipNewsletterConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SponsorshipNewsletterEdgeFields":
        return SponsorshipNewsletterEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SponsorshipNewsletterFields":
        return SponsorshipNewsletterFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SponsorshipNewsletterConnectionGraphQLField" = (
        SponsorshipNewsletterConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            SponsorshipNewsletterConnectionGraphQLField,
            "PageInfoFields",
            "SponsorshipNewsletterEdgeFields",
            "SponsorshipNewsletterFields",
        ]
    ) -> "SponsorshipNewsletterConnectionFields":
        """Subfields should come from the SponsorshipNewsletterConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorshipNewsletterConnectionFields":
        self._alias = alias
        return self


class SponsorshipNewsletterEdgeFields(GraphQLField):
    cursor: "SponsorshipNewsletterEdgeGraphQLField" = (
        SponsorshipNewsletterEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "SponsorshipNewsletterFields":
        return SponsorshipNewsletterFields("node")

    def fields(
        self,
        *subfields: Union[
            SponsorshipNewsletterEdgeGraphQLField, "SponsorshipNewsletterFields"
        ]
    ) -> "SponsorshipNewsletterEdgeFields":
        """Subfields should come from the SponsorshipNewsletterEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SponsorshipNewsletterEdgeFields":
        self._alias = alias
        return self


class StargazerConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "StargazerEdgeFields":
        return StargazerEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "StargazerConnectionGraphQLField" = StargazerConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            StargazerConnectionGraphQLField,
            "PageInfoFields",
            "StargazerEdgeFields",
            "UserFields",
        ]
    ) -> "StargazerConnectionFields":
        """Subfields should come from the StargazerConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StargazerConnectionFields":
        self._alias = alias
        return self


class StargazerEdgeFields(GraphQLField):
    cursor: "StargazerEdgeGraphQLField" = StargazerEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    starred_at: "StargazerEdgeGraphQLField" = StargazerEdgeGraphQLField("starredAt")

    def fields(
        self, *subfields: Union[StargazerEdgeGraphQLField, "UserFields"]
    ) -> "StargazerEdgeFields":
        """Subfields should come from the StargazerEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StargazerEdgeFields":
        self._alias = alias
        return self


class StarrableInterface(GraphQLField):
    id: "StarrableGraphQLField" = StarrableGraphQLField("id")
    stargazer_count: "StarrableGraphQLField" = StarrableGraphQLField("stargazerCount")

    @classmethod
    def stargazers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[StarOrder] = None
    ) -> "StargazerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "StarOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StargazerConnectionFields("stargazers", arguments=cleared_arguments)

    viewer_has_starred: "StarrableGraphQLField" = StarrableGraphQLField(
        "viewerHasStarred"
    )

    def fields(
        self, *subfields: Union[StarrableGraphQLField, "StargazerConnectionFields"]
    ) -> "StarrableInterface":
        """Subfields should come from the StarrableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StarrableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "StarrableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class StarredRepositoryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "StarredRepositoryEdgeFields":
        return StarredRepositoryEdgeFields("edges")

    is_over_limit: "StarredRepositoryConnectionGraphQLField" = (
        StarredRepositoryConnectionGraphQLField("isOverLimit")
    )

    @classmethod
    def nodes(cls) -> "RepositoryFields":
        return RepositoryFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "StarredRepositoryConnectionGraphQLField" = (
        StarredRepositoryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            StarredRepositoryConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryFields",
            "StarredRepositoryEdgeFields",
        ]
    ) -> "StarredRepositoryConnectionFields":
        """Subfields should come from the StarredRepositoryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StarredRepositoryConnectionFields":
        self._alias = alias
        return self


class StarredRepositoryEdgeFields(GraphQLField):
    cursor: "StarredRepositoryEdgeGraphQLField" = StarredRepositoryEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "RepositoryFields":
        return RepositoryFields("node")

    starred_at: "StarredRepositoryEdgeGraphQLField" = StarredRepositoryEdgeGraphQLField(
        "starredAt"
    )

    def fields(
        self, *subfields: Union[StarredRepositoryEdgeGraphQLField, "RepositoryFields"]
    ) -> "StarredRepositoryEdgeFields":
        """Subfields should come from the StarredRepositoryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StarredRepositoryEdgeFields":
        self._alias = alias
        return self


class StartOrganizationMigrationPayloadFields(GraphQLField):
    client_mutation_id: "StartOrganizationMigrationPayloadGraphQLField" = (
        StartOrganizationMigrationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def org_migration(cls) -> "OrganizationMigrationFields":
        return OrganizationMigrationFields("org_migration")

    def fields(
        self,
        *subfields: Union[
            StartOrganizationMigrationPayloadGraphQLField, "OrganizationMigrationFields"
        ]
    ) -> "StartOrganizationMigrationPayloadFields":
        """Subfields should come from the StartOrganizationMigrationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StartOrganizationMigrationPayloadFields":
        self._alias = alias
        return self


class StartRepositoryMigrationPayloadFields(GraphQLField):
    client_mutation_id: "StartRepositoryMigrationPayloadGraphQLField" = (
        StartRepositoryMigrationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository_migration(cls) -> "RepositoryMigrationFields":
        return RepositoryMigrationFields("repository_migration")

    def fields(
        self,
        *subfields: Union[
            StartRepositoryMigrationPayloadGraphQLField, "RepositoryMigrationFields"
        ]
    ) -> "StartRepositoryMigrationPayloadFields":
        """Subfields should come from the StartRepositoryMigrationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StartRepositoryMigrationPayloadFields":
        self._alias = alias
        return self


class StatusFields(GraphQLField):
    @classmethod
    def combined_contexts(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "StatusCheckRollupContextConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StatusCheckRollupContextConnectionFields(
            "combined_contexts", arguments=cleared_arguments
        )

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    @classmethod
    def context(cls, name: str) -> "StatusContextFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StatusContextFields("context", arguments=cleared_arguments)

    @classmethod
    def contexts(cls) -> "StatusContextFields":
        return StatusContextFields("contexts")

    id: "StatusGraphQLField" = StatusGraphQLField("id")
    state: "StatusGraphQLField" = StatusGraphQLField("state")

    def fields(
        self,
        *subfields: Union[
            StatusGraphQLField,
            "CommitFields",
            "StatusCheckRollupContextConnectionFields",
            "StatusContextFields",
        ]
    ) -> "StatusFields":
        """Subfields should come from the StatusFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StatusFields":
        self._alias = alias
        return self


class StatusCheckConfigurationFields(GraphQLField):
    context: "StatusCheckConfigurationGraphQLField" = (
        StatusCheckConfigurationGraphQLField("context")
    )
    integration_id: "StatusCheckConfigurationGraphQLField" = (
        StatusCheckConfigurationGraphQLField("integrationId")
    )

    def fields(
        self, *subfields: StatusCheckConfigurationGraphQLField
    ) -> "StatusCheckConfigurationFields":
        """Subfields should come from the StatusCheckConfigurationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StatusCheckConfigurationFields":
        self._alias = alias
        return self


class StatusCheckRollupFields(GraphQLField):
    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    @classmethod
    def contexts(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "StatusCheckRollupContextConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StatusCheckRollupContextConnectionFields(
            "contexts", arguments=cleared_arguments
        )

    id: "StatusCheckRollupGraphQLField" = StatusCheckRollupGraphQLField("id")
    state: "StatusCheckRollupGraphQLField" = StatusCheckRollupGraphQLField("state")

    def fields(
        self,
        *subfields: Union[
            StatusCheckRollupGraphQLField,
            "CommitFields",
            "StatusCheckRollupContextConnectionFields",
        ]
    ) -> "StatusCheckRollupFields":
        """Subfields should come from the StatusCheckRollupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StatusCheckRollupFields":
        self._alias = alias
        return self


class StatusCheckRollupContextConnectionFields(GraphQLField):
    check_run_count: "StatusCheckRollupContextConnectionGraphQLField" = (
        StatusCheckRollupContextConnectionGraphQLField("checkRunCount")
    )

    @classmethod
    def check_run_counts_by_state(cls) -> "CheckRunStateCountFields":
        return CheckRunStateCountFields("check_run_counts_by_state")

    @classmethod
    def edges(cls) -> "StatusCheckRollupContextEdgeFields":
        return StatusCheckRollupContextEdgeFields("edges")

    nodes: "StatusCheckRollupContextUnion" = StatusCheckRollupContextUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    status_context_count: "StatusCheckRollupContextConnectionGraphQLField" = (
        StatusCheckRollupContextConnectionGraphQLField("statusContextCount")
    )

    @classmethod
    def status_context_counts_by_state(cls) -> "StatusContextStateCountFields":
        return StatusContextStateCountFields("status_context_counts_by_state")

    total_count: "StatusCheckRollupContextConnectionGraphQLField" = (
        StatusCheckRollupContextConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            StatusCheckRollupContextConnectionGraphQLField,
            "CheckRunStateCountFields",
            "PageInfoFields",
            "StatusCheckRollupContextEdgeFields",
            "StatusCheckRollupContextUnion",
            "StatusContextStateCountFields",
        ]
    ) -> "StatusCheckRollupContextConnectionFields":
        """Subfields should come from the StatusCheckRollupContextConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StatusCheckRollupContextConnectionFields":
        self._alias = alias
        return self


class StatusCheckRollupContextEdgeFields(GraphQLField):
    cursor: "StatusCheckRollupContextEdgeGraphQLField" = (
        StatusCheckRollupContextEdgeGraphQLField("cursor")
    )
    node: "StatusCheckRollupContextUnion" = StatusCheckRollupContextUnion("node")

    def fields(
        self,
        *subfields: Union[
            StatusCheckRollupContextEdgeGraphQLField, "StatusCheckRollupContextUnion"
        ]
    ) -> "StatusCheckRollupContextEdgeFields":
        """Subfields should come from the StatusCheckRollupContextEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StatusCheckRollupContextEdgeFields":
        self._alias = alias
        return self


class StatusContextFields(GraphQLField):
    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "StatusContextGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StatusContextGraphQLField("avatar_url", arguments=cleared_arguments)

    @classmethod
    def commit(cls) -> "CommitFields":
        return CommitFields("commit")

    context: "StatusContextGraphQLField" = StatusContextGraphQLField("context")
    created_at: "StatusContextGraphQLField" = StatusContextGraphQLField("createdAt")

    @classmethod
    def creator(cls) -> "ActorInterface":
        return ActorInterface("creator")

    description: "StatusContextGraphQLField" = StatusContextGraphQLField("description")
    id: "StatusContextGraphQLField" = StatusContextGraphQLField("id")

    @classmethod
    def is_required(
        cls,
        *,
        pull_request_id: Optional[str] = None,
        pull_request_number: Optional[int] = None
    ) -> "StatusContextGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "pullRequestId": {"type": "ID", "value": pull_request_id},
            "pullRequestNumber": {"type": "Int", "value": pull_request_number},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StatusContextGraphQLField("is_required", arguments=cleared_arguments)

    state: "StatusContextGraphQLField" = StatusContextGraphQLField("state")
    target_url: "StatusContextGraphQLField" = StatusContextGraphQLField("targetUrl")

    def fields(
        self,
        *subfields: Union[StatusContextGraphQLField, "ActorInterface", "CommitFields"]
    ) -> "StatusContextFields":
        """Subfields should come from the StatusContextFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StatusContextFields":
        self._alias = alias
        return self


class StatusContextStateCountFields(GraphQLField):
    count: "StatusContextStateCountGraphQLField" = StatusContextStateCountGraphQLField(
        "count"
    )
    state: "StatusContextStateCountGraphQLField" = StatusContextStateCountGraphQLField(
        "state"
    )

    def fields(
        self, *subfields: StatusContextStateCountGraphQLField
    ) -> "StatusContextStateCountFields":
        """Subfields should come from the StatusContextStateCountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StatusContextStateCountFields":
        self._alias = alias
        return self


class StripeConnectAccountFields(GraphQLField):
    account_id: "StripeConnectAccountGraphQLField" = StripeConnectAccountGraphQLField(
        "accountId"
    )
    billing_country_or_region: "StripeConnectAccountGraphQLField" = (
        StripeConnectAccountGraphQLField("billingCountryOrRegion")
    )
    country_or_region: "StripeConnectAccountGraphQLField" = (
        StripeConnectAccountGraphQLField("countryOrRegion")
    )
    is_active: "StripeConnectAccountGraphQLField" = StripeConnectAccountGraphQLField(
        "isActive"
    )

    @classmethod
    def sponsors_listing(cls) -> "SponsorsListingFields":
        return SponsorsListingFields("sponsors_listing")

    stripe_dashboard_url: "StripeConnectAccountGraphQLField" = (
        StripeConnectAccountGraphQLField("stripeDashboardUrl")
    )

    def fields(
        self,
        *subfields: Union[StripeConnectAccountGraphQLField, "SponsorsListingFields"]
    ) -> "StripeConnectAccountFields":
        """Subfields should come from the StripeConnectAccountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StripeConnectAccountFields":
        self._alias = alias
        return self


class SubIssueAddedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "SubIssueAddedEventGraphQLField" = SubIssueAddedEventGraphQLField(
        "createdAt"
    )
    id: "SubIssueAddedEventGraphQLField" = SubIssueAddedEventGraphQLField("id")

    @classmethod
    def sub_issue(cls) -> "IssueFields":
        return IssueFields("sub_issue")

    def fields(
        self,
        *subfields: Union[
            SubIssueAddedEventGraphQLField, "ActorInterface", "IssueFields"
        ]
    ) -> "SubIssueAddedEventFields":
        """Subfields should come from the SubIssueAddedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubIssueAddedEventFields":
        self._alias = alias
        return self


class SubIssueRemovedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "SubIssueRemovedEventGraphQLField" = SubIssueRemovedEventGraphQLField(
        "createdAt"
    )
    id: "SubIssueRemovedEventGraphQLField" = SubIssueRemovedEventGraphQLField("id")

    @classmethod
    def sub_issue(cls) -> "IssueFields":
        return IssueFields("sub_issue")

    def fields(
        self,
        *subfields: Union[
            SubIssueRemovedEventGraphQLField, "ActorInterface", "IssueFields"
        ]
    ) -> "SubIssueRemovedEventFields":
        """Subfields should come from the SubIssueRemovedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubIssueRemovedEventFields":
        self._alias = alias
        return self


class SubIssuesSummaryFields(GraphQLField):
    completed: "SubIssuesSummaryGraphQLField" = SubIssuesSummaryGraphQLField(
        "completed"
    )
    percent_completed: "SubIssuesSummaryGraphQLField" = SubIssuesSummaryGraphQLField(
        "percentCompleted"
    )
    total: "SubIssuesSummaryGraphQLField" = SubIssuesSummaryGraphQLField("total")

    def fields(
        self, *subfields: SubIssuesSummaryGraphQLField
    ) -> "SubIssuesSummaryFields":
        """Subfields should come from the SubIssuesSummaryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubIssuesSummaryFields":
        self._alias = alias
        return self


class SubmitPullRequestReviewPayloadFields(GraphQLField):
    client_mutation_id: "SubmitPullRequestReviewPayloadGraphQLField" = (
        SubmitPullRequestReviewPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("pull_request_review")

    def fields(
        self,
        *subfields: Union[
            SubmitPullRequestReviewPayloadGraphQLField, "PullRequestReviewFields"
        ]
    ) -> "SubmitPullRequestReviewPayloadFields":
        """Subfields should come from the SubmitPullRequestReviewPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubmitPullRequestReviewPayloadFields":
        self._alias = alias
        return self


class SubmoduleFields(GraphQLField):
    branch: "SubmoduleGraphQLField" = SubmoduleGraphQLField("branch")
    git_url: "SubmoduleGraphQLField" = SubmoduleGraphQLField("gitUrl")
    name: "SubmoduleGraphQLField" = SubmoduleGraphQLField("name")
    name_raw: "SubmoduleGraphQLField" = SubmoduleGraphQLField("nameRaw")
    path: "SubmoduleGraphQLField" = SubmoduleGraphQLField("path")
    path_raw: "SubmoduleGraphQLField" = SubmoduleGraphQLField("pathRaw")
    subproject_commit_oid: "SubmoduleGraphQLField" = SubmoduleGraphQLField(
        "subprojectCommitOid"
    )

    def fields(self, *subfields: SubmoduleGraphQLField) -> "SubmoduleFields":
        """Subfields should come from the SubmoduleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubmoduleFields":
        self._alias = alias
        return self


class SubmoduleConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SubmoduleEdgeFields":
        return SubmoduleEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "SubmoduleFields":
        return SubmoduleFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SubmoduleConnectionGraphQLField" = SubmoduleConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            SubmoduleConnectionGraphQLField,
            "PageInfoFields",
            "SubmoduleEdgeFields",
            "SubmoduleFields",
        ]
    ) -> "SubmoduleConnectionFields":
        """Subfields should come from the SubmoduleConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubmoduleConnectionFields":
        self._alias = alias
        return self


class SubmoduleEdgeFields(GraphQLField):
    cursor: "SubmoduleEdgeGraphQLField" = SubmoduleEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "SubmoduleFields":
        return SubmoduleFields("node")

    def fields(
        self, *subfields: Union[SubmoduleEdgeGraphQLField, "SubmoduleFields"]
    ) -> "SubmoduleEdgeFields":
        """Subfields should come from the SubmoduleEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubmoduleEdgeFields":
        self._alias = alias
        return self


class SubscribableInterface(GraphQLField):
    id: "SubscribableGraphQLField" = SubscribableGraphQLField("id")
    viewer_can_subscribe: "SubscribableGraphQLField" = SubscribableGraphQLField(
        "viewerCanSubscribe"
    )
    viewer_subscription: "SubscribableGraphQLField" = SubscribableGraphQLField(
        "viewerSubscription"
    )

    def fields(self, *subfields: SubscribableGraphQLField) -> "SubscribableInterface":
        """Subfields should come from the SubscribableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubscribableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "SubscribableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class SubscribableThreadInterface(GraphQLField):
    id: "SubscribableThreadGraphQLField" = SubscribableThreadGraphQLField("id")
    viewer_thread_subscription_form_action: "SubscribableThreadGraphQLField" = (
        SubscribableThreadGraphQLField("viewerThreadSubscriptionFormAction")
    )
    viewer_thread_subscription_status: "SubscribableThreadGraphQLField" = (
        SubscribableThreadGraphQLField("viewerThreadSubscriptionStatus")
    )

    def fields(
        self, *subfields: SubscribableThreadGraphQLField
    ) -> "SubscribableThreadInterface":
        """Subfields should come from the SubscribableThreadInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubscribableThreadInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "SubscribableThreadInterface":
        self._inline_fragments[type_name] = subfields
        return self


class SubscribedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "SubscribedEventGraphQLField" = SubscribedEventGraphQLField("createdAt")
    id: "SubscribedEventGraphQLField" = SubscribedEventGraphQLField("id")

    @classmethod
    def subscribable(cls) -> "SubscribableInterface":
        return SubscribableInterface("subscribable")

    def fields(
        self,
        *subfields: Union[
            SubscribedEventGraphQLField, "ActorInterface", "SubscribableInterface"
        ]
    ) -> "SubscribedEventFields":
        """Subfields should come from the SubscribedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubscribedEventFields":
        self._alias = alias
        return self


class SuggestedReviewerFields(GraphQLField):
    is_author: "SuggestedReviewerGraphQLField" = SuggestedReviewerGraphQLField(
        "isAuthor"
    )
    is_commenter: "SuggestedReviewerGraphQLField" = SuggestedReviewerGraphQLField(
        "isCommenter"
    )

    @classmethod
    def reviewer(cls) -> "UserFields":
        return UserFields("reviewer")

    def fields(
        self, *subfields: Union[SuggestedReviewerGraphQLField, "UserFields"]
    ) -> "SuggestedReviewerFields":
        """Subfields should come from the SuggestedReviewerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SuggestedReviewerFields":
        self._alias = alias
        return self


class TagNamePatternParametersFields(GraphQLField):
    name: "TagNamePatternParametersGraphQLField" = TagNamePatternParametersGraphQLField(
        "name"
    )
    negate: "TagNamePatternParametersGraphQLField" = (
        TagNamePatternParametersGraphQLField("negate")
    )
    operator: "TagNamePatternParametersGraphQLField" = (
        TagNamePatternParametersGraphQLField("operator")
    )
    pattern: "TagNamePatternParametersGraphQLField" = (
        TagNamePatternParametersGraphQLField("pattern")
    )

    def fields(
        self, *subfields: TagNamePatternParametersGraphQLField
    ) -> "TagNamePatternParametersFields":
        """Subfields should come from the TagNamePatternParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TagNamePatternParametersFields":
        self._alias = alias
        return self


class TeamFields(GraphQLField):
    @classmethod
    def ancestors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "TeamConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamConnectionFields("ancestors", arguments=cleared_arguments)

    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "TeamGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamGraphQLField("avatar_url", arguments=cleared_arguments)

    @classmethod
    def child_teams(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        immediate_only: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[TeamOrder] = None,
        user_logins: Optional[str] = None
    ) -> "TeamConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "immediateOnly": {"type": "Boolean", "value": immediate_only},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "TeamOrder", "value": order_by},
            "userLogins": {"type": "String", "value": user_logins},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamConnectionFields("child_teams", arguments=cleared_arguments)

    combined_slug: "TeamGraphQLField" = TeamGraphQLField("combinedSlug")
    created_at: "TeamGraphQLField" = TeamGraphQLField("createdAt")
    database_id: "TeamGraphQLField" = TeamGraphQLField("databaseId")
    description: "TeamGraphQLField" = TeamGraphQLField("description")

    @classmethod
    def discussion(cls, number: int) -> "TeamDiscussionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamDiscussionFields("discussion", arguments=cleared_arguments)

    @classmethod
    def discussions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        is_pinned: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[TeamDiscussionOrder] = None
    ) -> "TeamDiscussionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "isPinned": {"type": "Boolean", "value": is_pinned},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "TeamDiscussionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamDiscussionConnectionFields(
            "discussions", arguments=cleared_arguments
        )

    discussions_resource_path: "TeamGraphQLField" = TeamGraphQLField(
        "discussionsResourcePath"
    )
    discussions_url: "TeamGraphQLField" = TeamGraphQLField("discussionsUrl")
    edit_team_resource_path: "TeamGraphQLField" = TeamGraphQLField(
        "editTeamResourcePath"
    )
    edit_team_url: "TeamGraphQLField" = TeamGraphQLField("editTeamUrl")
    id: "TeamGraphQLField" = TeamGraphQLField("id")

    @classmethod
    def invitations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "OrganizationInvitationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationInvitationConnectionFields(
            "invitations", arguments=cleared_arguments
        )

    @classmethod
    def member_statuses(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[UserStatusOrder] = None
    ) -> "UserStatusConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "UserStatusOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserStatusConnectionFields(
            "member_statuses", arguments=cleared_arguments
        )

    @classmethod
    def members(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        membership: Optional[TeamMembershipType] = None,
        order_by: Optional[TeamMemberOrder] = None,
        query: Optional[str] = None,
        role: Optional[TeamMemberRole] = None
    ) -> "TeamMemberConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "membership": {"type": "TeamMembershipType", "value": membership},
            "orderBy": {"type": "TeamMemberOrder", "value": order_by},
            "query": {"type": "String", "value": query},
            "role": {"type": "TeamMemberRole", "value": role},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamMemberConnectionFields("members", arguments=cleared_arguments)

    members_resource_path: "TeamGraphQLField" = TeamGraphQLField("membersResourcePath")
    members_url: "TeamGraphQLField" = TeamGraphQLField("membersUrl")
    name: "TeamGraphQLField" = TeamGraphQLField("name")
    new_team_resource_path: "TeamGraphQLField" = TeamGraphQLField("newTeamResourcePath")
    new_team_url: "TeamGraphQLField" = TeamGraphQLField("newTeamUrl")
    notification_setting: "TeamGraphQLField" = TeamGraphQLField("notificationSetting")

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    @classmethod
    def parent_team(cls) -> "TeamFields":
        return TeamFields("parent_team")

    privacy: "TeamGraphQLField" = TeamGraphQLField("privacy")

    @classmethod
    def project_v_2(cls, number: int) -> "ProjectV2Fields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2Fields("project_v_2", arguments=cleared_arguments)

    @classmethod
    def projects_v_2(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by: Optional[ProjectV2Filters] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        min_permission_level: Optional[ProjectV2PermissionLevel] = None,
        order_by: Optional[ProjectV2Order] = None,
        query: Optional[str] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterBy": {"type": "ProjectV2Filters", "value": filter_by},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "minPermissionLevel": {
                "type": "ProjectV2PermissionLevel",
                "value": min_permission_level,
            },
            "orderBy": {"type": "ProjectV2Order", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("projects_v_2", arguments=cleared_arguments)

    @classmethod
    def repositories(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[TeamRepositoryOrder] = None,
        query: Optional[str] = None
    ) -> "TeamRepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "TeamRepositoryOrder", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamRepositoryConnectionFields(
            "repositories", arguments=cleared_arguments
        )

    repositories_resource_path: "TeamGraphQLField" = TeamGraphQLField(
        "repositoriesResourcePath"
    )
    repositories_url: "TeamGraphQLField" = TeamGraphQLField("repositoriesUrl")
    resource_path: "TeamGraphQLField" = TeamGraphQLField("resourcePath")
    review_request_delegation_algorithm: "TeamGraphQLField" = TeamGraphQLField(
        "reviewRequestDelegationAlgorithm"
    )
    review_request_delegation_enabled: "TeamGraphQLField" = TeamGraphQLField(
        "reviewRequestDelegationEnabled"
    )
    review_request_delegation_member_count: "TeamGraphQLField" = TeamGraphQLField(
        "reviewRequestDelegationMemberCount"
    )
    review_request_delegation_notify_team: "TeamGraphQLField" = TeamGraphQLField(
        "reviewRequestDelegationNotifyTeam"
    )
    slug: "TeamGraphQLField" = TeamGraphQLField("slug")
    teams_resource_path: "TeamGraphQLField" = TeamGraphQLField("teamsResourcePath")
    teams_url: "TeamGraphQLField" = TeamGraphQLField("teamsUrl")
    updated_at: "TeamGraphQLField" = TeamGraphQLField("updatedAt")
    url: "TeamGraphQLField" = TeamGraphQLField("url")
    viewer_can_administer: "TeamGraphQLField" = TeamGraphQLField("viewerCanAdminister")
    viewer_can_subscribe: "TeamGraphQLField" = TeamGraphQLField("viewerCanSubscribe")
    viewer_subscription: "TeamGraphQLField" = TeamGraphQLField("viewerSubscription")

    def fields(
        self,
        *subfields: Union[
            TeamGraphQLField,
            "OrganizationFields",
            "OrganizationInvitationConnectionFields",
            "ProjectV2ConnectionFields",
            "ProjectV2Fields",
            "TeamConnectionFields",
            "TeamDiscussionConnectionFields",
            "TeamDiscussionFields",
            "TeamFields",
            "TeamMemberConnectionFields",
            "TeamRepositoryConnectionFields",
            "UserStatusConnectionFields",
        ]
    ) -> "TeamFields":
        """Subfields should come from the TeamFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamFields":
        self._alias = alias
        return self


class TeamAddMemberAuditEntryFields(GraphQLField):
    action: "TeamAddMemberAuditEntryGraphQLField" = TeamAddMemberAuditEntryGraphQLField(
        "action"
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("createdAt")
    )
    id: "TeamAddMemberAuditEntryGraphQLField" = TeamAddMemberAuditEntryGraphQLField(
        "id"
    )
    is_ldap_mapped: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("isLdapMapped")
    )
    operation_type: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    team_name: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("teamName")
    )
    team_resource_path: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("teamResourcePath")
    )
    team_url: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("teamUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "TeamAddMemberAuditEntryGraphQLField" = (
        TeamAddMemberAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            TeamAddMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "TeamFields",
            "UserFields",
        ]
    ) -> "TeamAddMemberAuditEntryFields":
        """Subfields should come from the TeamAddMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamAddMemberAuditEntryFields":
        self._alias = alias
        return self


class TeamAddRepositoryAuditEntryFields(GraphQLField):
    action: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("actorUrl")
    )
    created_at: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("createdAt")
    )
    id: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("id")
    )
    is_ldap_mapped: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("isLdapMapped")
    )
    operation_type: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    team_name: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("teamName")
    )
    team_resource_path: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("teamResourcePath")
    )
    team_url: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("teamUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "TeamAddRepositoryAuditEntryGraphQLField" = (
        TeamAddRepositoryAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            TeamAddRepositoryAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "TeamFields",
            "UserFields",
        ]
    ) -> "TeamAddRepositoryAuditEntryFields":
        """Subfields should come from the TeamAddRepositoryAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamAddRepositoryAuditEntryFields":
        self._alias = alias
        return self


class TeamAuditEntryDataInterface(GraphQLField):
    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    team_name: "TeamAuditEntryDataGraphQLField" = TeamAuditEntryDataGraphQLField(
        "teamName"
    )
    team_resource_path: "TeamAuditEntryDataGraphQLField" = (
        TeamAuditEntryDataGraphQLField("teamResourcePath")
    )
    team_url: "TeamAuditEntryDataGraphQLField" = TeamAuditEntryDataGraphQLField(
        "teamUrl"
    )

    def fields(
        self, *subfields: Union[TeamAuditEntryDataGraphQLField, "TeamFields"]
    ) -> "TeamAuditEntryDataInterface":
        """Subfields should come from the TeamAuditEntryDataInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamAuditEntryDataInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "TeamAuditEntryDataInterface":
        self._inline_fragments[type_name] = subfields
        return self


class TeamChangeParentTeamAuditEntryFields(GraphQLField):
    action: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("actorUrl")
    )
    created_at: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("createdAt")
    )
    id: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("id")
    )
    is_ldap_mapped: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("isLdapMapped")
    )
    operation_type: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def parent_team(cls) -> "TeamFields":
        return TeamFields("parent_team")

    parent_team_name: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("parentTeamName")
    )
    parent_team_name_was: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("parentTeamNameWas")
    )
    parent_team_resource_path: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("parentTeamResourcePath")
    )
    parent_team_url: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("parentTeamUrl")
    )

    @classmethod
    def parent_team_was(cls) -> "TeamFields":
        return TeamFields("parent_team_was")

    parent_team_was_resource_path: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("parentTeamWasResourcePath")
    )
    parent_team_was_url: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("parentTeamWasUrl")
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    team_name: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("teamName")
    )
    team_resource_path: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("teamResourcePath")
    )
    team_url: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("teamUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "TeamChangeParentTeamAuditEntryGraphQLField" = (
        TeamChangeParentTeamAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            TeamChangeParentTeamAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "TeamFields",
            "UserFields",
        ]
    ) -> "TeamChangeParentTeamAuditEntryFields":
        """Subfields should come from the TeamChangeParentTeamAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamChangeParentTeamAuditEntryFields":
        self._alias = alias
        return self


class TeamConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TeamEdgeFields":
        return TeamEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "TeamFields":
        return TeamFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TeamConnectionGraphQLField" = TeamConnectionGraphQLField("totalCount")

    def fields(
        self,
        *subfields: Union[
            TeamConnectionGraphQLField, "PageInfoFields", "TeamEdgeFields", "TeamFields"
        ]
    ) -> "TeamConnectionFields":
        """Subfields should come from the TeamConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamConnectionFields":
        self._alias = alias
        return self


class TeamDiscussionFields(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "authorAssociation"
    )
    body: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("body")
    body_html: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("bodyHTML")
    body_text: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("bodyText")
    body_version: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "bodyVersion"
    )

    @classmethod
    def comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        from_comment: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[TeamDiscussionCommentOrder] = None
    ) -> "TeamDiscussionCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "fromComment": {"type": "Int", "value": from_comment},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "TeamDiscussionCommentOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TeamDiscussionCommentConnectionFields(
            "comments", arguments=cleared_arguments
        )

    comments_resource_path: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "commentsResourcePath"
    )
    comments_url: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "commentsUrl"
    )
    created_at: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("createdAt")
    created_via_email: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "createdViaEmail"
    )
    database_id: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("databaseId")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    id: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("id")
    includes_created_edit: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "includesCreatedEdit"
    )
    is_pinned: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("isPinned")
    is_private: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("isPrivate")
    last_edited_at: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "lastEditedAt"
    )
    number: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("number")
    published_at: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "publishedAt"
    )

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    resource_path: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "resourcePath"
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    title: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("title")
    updated_at: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("updatedAt")
    url: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_delete: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "viewerCanDelete"
    )
    viewer_can_pin: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "viewerCanPin"
    )
    viewer_can_react: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "viewerCanReact"
    )
    viewer_can_subscribe: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "viewerCanSubscribe"
    )
    viewer_can_update: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "viewerCanUpdate"
    )
    viewer_cannot_update_reasons: "TeamDiscussionGraphQLField" = (
        TeamDiscussionGraphQLField("viewerCannotUpdateReasons")
    )
    viewer_did_author: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "viewerDidAuthor"
    )
    viewer_subscription: "TeamDiscussionGraphQLField" = TeamDiscussionGraphQLField(
        "viewerSubscription"
    )

    def fields(
        self,
        *subfields: Union[
            TeamDiscussionGraphQLField,
            "ActorInterface",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "TeamDiscussionCommentConnectionFields",
            "TeamFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "TeamDiscussionFields":
        """Subfields should come from the TeamDiscussionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamDiscussionFields":
        self._alias = alias
        return self


class TeamDiscussionCommentFields(GraphQLField):
    @classmethod
    def author(cls) -> "ActorInterface":
        return ActorInterface("author")

    author_association: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("authorAssociation")
    )
    body: "TeamDiscussionCommentGraphQLField" = TeamDiscussionCommentGraphQLField(
        "body"
    )
    body_html: "TeamDiscussionCommentGraphQLField" = TeamDiscussionCommentGraphQLField(
        "bodyHTML"
    )
    body_text: "TeamDiscussionCommentGraphQLField" = TeamDiscussionCommentGraphQLField(
        "bodyText"
    )
    body_version: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("bodyVersion")
    )
    created_at: "TeamDiscussionCommentGraphQLField" = TeamDiscussionCommentGraphQLField(
        "createdAt"
    )
    created_via_email: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("createdViaEmail")
    )
    database_id: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("databaseId")
    )

    @classmethod
    def discussion(cls) -> "TeamDiscussionFields":
        return TeamDiscussionFields("discussion")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    id: "TeamDiscussionCommentGraphQLField" = TeamDiscussionCommentGraphQLField("id")
    includes_created_edit: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("includesCreatedEdit")
    )
    last_edited_at: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("lastEditedAt")
    )
    number: "TeamDiscussionCommentGraphQLField" = TeamDiscussionCommentGraphQLField(
        "number"
    )
    published_at: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("publishedAt")
    )

    @classmethod
    def reaction_groups(cls) -> "ReactionGroupFields":
        return ReactionGroupFields("reaction_groups")

    @classmethod
    def reactions(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        content: Optional[ReactionContent] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ReactionOrder] = None
    ) -> "ReactionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "content": {"type": "ReactionContent", "value": content},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ReactionOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReactionConnectionFields("reactions", arguments=cleared_arguments)

    resource_path: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("resourcePath")
    )
    updated_at: "TeamDiscussionCommentGraphQLField" = TeamDiscussionCommentGraphQLField(
        "updatedAt"
    )
    url: "TeamDiscussionCommentGraphQLField" = TeamDiscussionCommentGraphQLField("url")

    @classmethod
    def user_content_edits(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserContentEditConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserContentEditConnectionFields(
            "user_content_edits", arguments=cleared_arguments
        )

    viewer_can_delete: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("viewerCanDelete")
    )
    viewer_can_react: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("viewerCanReact")
    )
    viewer_can_update: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("viewerCanUpdate")
    )
    viewer_cannot_update_reasons: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("viewerCannotUpdateReasons")
    )
    viewer_did_author: "TeamDiscussionCommentGraphQLField" = (
        TeamDiscussionCommentGraphQLField("viewerDidAuthor")
    )

    def fields(
        self,
        *subfields: Union[
            TeamDiscussionCommentGraphQLField,
            "ActorInterface",
            "ReactionConnectionFields",
            "ReactionGroupFields",
            "TeamDiscussionFields",
            "UserContentEditConnectionFields",
        ]
    ) -> "TeamDiscussionCommentFields":
        """Subfields should come from the TeamDiscussionCommentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamDiscussionCommentFields":
        self._alias = alias
        return self


class TeamDiscussionCommentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TeamDiscussionCommentEdgeFields":
        return TeamDiscussionCommentEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "TeamDiscussionCommentFields":
        return TeamDiscussionCommentFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TeamDiscussionCommentConnectionGraphQLField" = (
        TeamDiscussionCommentConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            TeamDiscussionCommentConnectionGraphQLField,
            "PageInfoFields",
            "TeamDiscussionCommentEdgeFields",
            "TeamDiscussionCommentFields",
        ]
    ) -> "TeamDiscussionCommentConnectionFields":
        """Subfields should come from the TeamDiscussionCommentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamDiscussionCommentConnectionFields":
        self._alias = alias
        return self


class TeamDiscussionCommentEdgeFields(GraphQLField):
    cursor: "TeamDiscussionCommentEdgeGraphQLField" = (
        TeamDiscussionCommentEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "TeamDiscussionCommentFields":
        return TeamDiscussionCommentFields("node")

    def fields(
        self,
        *subfields: Union[
            TeamDiscussionCommentEdgeGraphQLField, "TeamDiscussionCommentFields"
        ]
    ) -> "TeamDiscussionCommentEdgeFields":
        """Subfields should come from the TeamDiscussionCommentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamDiscussionCommentEdgeFields":
        self._alias = alias
        return self


class TeamDiscussionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TeamDiscussionEdgeFields":
        return TeamDiscussionEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "TeamDiscussionFields":
        return TeamDiscussionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TeamDiscussionConnectionGraphQLField" = (
        TeamDiscussionConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            TeamDiscussionConnectionGraphQLField,
            "PageInfoFields",
            "TeamDiscussionEdgeFields",
            "TeamDiscussionFields",
        ]
    ) -> "TeamDiscussionConnectionFields":
        """Subfields should come from the TeamDiscussionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamDiscussionConnectionFields":
        self._alias = alias
        return self


class TeamDiscussionEdgeFields(GraphQLField):
    cursor: "TeamDiscussionEdgeGraphQLField" = TeamDiscussionEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "TeamDiscussionFields":
        return TeamDiscussionFields("node")

    def fields(
        self, *subfields: Union[TeamDiscussionEdgeGraphQLField, "TeamDiscussionFields"]
    ) -> "TeamDiscussionEdgeFields":
        """Subfields should come from the TeamDiscussionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamDiscussionEdgeFields":
        self._alias = alias
        return self


class TeamEdgeFields(GraphQLField):
    cursor: "TeamEdgeGraphQLField" = TeamEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "TeamFields":
        return TeamFields("node")

    def fields(
        self, *subfields: Union[TeamEdgeGraphQLField, "TeamFields"]
    ) -> "TeamEdgeFields":
        """Subfields should come from the TeamEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamEdgeFields":
        self._alias = alias
        return self


class TeamMemberConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TeamMemberEdgeFields":
        return TeamMemberEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TeamMemberConnectionGraphQLField" = TeamMemberConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            TeamMemberConnectionGraphQLField,
            "PageInfoFields",
            "TeamMemberEdgeFields",
            "UserFields",
        ]
    ) -> "TeamMemberConnectionFields":
        """Subfields should come from the TeamMemberConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamMemberConnectionFields":
        self._alias = alias
        return self


class TeamMemberEdgeFields(GraphQLField):
    cursor: "TeamMemberEdgeGraphQLField" = TeamMemberEdgeGraphQLField("cursor")
    member_access_resource_path: "TeamMemberEdgeGraphQLField" = (
        TeamMemberEdgeGraphQLField("memberAccessResourcePath")
    )
    member_access_url: "TeamMemberEdgeGraphQLField" = TeamMemberEdgeGraphQLField(
        "memberAccessUrl"
    )

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    role: "TeamMemberEdgeGraphQLField" = TeamMemberEdgeGraphQLField("role")

    def fields(
        self, *subfields: Union[TeamMemberEdgeGraphQLField, "UserFields"]
    ) -> "TeamMemberEdgeFields":
        """Subfields should come from the TeamMemberEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamMemberEdgeFields":
        self._alias = alias
        return self


class TeamRemoveMemberAuditEntryFields(GraphQLField):
    action: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("actorUrl")
    )
    created_at: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("createdAt")
    )
    id: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("id")
    )
    is_ldap_mapped: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("isLdapMapped")
    )
    operation_type: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    team_name: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("teamName")
    )
    team_resource_path: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("teamResourcePath")
    )
    team_url: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("teamUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "TeamRemoveMemberAuditEntryGraphQLField" = (
        TeamRemoveMemberAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            TeamRemoveMemberAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "TeamFields",
            "UserFields",
        ]
    ) -> "TeamRemoveMemberAuditEntryFields":
        """Subfields should come from the TeamRemoveMemberAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamRemoveMemberAuditEntryFields":
        self._alias = alias
        return self


class TeamRemoveRepositoryAuditEntryFields(GraphQLField):
    action: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("action")
    )
    actor: "AuditEntryActorUnion" = AuditEntryActorUnion("actor")
    actor_ip: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("actorIp")
    )

    @classmethod
    def actor_location(cls) -> "ActorLocationFields":
        return ActorLocationFields("actor_location")

    actor_login: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("actorLogin")
    )
    actor_resource_path: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("actorResourcePath")
    )
    actor_url: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("actorUrl")
    )
    created_at: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("createdAt")
    )
    id: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("id")
    )
    is_ldap_mapped: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("isLdapMapped")
    )
    operation_type: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("operationType")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    organization_name: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("organizationName")
    )
    organization_resource_path: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("organizationResourcePath")
    )
    organization_url: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("organizationUrl")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    repository_name: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("repositoryName")
    )
    repository_resource_path: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("repositoryResourcePath")
    )
    repository_url: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("repositoryUrl")
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    team_name: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("teamName")
    )
    team_resource_path: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("teamResourcePath")
    )
    team_url: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("teamUrl")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    user_login: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("userLogin")
    )
    user_resource_path: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("userResourcePath")
    )
    user_url: "TeamRemoveRepositoryAuditEntryGraphQLField" = (
        TeamRemoveRepositoryAuditEntryGraphQLField("userUrl")
    )

    def fields(
        self,
        *subfields: Union[
            TeamRemoveRepositoryAuditEntryGraphQLField,
            "ActorLocationFields",
            "AuditEntryActorUnion",
            "OrganizationFields",
            "RepositoryFields",
            "TeamFields",
            "UserFields",
        ]
    ) -> "TeamRemoveRepositoryAuditEntryFields":
        """Subfields should come from the TeamRemoveRepositoryAuditEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamRemoveRepositoryAuditEntryFields":
        self._alias = alias
        return self


class TeamRepositoryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TeamRepositoryEdgeFields":
        return TeamRepositoryEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "RepositoryFields":
        return RepositoryFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TeamRepositoryConnectionGraphQLField" = (
        TeamRepositoryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            TeamRepositoryConnectionGraphQLField,
            "PageInfoFields",
            "RepositoryFields",
            "TeamRepositoryEdgeFields",
        ]
    ) -> "TeamRepositoryConnectionFields":
        """Subfields should come from the TeamRepositoryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamRepositoryConnectionFields":
        self._alias = alias
        return self


class TeamRepositoryEdgeFields(GraphQLField):
    cursor: "TeamRepositoryEdgeGraphQLField" = TeamRepositoryEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "RepositoryFields":
        return RepositoryFields("node")

    permission: "TeamRepositoryEdgeGraphQLField" = TeamRepositoryEdgeGraphQLField(
        "permission"
    )

    def fields(
        self, *subfields: Union[TeamRepositoryEdgeGraphQLField, "RepositoryFields"]
    ) -> "TeamRepositoryEdgeFields":
        """Subfields should come from the TeamRepositoryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TeamRepositoryEdgeFields":
        self._alias = alias
        return self


class TextMatchFields(GraphQLField):
    fragment: "TextMatchGraphQLField" = TextMatchGraphQLField("fragment")

    @classmethod
    def highlights(cls) -> "TextMatchHighlightFields":
        return TextMatchHighlightFields("highlights")

    property: "TextMatchGraphQLField" = TextMatchGraphQLField("property")

    def fields(
        self, *subfields: Union[TextMatchGraphQLField, "TextMatchHighlightFields"]
    ) -> "TextMatchFields":
        """Subfields should come from the TextMatchFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TextMatchFields":
        self._alias = alias
        return self


class TextMatchHighlightFields(GraphQLField):
    begin_indice: "TextMatchHighlightGraphQLField" = TextMatchHighlightGraphQLField(
        "beginIndice"
    )
    end_indice: "TextMatchHighlightGraphQLField" = TextMatchHighlightGraphQLField(
        "endIndice"
    )
    text: "TextMatchHighlightGraphQLField" = TextMatchHighlightGraphQLField("text")

    def fields(
        self, *subfields: TextMatchHighlightGraphQLField
    ) -> "TextMatchHighlightFields":
        """Subfields should come from the TextMatchHighlightFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TextMatchHighlightFields":
        self._alias = alias
        return self


class TopicFields(GraphQLField):
    id: "TopicGraphQLField" = TopicGraphQLField("id")
    name: "TopicGraphQLField" = TopicGraphQLField("name")

    @classmethod
    def related_topics(cls, *, first: Optional[int] = None) -> "TopicFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TopicFields("related_topics", arguments=cleared_arguments)

    @classmethod
    def repositories(
        cls,
        *,
        affiliations: Optional[RepositoryAffiliation] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        has_issues_enabled: Optional[bool] = None,
        is_locked: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None,
        owner_affiliations: Optional[RepositoryAffiliation] = None,
        privacy: Optional[RepositoryPrivacy] = None,
        sponsorable_only: Optional[bool] = None,
        visibility: Optional[RepositoryVisibility] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "affiliations": {"type": "RepositoryAffiliation", "value": affiliations},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "hasIssuesEnabled": {"type": "Boolean", "value": has_issues_enabled},
            "isLocked": {"type": "Boolean", "value": is_locked},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
            "ownerAffiliations": {
                "type": "RepositoryAffiliation",
                "value": owner_affiliations,
            },
            "privacy": {"type": "RepositoryPrivacy", "value": privacy},
            "sponsorableOnly": {"type": "Boolean", "value": sponsorable_only},
            "visibility": {"type": "RepositoryVisibility", "value": visibility},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields("repositories", arguments=cleared_arguments)

    stargazer_count: "TopicGraphQLField" = TopicGraphQLField("stargazerCount")

    @classmethod
    def stargazers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[StarOrder] = None
    ) -> "StargazerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "StarOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StargazerConnectionFields("stargazers", arguments=cleared_arguments)

    viewer_has_starred: "TopicGraphQLField" = TopicGraphQLField("viewerHasStarred")

    def fields(
        self,
        *subfields: Union[
            TopicGraphQLField,
            "RepositoryConnectionFields",
            "StargazerConnectionFields",
            "TopicFields",
        ]
    ) -> "TopicFields":
        """Subfields should come from the TopicFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TopicFields":
        self._alias = alias
        return self


class TopicAuditEntryDataInterface(GraphQLField):
    @classmethod
    def topic(cls) -> "TopicFields":
        return TopicFields("topic")

    topic_name: "TopicAuditEntryDataGraphQLField" = TopicAuditEntryDataGraphQLField(
        "topicName"
    )

    def fields(
        self, *subfields: Union[TopicAuditEntryDataGraphQLField, "TopicFields"]
    ) -> "TopicAuditEntryDataInterface":
        """Subfields should come from the TopicAuditEntryDataInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TopicAuditEntryDataInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "TopicAuditEntryDataInterface":
        self._inline_fragments[type_name] = subfields
        return self


class TransferEnterpriseOrganizationPayloadFields(GraphQLField):
    client_mutation_id: "TransferEnterpriseOrganizationPayloadGraphQLField" = (
        TransferEnterpriseOrganizationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    def fields(
        self,
        *subfields: Union[
            TransferEnterpriseOrganizationPayloadGraphQLField, "OrganizationFields"
        ]
    ) -> "TransferEnterpriseOrganizationPayloadFields":
        """Subfields should come from the TransferEnterpriseOrganizationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TransferEnterpriseOrganizationPayloadFields":
        self._alias = alias
        return self


class TransferIssuePayloadFields(GraphQLField):
    client_mutation_id: "TransferIssuePayloadGraphQLField" = (
        TransferIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[TransferIssuePayloadGraphQLField, "IssueFields"]
    ) -> "TransferIssuePayloadFields":
        """Subfields should come from the TransferIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TransferIssuePayloadFields":
        self._alias = alias
        return self


class TransferredEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "TransferredEventGraphQLField" = TransferredEventGraphQLField(
        "createdAt"
    )

    @classmethod
    def from_repository(cls) -> "RepositoryFields":
        return RepositoryFields("from_repository")

    id: "TransferredEventGraphQLField" = TransferredEventGraphQLField("id")

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self,
        *subfields: Union[
            TransferredEventGraphQLField,
            "ActorInterface",
            "IssueFields",
            "RepositoryFields",
        ]
    ) -> "TransferredEventFields":
        """Subfields should come from the TransferredEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TransferredEventFields":
        self._alias = alias
        return self


class TreeFields(GraphQLField):
    abbreviated_oid: "TreeGraphQLField" = TreeGraphQLField("abbreviatedOid")
    commit_resource_path: "TreeGraphQLField" = TreeGraphQLField("commitResourcePath")
    commit_url: "TreeGraphQLField" = TreeGraphQLField("commitUrl")

    @classmethod
    def entries(cls) -> "TreeEntryFields":
        return TreeEntryFields("entries")

    id: "TreeGraphQLField" = TreeGraphQLField("id")
    oid: "TreeGraphQLField" = TreeGraphQLField("oid")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[TreeGraphQLField, "RepositoryFields", "TreeEntryFields"]
    ) -> "TreeFields":
        """Subfields should come from the TreeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TreeFields":
        self._alias = alias
        return self


class TreeEntryFields(GraphQLField):
    extension: "TreeEntryGraphQLField" = TreeEntryGraphQLField("extension")
    is_generated: "TreeEntryGraphQLField" = TreeEntryGraphQLField("isGenerated")

    @classmethod
    def language(cls) -> "LanguageFields":
        return LanguageFields("language")

    line_count: "TreeEntryGraphQLField" = TreeEntryGraphQLField("lineCount")
    mode: "TreeEntryGraphQLField" = TreeEntryGraphQLField("mode")
    name: "TreeEntryGraphQLField" = TreeEntryGraphQLField("name")
    name_raw: "TreeEntryGraphQLField" = TreeEntryGraphQLField("nameRaw")

    @classmethod
    def object(cls) -> "GitObjectInterface":
        return GitObjectInterface("object")

    oid: "TreeEntryGraphQLField" = TreeEntryGraphQLField("oid")
    path: "TreeEntryGraphQLField" = TreeEntryGraphQLField("path")
    path_raw: "TreeEntryGraphQLField" = TreeEntryGraphQLField("pathRaw")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    size: "TreeEntryGraphQLField" = TreeEntryGraphQLField("size")

    @classmethod
    def submodule(cls) -> "SubmoduleFields":
        return SubmoduleFields("submodule")

    type: "TreeEntryGraphQLField" = TreeEntryGraphQLField("type")

    def fields(
        self,
        *subfields: Union[
            TreeEntryGraphQLField,
            "GitObjectInterface",
            "LanguageFields",
            "RepositoryFields",
            "SubmoduleFields",
        ]
    ) -> "TreeEntryFields":
        """Subfields should come from the TreeEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TreeEntryFields":
        self._alias = alias
        return self


class UnarchiveProjectV2ItemPayloadFields(GraphQLField):
    client_mutation_id: "UnarchiveProjectV2ItemPayloadGraphQLField" = (
        UnarchiveProjectV2ItemPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("item")

    def fields(
        self,
        *subfields: Union[
            UnarchiveProjectV2ItemPayloadGraphQLField, "ProjectV2ItemFields"
        ]
    ) -> "UnarchiveProjectV2ItemPayloadFields":
        """Subfields should come from the UnarchiveProjectV2ItemPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnarchiveProjectV2ItemPayloadFields":
        self._alias = alias
        return self


class UnarchiveRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "UnarchiveRepositoryPayloadGraphQLField" = (
        UnarchiveRepositoryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[UnarchiveRepositoryPayloadGraphQLField, "RepositoryFields"]
    ) -> "UnarchiveRepositoryPayloadFields":
        """Subfields should come from the UnarchiveRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnarchiveRepositoryPayloadFields":
        self._alias = alias
        return self


class UnassignedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    @classmethod
    def assignable(cls) -> "AssignableInterface":
        return AssignableInterface("assignable")

    assignee: "AssigneeUnion" = AssigneeUnion("assignee")
    created_at: "UnassignedEventGraphQLField" = UnassignedEventGraphQLField("createdAt")
    id: "UnassignedEventGraphQLField" = UnassignedEventGraphQLField("id")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            UnassignedEventGraphQLField,
            "ActorInterface",
            "AssignableInterface",
            "AssigneeUnion",
            "UserFields",
        ]
    ) -> "UnassignedEventFields":
        """Subfields should come from the UnassignedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnassignedEventFields":
        self._alias = alias
        return self


class UnfollowOrganizationPayloadFields(GraphQLField):
    client_mutation_id: "UnfollowOrganizationPayloadGraphQLField" = (
        UnfollowOrganizationPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    def fields(
        self,
        *subfields: Union[UnfollowOrganizationPayloadGraphQLField, "OrganizationFields"]
    ) -> "UnfollowOrganizationPayloadFields":
        """Subfields should come from the UnfollowOrganizationPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnfollowOrganizationPayloadFields":
        self._alias = alias
        return self


class UnfollowUserPayloadFields(GraphQLField):
    client_mutation_id: "UnfollowUserPayloadGraphQLField" = (
        UnfollowUserPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[UnfollowUserPayloadGraphQLField, "UserFields"]
    ) -> "UnfollowUserPayloadFields":
        """Subfields should come from the UnfollowUserPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnfollowUserPayloadFields":
        self._alias = alias
        return self


class UniformResourceLocatableInterface(GraphQLField):
    resource_path: "UniformResourceLocatableGraphQLField" = (
        UniformResourceLocatableGraphQLField("resourcePath")
    )
    url: "UniformResourceLocatableGraphQLField" = UniformResourceLocatableGraphQLField(
        "url"
    )

    def fields(
        self, *subfields: UniformResourceLocatableGraphQLField
    ) -> "UniformResourceLocatableInterface":
        """Subfields should come from the UniformResourceLocatableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UniformResourceLocatableInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "UniformResourceLocatableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class UnlabeledEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "UnlabeledEventGraphQLField" = UnlabeledEventGraphQLField("createdAt")
    id: "UnlabeledEventGraphQLField" = UnlabeledEventGraphQLField("id")

    @classmethod
    def label(cls) -> "LabelFields":
        return LabelFields("label")

    @classmethod
    def labelable(cls) -> "LabelableInterface":
        return LabelableInterface("labelable")

    def fields(
        self,
        *subfields: Union[
            UnlabeledEventGraphQLField,
            "ActorInterface",
            "LabelFields",
            "LabelableInterface",
        ]
    ) -> "UnlabeledEventFields":
        """Subfields should come from the UnlabeledEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnlabeledEventFields":
        self._alias = alias
        return self


class UnlinkProjectV2FromRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "UnlinkProjectV2FromRepositoryPayloadGraphQLField" = (
        UnlinkProjectV2FromRepositoryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            UnlinkProjectV2FromRepositoryPayloadGraphQLField, "RepositoryFields"
        ]
    ) -> "UnlinkProjectV2FromRepositoryPayloadFields":
        """Subfields should come from the UnlinkProjectV2FromRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnlinkProjectV2FromRepositoryPayloadFields":
        self._alias = alias
        return self


class UnlinkProjectV2FromTeamPayloadFields(GraphQLField):
    client_mutation_id: "UnlinkProjectV2FromTeamPayloadGraphQLField" = (
        UnlinkProjectV2FromTeamPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    def fields(
        self,
        *subfields: Union[UnlinkProjectV2FromTeamPayloadGraphQLField, "TeamFields"]
    ) -> "UnlinkProjectV2FromTeamPayloadFields":
        """Subfields should come from the UnlinkProjectV2FromTeamPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnlinkProjectV2FromTeamPayloadFields":
        self._alias = alias
        return self


class UnlinkRepositoryFromProjectPayloadFields(GraphQLField):
    client_mutation_id: "UnlinkRepositoryFromProjectPayloadGraphQLField" = (
        UnlinkRepositoryFromProjectPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            UnlinkRepositoryFromProjectPayloadGraphQLField,
            "ProjectFields",
            "RepositoryFields",
        ]
    ) -> "UnlinkRepositoryFromProjectPayloadFields":
        """Subfields should come from the UnlinkRepositoryFromProjectPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnlinkRepositoryFromProjectPayloadFields":
        self._alias = alias
        return self


class UnlockLockablePayloadFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    client_mutation_id: "UnlockLockablePayloadGraphQLField" = (
        UnlockLockablePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def unlocked_record(cls) -> "LockableInterface":
        return LockableInterface("unlocked_record")

    def fields(
        self,
        *subfields: Union[
            UnlockLockablePayloadGraphQLField, "ActorInterface", "LockableInterface"
        ]
    ) -> "UnlockLockablePayloadFields":
        """Subfields should come from the UnlockLockablePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnlockLockablePayloadFields":
        self._alias = alias
        return self


class UnlockedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "UnlockedEventGraphQLField" = UnlockedEventGraphQLField("createdAt")
    id: "UnlockedEventGraphQLField" = UnlockedEventGraphQLField("id")

    @classmethod
    def lockable(cls) -> "LockableInterface":
        return LockableInterface("lockable")

    def fields(
        self,
        *subfields: Union[
            UnlockedEventGraphQLField, "ActorInterface", "LockableInterface"
        ]
    ) -> "UnlockedEventFields":
        """Subfields should come from the UnlockedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnlockedEventFields":
        self._alias = alias
        return self


class UnmarkDiscussionCommentAsAnswerPayloadFields(GraphQLField):
    client_mutation_id: "UnmarkDiscussionCommentAsAnswerPayloadGraphQLField" = (
        UnmarkDiscussionCommentAsAnswerPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    def fields(
        self,
        *subfields: Union[
            UnmarkDiscussionCommentAsAnswerPayloadGraphQLField, "DiscussionFields"
        ]
    ) -> "UnmarkDiscussionCommentAsAnswerPayloadFields":
        """Subfields should come from the UnmarkDiscussionCommentAsAnswerPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnmarkDiscussionCommentAsAnswerPayloadFields":
        self._alias = alias
        return self


class UnmarkFileAsViewedPayloadFields(GraphQLField):
    client_mutation_id: "UnmarkFileAsViewedPayloadGraphQLField" = (
        UnmarkFileAsViewedPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[UnmarkFileAsViewedPayloadGraphQLField, "PullRequestFields"]
    ) -> "UnmarkFileAsViewedPayloadFields":
        """Subfields should come from the UnmarkFileAsViewedPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnmarkFileAsViewedPayloadFields":
        self._alias = alias
        return self


class UnmarkIssueAsDuplicatePayloadFields(GraphQLField):
    client_mutation_id: "UnmarkIssueAsDuplicatePayloadGraphQLField" = (
        UnmarkIssueAsDuplicatePayloadGraphQLField("clientMutationId")
    )
    duplicate: "IssueOrPullRequestUnion" = IssueOrPullRequestUnion("duplicate")

    def fields(
        self,
        *subfields: Union[
            UnmarkIssueAsDuplicatePayloadGraphQLField, "IssueOrPullRequestUnion"
        ]
    ) -> "UnmarkIssueAsDuplicatePayloadFields":
        """Subfields should come from the UnmarkIssueAsDuplicatePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnmarkIssueAsDuplicatePayloadFields":
        self._alias = alias
        return self


class UnmarkProjectV2AsTemplatePayloadFields(GraphQLField):
    client_mutation_id: "UnmarkProjectV2AsTemplatePayloadGraphQLField" = (
        UnmarkProjectV2AsTemplatePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_v_2(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project_v_2")

    def fields(
        self,
        *subfields: Union[
            UnmarkProjectV2AsTemplatePayloadGraphQLField, "ProjectV2Fields"
        ]
    ) -> "UnmarkProjectV2AsTemplatePayloadFields":
        """Subfields should come from the UnmarkProjectV2AsTemplatePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnmarkProjectV2AsTemplatePayloadFields":
        self._alias = alias
        return self


class UnmarkedAsDuplicateEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    canonical: "IssueOrPullRequestUnion" = IssueOrPullRequestUnion("canonical")
    created_at: "UnmarkedAsDuplicateEventGraphQLField" = (
        UnmarkedAsDuplicateEventGraphQLField("createdAt")
    )
    duplicate: "IssueOrPullRequestUnion" = IssueOrPullRequestUnion("duplicate")
    id: "UnmarkedAsDuplicateEventGraphQLField" = UnmarkedAsDuplicateEventGraphQLField(
        "id"
    )
    is_cross_repository: "UnmarkedAsDuplicateEventGraphQLField" = (
        UnmarkedAsDuplicateEventGraphQLField("isCrossRepository")
    )

    def fields(
        self,
        *subfields: Union[
            UnmarkedAsDuplicateEventGraphQLField,
            "ActorInterface",
            "IssueOrPullRequestUnion",
        ]
    ) -> "UnmarkedAsDuplicateEventFields":
        """Subfields should come from the UnmarkedAsDuplicateEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnmarkedAsDuplicateEventFields":
        self._alias = alias
        return self


class UnminimizeCommentPayloadFields(GraphQLField):
    client_mutation_id: "UnminimizeCommentPayloadGraphQLField" = (
        UnminimizeCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def unminimized_comment(cls) -> "MinimizableInterface":
        return MinimizableInterface("unminimized_comment")

    def fields(
        self,
        *subfields: Union[UnminimizeCommentPayloadGraphQLField, "MinimizableInterface"]
    ) -> "UnminimizeCommentPayloadFields":
        """Subfields should come from the UnminimizeCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnminimizeCommentPayloadFields":
        self._alias = alias
        return self


class UnpinIssuePayloadFields(GraphQLField):
    client_mutation_id: "UnpinIssuePayloadGraphQLField" = UnpinIssuePayloadGraphQLField(
        "clientMutationId"
    )
    id: "UnpinIssuePayloadGraphQLField" = UnpinIssuePayloadGraphQLField("id")

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[UnpinIssuePayloadGraphQLField, "IssueFields"]
    ) -> "UnpinIssuePayloadFields":
        """Subfields should come from the UnpinIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnpinIssuePayloadFields":
        self._alias = alias
        return self


class UnpinnedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "UnpinnedEventGraphQLField" = UnpinnedEventGraphQLField("createdAt")
    id: "UnpinnedEventGraphQLField" = UnpinnedEventGraphQLField("id")

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self,
        *subfields: Union[UnpinnedEventGraphQLField, "ActorInterface", "IssueFields"]
    ) -> "UnpinnedEventFields":
        """Subfields should come from the UnpinnedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnpinnedEventFields":
        self._alias = alias
        return self


class UnresolveReviewThreadPayloadFields(GraphQLField):
    client_mutation_id: "UnresolveReviewThreadPayloadGraphQLField" = (
        UnresolveReviewThreadPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def thread(cls) -> "PullRequestReviewThreadFields":
        return PullRequestReviewThreadFields("thread")

    def fields(
        self,
        *subfields: Union[
            UnresolveReviewThreadPayloadGraphQLField, "PullRequestReviewThreadFields"
        ]
    ) -> "UnresolveReviewThreadPayloadFields":
        """Subfields should come from the UnresolveReviewThreadPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnresolveReviewThreadPayloadFields":
        self._alias = alias
        return self


class UnsubscribedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    created_at: "UnsubscribedEventGraphQLField" = UnsubscribedEventGraphQLField(
        "createdAt"
    )
    id: "UnsubscribedEventGraphQLField" = UnsubscribedEventGraphQLField("id")

    @classmethod
    def subscribable(cls) -> "SubscribableInterface":
        return SubscribableInterface("subscribable")

    def fields(
        self,
        *subfields: Union[
            UnsubscribedEventGraphQLField, "ActorInterface", "SubscribableInterface"
        ]
    ) -> "UnsubscribedEventFields":
        """Subfields should come from the UnsubscribedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnsubscribedEventFields":
        self._alias = alias
        return self


class UpdatableInterface(GraphQLField):
    viewer_can_update: "UpdatableGraphQLField" = UpdatableGraphQLField(
        "viewerCanUpdate"
    )

    def fields(self, *subfields: UpdatableGraphQLField) -> "UpdatableInterface":
        """Subfields should come from the UpdatableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdatableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "UpdatableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class UpdatableCommentInterface(GraphQLField):
    viewer_cannot_update_reasons: "UpdatableCommentGraphQLField" = (
        UpdatableCommentGraphQLField("viewerCannotUpdateReasons")
    )

    def fields(
        self, *subfields: UpdatableCommentGraphQLField
    ) -> "UpdatableCommentInterface":
        """Subfields should come from the UpdatableCommentInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdatableCommentInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "UpdatableCommentInterface":
        self._inline_fragments[type_name] = subfields
        return self


class UpdateBranchProtectionRulePayloadFields(GraphQLField):
    @classmethod
    def branch_protection_rule(cls) -> "BranchProtectionRuleFields":
        return BranchProtectionRuleFields("branch_protection_rule")

    client_mutation_id: "UpdateBranchProtectionRulePayloadGraphQLField" = (
        UpdateBranchProtectionRulePayloadGraphQLField("clientMutationId")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateBranchProtectionRulePayloadGraphQLField, "BranchProtectionRuleFields"
        ]
    ) -> "UpdateBranchProtectionRulePayloadFields":
        """Subfields should come from the UpdateBranchProtectionRulePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateBranchProtectionRulePayloadFields":
        self._alias = alias
        return self


class UpdateCheckRunPayloadFields(GraphQLField):
    @classmethod
    def check_run(cls) -> "CheckRunFields":
        return CheckRunFields("check_run")

    client_mutation_id: "UpdateCheckRunPayloadGraphQLField" = (
        UpdateCheckRunPayloadGraphQLField("clientMutationId")
    )

    def fields(
        self, *subfields: Union[UpdateCheckRunPayloadGraphQLField, "CheckRunFields"]
    ) -> "UpdateCheckRunPayloadFields":
        """Subfields should come from the UpdateCheckRunPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateCheckRunPayloadFields":
        self._alias = alias
        return self


class UpdateCheckSuitePreferencesPayloadFields(GraphQLField):
    client_mutation_id: "UpdateCheckSuitePreferencesPayloadGraphQLField" = (
        UpdateCheckSuitePreferencesPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            UpdateCheckSuitePreferencesPayloadGraphQLField, "RepositoryFields"
        ]
    ) -> "UpdateCheckSuitePreferencesPayloadFields":
        """Subfields should come from the UpdateCheckSuitePreferencesPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateCheckSuitePreferencesPayloadFields":
        self._alias = alias
        return self


class UpdateDiscussionCommentPayloadFields(GraphQLField):
    client_mutation_id: "UpdateDiscussionCommentPayloadGraphQLField" = (
        UpdateDiscussionCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def comment(cls) -> "DiscussionCommentFields":
        return DiscussionCommentFields("comment")

    def fields(
        self,
        *subfields: Union[
            UpdateDiscussionCommentPayloadGraphQLField, "DiscussionCommentFields"
        ]
    ) -> "UpdateDiscussionCommentPayloadFields":
        """Subfields should come from the UpdateDiscussionCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateDiscussionCommentPayloadFields":
        self._alias = alias
        return self


class UpdateDiscussionPayloadFields(GraphQLField):
    client_mutation_id: "UpdateDiscussionPayloadGraphQLField" = (
        UpdateDiscussionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def discussion(cls) -> "DiscussionFields":
        return DiscussionFields("discussion")

    def fields(
        self, *subfields: Union[UpdateDiscussionPayloadGraphQLField, "DiscussionFields"]
    ) -> "UpdateDiscussionPayloadFields":
        """Subfields should come from the UpdateDiscussionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateDiscussionPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseAdministratorRolePayloadFields(GraphQLField):
    client_mutation_id: "UpdateEnterpriseAdministratorRolePayloadGraphQLField" = (
        UpdateEnterpriseAdministratorRolePayloadGraphQLField("clientMutationId")
    )
    message: "UpdateEnterpriseAdministratorRolePayloadGraphQLField" = (
        UpdateEnterpriseAdministratorRolePayloadGraphQLField("message")
    )

    def fields(
        self, *subfields: UpdateEnterpriseAdministratorRolePayloadGraphQLField
    ) -> "UpdateEnterpriseAdministratorRolePayloadFields":
        """Subfields should come from the UpdateEnterpriseAdministratorRolePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateEnterpriseAdministratorRolePayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadGraphQLField"
    ) = UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: (
        "UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadGraphQLField"
    ) = UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadGraphQLField"
    ) = UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadGraphQLField" = (
        UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseDeployKeySettingPayloadFields(GraphQLField):
    client_mutation_id: "UpdateEnterpriseDeployKeySettingPayloadGraphQLField" = (
        UpdateEnterpriseDeployKeySettingPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "UpdateEnterpriseDeployKeySettingPayloadGraphQLField" = (
        UpdateEnterpriseDeployKeySettingPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseDeployKeySettingPayloadGraphQLField, "EnterpriseFields"
        ]
    ) -> "UpdateEnterpriseDeployKeySettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseDeployKeySettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateEnterpriseDeployKeySettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields(
    GraphQLField
):
    client_mutation_id: (
        "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: (
        "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: (
        "UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadGraphQLField" = (
        UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: (
        "UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: (
        "UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseMembersCanMakePurchasesSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanMakePurchasesSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "UpdateEnterpriseMembersCanMakePurchasesSettingPayloadGraphQLField" = (
        UpdateEnterpriseMembersCanMakePurchasesSettingPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseMembersCanMakePurchasesSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields(
    GraphQLField
):
    client_mutation_id: (
        "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: (
        "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields(
    GraphQLField
):
    client_mutation_id: (
        "UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: (
        "UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadGraphQLField"
    ) = UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseOrganizationProjectsSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseOrganizationProjectsSettingPayloadGraphQLField"
    ) = UpdateEnterpriseOrganizationProjectsSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "UpdateEnterpriseOrganizationProjectsSettingPayloadGraphQLField" = (
        UpdateEnterpriseOrganizationProjectsSettingPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseOrganizationProjectsSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseOrganizationProjectsSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseOrganizationProjectsSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseOrganizationProjectsSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseOwnerOrganizationRolePayloadFields(GraphQLField):
    client_mutation_id: "UpdateEnterpriseOwnerOrganizationRolePayloadGraphQLField" = (
        UpdateEnterpriseOwnerOrganizationRolePayloadGraphQLField("clientMutationId")
    )
    message: "UpdateEnterpriseOwnerOrganizationRolePayloadGraphQLField" = (
        UpdateEnterpriseOwnerOrganizationRolePayloadGraphQLField("message")
    )

    def fields(
        self, *subfields: UpdateEnterpriseOwnerOrganizationRolePayloadGraphQLField
    ) -> "UpdateEnterpriseOwnerOrganizationRolePayloadFields":
        """Subfields should come from the UpdateEnterpriseOwnerOrganizationRolePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateEnterpriseOwnerOrganizationRolePayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseProfilePayloadFields(GraphQLField):
    client_mutation_id: "UpdateEnterpriseProfilePayloadGraphQLField" = (
        UpdateEnterpriseProfilePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseProfilePayloadGraphQLField, "EnterpriseFields"
        ]
    ) -> "UpdateEnterpriseProfilePayloadFields":
        """Subfields should come from the UpdateEnterpriseProfilePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateEnterpriseProfilePayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseRepositoryProjectsSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseRepositoryProjectsSettingPayloadGraphQLField"
    ) = UpdateEnterpriseRepositoryProjectsSettingPayloadGraphQLField("clientMutationId")

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "UpdateEnterpriseRepositoryProjectsSettingPayloadGraphQLField" = (
        UpdateEnterpriseRepositoryProjectsSettingPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseRepositoryProjectsSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseRepositoryProjectsSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseRepositoryProjectsSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseRepositoryProjectsSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseTeamDiscussionsSettingPayloadFields(GraphQLField):
    client_mutation_id: "UpdateEnterpriseTeamDiscussionsSettingPayloadGraphQLField" = (
        UpdateEnterpriseTeamDiscussionsSettingPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "UpdateEnterpriseTeamDiscussionsSettingPayloadGraphQLField" = (
        UpdateEnterpriseTeamDiscussionsSettingPayloadGraphQLField("message")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseTeamDiscussionsSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseTeamDiscussionsSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseTeamDiscussionsSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseTeamDiscussionsSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields(
    GraphQLField
):
    client_mutation_id: "UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadGraphQLField" = UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: "UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadGraphQLField" = UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadGraphQLField"
    ) = UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def enterprise(cls) -> "EnterpriseFields":
        return EnterpriseFields("enterprise")

    message: (
        "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadGraphQLField"
    ) = UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadGraphQLField(
        "message"
    )

    def fields(
        self,
        *subfields: Union[
            UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadGraphQLField,
            "EnterpriseFields",
        ]
    ) -> "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields":
        """Subfields should come from the UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields":
        self._alias = alias
        return self


class UpdateEnvironmentPayloadFields(GraphQLField):
    client_mutation_id: "UpdateEnvironmentPayloadGraphQLField" = (
        UpdateEnvironmentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def environment(cls) -> "EnvironmentFields":
        return EnvironmentFields("environment")

    def fields(
        self,
        *subfields: Union[UpdateEnvironmentPayloadGraphQLField, "EnvironmentFields"]
    ) -> "UpdateEnvironmentPayloadFields":
        """Subfields should come from the UpdateEnvironmentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateEnvironmentPayloadFields":
        self._alias = alias
        return self


class UpdateIpAllowListEnabledSettingPayloadFields(GraphQLField):
    client_mutation_id: "UpdateIpAllowListEnabledSettingPayloadGraphQLField" = (
        UpdateIpAllowListEnabledSettingPayloadGraphQLField("clientMutationId")
    )
    owner: "IpAllowListOwnerUnion" = IpAllowListOwnerUnion("owner")

    def fields(
        self,
        *subfields: Union[
            UpdateIpAllowListEnabledSettingPayloadGraphQLField, "IpAllowListOwnerUnion"
        ]
    ) -> "UpdateIpAllowListEnabledSettingPayloadFields":
        """Subfields should come from the UpdateIpAllowListEnabledSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateIpAllowListEnabledSettingPayloadFields":
        self._alias = alias
        return self


class UpdateIpAllowListEntryPayloadFields(GraphQLField):
    client_mutation_id: "UpdateIpAllowListEntryPayloadGraphQLField" = (
        UpdateIpAllowListEntryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def ip_allow_list_entry(cls) -> "IpAllowListEntryFields":
        return IpAllowListEntryFields("ip_allow_list_entry")

    def fields(
        self,
        *subfields: Union[
            UpdateIpAllowListEntryPayloadGraphQLField, "IpAllowListEntryFields"
        ]
    ) -> "UpdateIpAllowListEntryPayloadFields":
        """Subfields should come from the UpdateIpAllowListEntryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateIpAllowListEntryPayloadFields":
        self._alias = alias
        return self


class UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateIpAllowListForInstalledAppsEnabledSettingPayloadGraphQLField"
    ) = UpdateIpAllowListForInstalledAppsEnabledSettingPayloadGraphQLField(
        "clientMutationId"
    )
    owner: "IpAllowListOwnerUnion" = IpAllowListOwnerUnion("owner")

    def fields(
        self,
        *subfields: Union[
            UpdateIpAllowListForInstalledAppsEnabledSettingPayloadGraphQLField,
            "IpAllowListOwnerUnion",
        ]
    ) -> "UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields":
        """Subfields should come from the UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields":
        self._alias = alias
        return self


class UpdateIssueCommentPayloadFields(GraphQLField):
    client_mutation_id: "UpdateIssueCommentPayloadGraphQLField" = (
        UpdateIssueCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue_comment(cls) -> "IssueCommentFields":
        return IssueCommentFields("issue_comment")

    def fields(
        self,
        *subfields: Union[UpdateIssueCommentPayloadGraphQLField, "IssueCommentFields"]
    ) -> "UpdateIssueCommentPayloadFields":
        """Subfields should come from the UpdateIssueCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateIssueCommentPayloadFields":
        self._alias = alias
        return self


class UpdateIssueIssueTypePayloadFields(GraphQLField):
    client_mutation_id: "UpdateIssueIssueTypePayloadGraphQLField" = (
        UpdateIssueIssueTypePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self, *subfields: Union[UpdateIssueIssueTypePayloadGraphQLField, "IssueFields"]
    ) -> "UpdateIssueIssueTypePayloadFields":
        """Subfields should come from the UpdateIssueIssueTypePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateIssueIssueTypePayloadFields":
        self._alias = alias
        return self


class UpdateIssuePayloadFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    client_mutation_id: "UpdateIssuePayloadGraphQLField" = (
        UpdateIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue(cls) -> "IssueFields":
        return IssueFields("issue")

    def fields(
        self,
        *subfields: Union[
            UpdateIssuePayloadGraphQLField, "ActorInterface", "IssueFields"
        ]
    ) -> "UpdateIssuePayloadFields":
        """Subfields should come from the UpdateIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateIssuePayloadFields":
        self._alias = alias
        return self


class UpdateIssueTypePayloadFields(GraphQLField):
    client_mutation_id: "UpdateIssueTypePayloadGraphQLField" = (
        UpdateIssueTypePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def issue_type(cls) -> "IssueTypeFields":
        return IssueTypeFields("issue_type")

    def fields(
        self, *subfields: Union[UpdateIssueTypePayloadGraphQLField, "IssueTypeFields"]
    ) -> "UpdateIssueTypePayloadFields":
        """Subfields should come from the UpdateIssueTypePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateIssueTypePayloadFields":
        self._alias = alias
        return self


class UpdateLabelPayloadFields(GraphQLField):
    client_mutation_id: "UpdateLabelPayloadGraphQLField" = (
        UpdateLabelPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def label(cls) -> "LabelFields":
        return LabelFields("label")

    def fields(
        self, *subfields: Union[UpdateLabelPayloadGraphQLField, "LabelFields"]
    ) -> "UpdateLabelPayloadFields":
        """Subfields should come from the UpdateLabelPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateLabelPayloadFields":
        self._alias = alias
        return self


class UpdateNotificationRestrictionSettingPayloadFields(GraphQLField):
    client_mutation_id: "UpdateNotificationRestrictionSettingPayloadGraphQLField" = (
        UpdateNotificationRestrictionSettingPayloadGraphQLField("clientMutationId")
    )
    owner: "VerifiableDomainOwnerUnion" = VerifiableDomainOwnerUnion("owner")

    def fields(
        self,
        *subfields: Union[
            UpdateNotificationRestrictionSettingPayloadGraphQLField,
            "VerifiableDomainOwnerUnion",
        ]
    ) -> "UpdateNotificationRestrictionSettingPayloadFields":
        """Subfields should come from the UpdateNotificationRestrictionSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateNotificationRestrictionSettingPayloadFields":
        self._alias = alias
        return self


class UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadGraphQLField"
    ) = UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadGraphQLField(
        "clientMutationId"
    )
    message: (
        "UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadGraphQLField"
    ) = UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadGraphQLField(
        "message"
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    def fields(
        self,
        *subfields: Union[
            UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadGraphQLField,
            "OrganizationFields",
        ]
    ) -> "UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields":
        """Subfields should come from the UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields":
        self._alias = alias
        return self


class UpdateOrganizationWebCommitSignoffSettingPayloadFields(GraphQLField):
    client_mutation_id: (
        "UpdateOrganizationWebCommitSignoffSettingPayloadGraphQLField"
    ) = UpdateOrganizationWebCommitSignoffSettingPayloadGraphQLField("clientMutationId")
    message: "UpdateOrganizationWebCommitSignoffSettingPayloadGraphQLField" = (
        UpdateOrganizationWebCommitSignoffSettingPayloadGraphQLField("message")
    )

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    def fields(
        self,
        *subfields: Union[
            UpdateOrganizationWebCommitSignoffSettingPayloadGraphQLField,
            "OrganizationFields",
        ]
    ) -> "UpdateOrganizationWebCommitSignoffSettingPayloadFields":
        """Subfields should come from the UpdateOrganizationWebCommitSignoffSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateOrganizationWebCommitSignoffSettingPayloadFields":
        self._alias = alias
        return self


class UpdateParametersFields(GraphQLField):
    update_allows_fetch_and_merge: "UpdateParametersGraphQLField" = (
        UpdateParametersGraphQLField("updateAllowsFetchAndMerge")
    )

    def fields(
        self, *subfields: UpdateParametersGraphQLField
    ) -> "UpdateParametersFields":
        """Subfields should come from the UpdateParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateParametersFields":
        self._alias = alias
        return self


class UpdatePatreonSponsorabilityPayloadFields(GraphQLField):
    client_mutation_id: "UpdatePatreonSponsorabilityPayloadGraphQLField" = (
        UpdatePatreonSponsorabilityPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsors_listing(cls) -> "SponsorsListingFields":
        return SponsorsListingFields("sponsors_listing")

    def fields(
        self,
        *subfields: Union[
            UpdatePatreonSponsorabilityPayloadGraphQLField, "SponsorsListingFields"
        ]
    ) -> "UpdatePatreonSponsorabilityPayloadFields":
        """Subfields should come from the UpdatePatreonSponsorabilityPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdatePatreonSponsorabilityPayloadFields":
        self._alias = alias
        return self


class UpdateProjectCardPayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectCardPayloadGraphQLField" = (
        UpdateProjectCardPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_card(cls) -> "ProjectCardFields":
        return ProjectCardFields("project_card")

    def fields(
        self,
        *subfields: Union[UpdateProjectCardPayloadGraphQLField, "ProjectCardFields"]
    ) -> "UpdateProjectCardPayloadFields":
        """Subfields should come from the UpdateProjectCardPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectCardPayloadFields":
        self._alias = alias
        return self


class UpdateProjectColumnPayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectColumnPayloadGraphQLField" = (
        UpdateProjectColumnPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_column(cls) -> "ProjectColumnFields":
        return ProjectColumnFields("project_column")

    def fields(
        self,
        *subfields: Union[UpdateProjectColumnPayloadGraphQLField, "ProjectColumnFields"]
    ) -> "UpdateProjectColumnPayloadFields":
        """Subfields should come from the UpdateProjectColumnPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectColumnPayloadFields":
        self._alias = alias
        return self


class UpdateProjectPayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectPayloadGraphQLField" = (
        UpdateProjectPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    def fields(
        self, *subfields: Union[UpdateProjectPayloadGraphQLField, "ProjectFields"]
    ) -> "UpdateProjectPayloadFields":
        """Subfields should come from the UpdateProjectPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectPayloadFields":
        self._alias = alias
        return self


class UpdateProjectV2CollaboratorsPayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectV2CollaboratorsPayloadGraphQLField" = (
        UpdateProjectV2CollaboratorsPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def collaborators(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ActorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ActorConnectionFields(
            "collaborators", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            UpdateProjectV2CollaboratorsPayloadGraphQLField,
            "ProjectV2ActorConnectionFields",
        ]
    ) -> "UpdateProjectV2CollaboratorsPayloadFields":
        """Subfields should come from the UpdateProjectV2CollaboratorsPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectV2CollaboratorsPayloadFields":
        self._alias = alias
        return self


class UpdateProjectV2DraftIssuePayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectV2DraftIssuePayloadGraphQLField" = (
        UpdateProjectV2DraftIssuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def draft_issue(cls) -> "DraftIssueFields":
        return DraftIssueFields("draft_issue")

    def fields(
        self,
        *subfields: Union[
            UpdateProjectV2DraftIssuePayloadGraphQLField, "DraftIssueFields"
        ]
    ) -> "UpdateProjectV2DraftIssuePayloadFields":
        """Subfields should come from the UpdateProjectV2DraftIssuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectV2DraftIssuePayloadFields":
        self._alias = alias
        return self


class UpdateProjectV2FieldPayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectV2FieldPayloadGraphQLField" = (
        UpdateProjectV2FieldPayloadGraphQLField("clientMutationId")
    )
    project_v_2_field: "ProjectV2FieldConfigurationUnion" = (
        ProjectV2FieldConfigurationUnion("projectV2Field")
    )

    def fields(
        self,
        *subfields: Union[
            UpdateProjectV2FieldPayloadGraphQLField, "ProjectV2FieldConfigurationUnion"
        ]
    ) -> "UpdateProjectV2FieldPayloadFields":
        """Subfields should come from the UpdateProjectV2FieldPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectV2FieldPayloadFields":
        self._alias = alias
        return self


class UpdateProjectV2ItemFieldValuePayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectV2ItemFieldValuePayloadGraphQLField" = (
        UpdateProjectV2ItemFieldValuePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_v_2_item(cls) -> "ProjectV2ItemFields":
        return ProjectV2ItemFields("project_v_2_item")

    def fields(
        self,
        *subfields: Union[
            UpdateProjectV2ItemFieldValuePayloadGraphQLField, "ProjectV2ItemFields"
        ]
    ) -> "UpdateProjectV2ItemFieldValuePayloadFields":
        """Subfields should come from the UpdateProjectV2ItemFieldValuePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectV2ItemFieldValuePayloadFields":
        self._alias = alias
        return self


class UpdateProjectV2ItemPositionPayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectV2ItemPositionPayloadGraphQLField" = (
        UpdateProjectV2ItemPositionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ItemConnectionFields("items", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            UpdateProjectV2ItemPositionPayloadGraphQLField,
            "ProjectV2ItemConnectionFields",
        ]
    ) -> "UpdateProjectV2ItemPositionPayloadFields":
        """Subfields should come from the UpdateProjectV2ItemPositionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectV2ItemPositionPayloadFields":
        self._alias = alias
        return self


class UpdateProjectV2PayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectV2PayloadGraphQLField" = (
        UpdateProjectV2PayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def project_v_2(cls) -> "ProjectV2Fields":
        return ProjectV2Fields("project_v_2")

    def fields(
        self, *subfields: Union[UpdateProjectV2PayloadGraphQLField, "ProjectV2Fields"]
    ) -> "UpdateProjectV2PayloadFields":
        """Subfields should come from the UpdateProjectV2PayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectV2PayloadFields":
        self._alias = alias
        return self


class UpdateProjectV2StatusUpdatePayloadFields(GraphQLField):
    client_mutation_id: "UpdateProjectV2StatusUpdatePayloadGraphQLField" = (
        UpdateProjectV2StatusUpdatePayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def status_update(cls) -> "ProjectV2StatusUpdateFields":
        return ProjectV2StatusUpdateFields("status_update")

    def fields(
        self,
        *subfields: Union[
            UpdateProjectV2StatusUpdatePayloadGraphQLField,
            "ProjectV2StatusUpdateFields",
        ]
    ) -> "UpdateProjectV2StatusUpdatePayloadFields":
        """Subfields should come from the UpdateProjectV2StatusUpdatePayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateProjectV2StatusUpdatePayloadFields":
        self._alias = alias
        return self


class UpdatePullRequestBranchPayloadFields(GraphQLField):
    client_mutation_id: "UpdatePullRequestBranchPayloadGraphQLField" = (
        UpdatePullRequestBranchPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            UpdatePullRequestBranchPayloadGraphQLField, "PullRequestFields"
        ]
    ) -> "UpdatePullRequestBranchPayloadFields":
        """Subfields should come from the UpdatePullRequestBranchPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdatePullRequestBranchPayloadFields":
        self._alias = alias
        return self


class UpdatePullRequestPayloadFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    client_mutation_id: "UpdatePullRequestPayloadGraphQLField" = (
        UpdatePullRequestPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request(cls) -> "PullRequestFields":
        return PullRequestFields("pull_request")

    def fields(
        self,
        *subfields: Union[
            UpdatePullRequestPayloadGraphQLField, "ActorInterface", "PullRequestFields"
        ]
    ) -> "UpdatePullRequestPayloadFields":
        """Subfields should come from the UpdatePullRequestPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdatePullRequestPayloadFields":
        self._alias = alias
        return self


class UpdatePullRequestReviewCommentPayloadFields(GraphQLField):
    client_mutation_id: "UpdatePullRequestReviewCommentPayloadGraphQLField" = (
        UpdatePullRequestReviewCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request_review_comment(cls) -> "PullRequestReviewCommentFields":
        return PullRequestReviewCommentFields("pull_request_review_comment")

    def fields(
        self,
        *subfields: Union[
            UpdatePullRequestReviewCommentPayloadGraphQLField,
            "PullRequestReviewCommentFields",
        ]
    ) -> "UpdatePullRequestReviewCommentPayloadFields":
        """Subfields should come from the UpdatePullRequestReviewCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdatePullRequestReviewCommentPayloadFields":
        self._alias = alias
        return self


class UpdatePullRequestReviewPayloadFields(GraphQLField):
    client_mutation_id: "UpdatePullRequestReviewPayloadGraphQLField" = (
        UpdatePullRequestReviewPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def pull_request_review(cls) -> "PullRequestReviewFields":
        return PullRequestReviewFields("pull_request_review")

    def fields(
        self,
        *subfields: Union[
            UpdatePullRequestReviewPayloadGraphQLField, "PullRequestReviewFields"
        ]
    ) -> "UpdatePullRequestReviewPayloadFields":
        """Subfields should come from the UpdatePullRequestReviewPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdatePullRequestReviewPayloadFields":
        self._alias = alias
        return self


class UpdateRefPayloadFields(GraphQLField):
    client_mutation_id: "UpdateRefPayloadGraphQLField" = UpdateRefPayloadGraphQLField(
        "clientMutationId"
    )

    @classmethod
    def ref(cls) -> "RefFields":
        return RefFields("ref")

    def fields(
        self, *subfields: Union[UpdateRefPayloadGraphQLField, "RefFields"]
    ) -> "UpdateRefPayloadFields":
        """Subfields should come from the UpdateRefPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateRefPayloadFields":
        self._alias = alias
        return self


class UpdateRefsPayloadFields(GraphQLField):
    client_mutation_id: "UpdateRefsPayloadGraphQLField" = UpdateRefsPayloadGraphQLField(
        "clientMutationId"
    )

    def fields(
        self, *subfields: UpdateRefsPayloadGraphQLField
    ) -> "UpdateRefsPayloadFields":
        """Subfields should come from the UpdateRefsPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateRefsPayloadFields":
        self._alias = alias
        return self


class UpdateRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "UpdateRepositoryPayloadGraphQLField" = (
        UpdateRepositoryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[UpdateRepositoryPayloadGraphQLField, "RepositoryFields"]
    ) -> "UpdateRepositoryPayloadFields":
        """Subfields should come from the UpdateRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateRepositoryPayloadFields":
        self._alias = alias
        return self


class UpdateRepositoryRulesetPayloadFields(GraphQLField):
    client_mutation_id: "UpdateRepositoryRulesetPayloadGraphQLField" = (
        UpdateRepositoryRulesetPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def ruleset(cls) -> "RepositoryRulesetFields":
        return RepositoryRulesetFields("ruleset")

    def fields(
        self,
        *subfields: Union[
            UpdateRepositoryRulesetPayloadGraphQLField, "RepositoryRulesetFields"
        ]
    ) -> "UpdateRepositoryRulesetPayloadFields":
        """Subfields should come from the UpdateRepositoryRulesetPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateRepositoryRulesetPayloadFields":
        self._alias = alias
        return self


class UpdateRepositoryWebCommitSignoffSettingPayloadFields(GraphQLField):
    client_mutation_id: "UpdateRepositoryWebCommitSignoffSettingPayloadGraphQLField" = (
        UpdateRepositoryWebCommitSignoffSettingPayloadGraphQLField("clientMutationId")
    )
    message: "UpdateRepositoryWebCommitSignoffSettingPayloadGraphQLField" = (
        UpdateRepositoryWebCommitSignoffSettingPayloadGraphQLField("message")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            UpdateRepositoryWebCommitSignoffSettingPayloadGraphQLField,
            "RepositoryFields",
        ]
    ) -> "UpdateRepositoryWebCommitSignoffSettingPayloadFields":
        """Subfields should come from the UpdateRepositoryWebCommitSignoffSettingPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "UpdateRepositoryWebCommitSignoffSettingPayloadFields":
        self._alias = alias
        return self


class UpdateSponsorshipPreferencesPayloadFields(GraphQLField):
    client_mutation_id: "UpdateSponsorshipPreferencesPayloadGraphQLField" = (
        UpdateSponsorshipPreferencesPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def sponsorship(cls) -> "SponsorshipFields":
        return SponsorshipFields("sponsorship")

    def fields(
        self,
        *subfields: Union[
            UpdateSponsorshipPreferencesPayloadGraphQLField, "SponsorshipFields"
        ]
    ) -> "UpdateSponsorshipPreferencesPayloadFields":
        """Subfields should come from the UpdateSponsorshipPreferencesPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateSponsorshipPreferencesPayloadFields":
        self._alias = alias
        return self


class UpdateSubscriptionPayloadFields(GraphQLField):
    client_mutation_id: "UpdateSubscriptionPayloadGraphQLField" = (
        UpdateSubscriptionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def subscribable(cls) -> "SubscribableInterface":
        return SubscribableInterface("subscribable")

    def fields(
        self,
        *subfields: Union[
            UpdateSubscriptionPayloadGraphQLField, "SubscribableInterface"
        ]
    ) -> "UpdateSubscriptionPayloadFields":
        """Subfields should come from the UpdateSubscriptionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateSubscriptionPayloadFields":
        self._alias = alias
        return self


class UpdateTeamDiscussionCommentPayloadFields(GraphQLField):
    client_mutation_id: "UpdateTeamDiscussionCommentPayloadGraphQLField" = (
        UpdateTeamDiscussionCommentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def team_discussion_comment(cls) -> "TeamDiscussionCommentFields":
        return TeamDiscussionCommentFields("team_discussion_comment")

    def fields(
        self,
        *subfields: Union[
            UpdateTeamDiscussionCommentPayloadGraphQLField,
            "TeamDiscussionCommentFields",
        ]
    ) -> "UpdateTeamDiscussionCommentPayloadFields":
        """Subfields should come from the UpdateTeamDiscussionCommentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateTeamDiscussionCommentPayloadFields":
        self._alias = alias
        return self


class UpdateTeamDiscussionPayloadFields(GraphQLField):
    client_mutation_id: "UpdateTeamDiscussionPayloadGraphQLField" = (
        UpdateTeamDiscussionPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def team_discussion(cls) -> "TeamDiscussionFields":
        return TeamDiscussionFields("team_discussion")

    def fields(
        self,
        *subfields: Union[
            UpdateTeamDiscussionPayloadGraphQLField, "TeamDiscussionFields"
        ]
    ) -> "UpdateTeamDiscussionPayloadFields":
        """Subfields should come from the UpdateTeamDiscussionPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateTeamDiscussionPayloadFields":
        self._alias = alias
        return self


class UpdateTeamReviewAssignmentPayloadFields(GraphQLField):
    client_mutation_id: "UpdateTeamReviewAssignmentPayloadGraphQLField" = (
        UpdateTeamReviewAssignmentPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def team(cls) -> "TeamFields":
        return TeamFields("team")

    def fields(
        self,
        *subfields: Union[UpdateTeamReviewAssignmentPayloadGraphQLField, "TeamFields"]
    ) -> "UpdateTeamReviewAssignmentPayloadFields":
        """Subfields should come from the UpdateTeamReviewAssignmentPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateTeamReviewAssignmentPayloadFields":
        self._alias = alias
        return self


class UpdateTeamsRepositoryPayloadFields(GraphQLField):
    client_mutation_id: "UpdateTeamsRepositoryPayloadGraphQLField" = (
        UpdateTeamsRepositoryPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    @classmethod
    def teams(cls) -> "TeamFields":
        return TeamFields("teams")

    def fields(
        self,
        *subfields: Union[
            UpdateTeamsRepositoryPayloadGraphQLField, "RepositoryFields", "TeamFields"
        ]
    ) -> "UpdateTeamsRepositoryPayloadFields":
        """Subfields should come from the UpdateTeamsRepositoryPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateTeamsRepositoryPayloadFields":
        self._alias = alias
        return self


class UpdateTopicsPayloadFields(GraphQLField):
    client_mutation_id: "UpdateTopicsPayloadGraphQLField" = (
        UpdateTopicsPayloadGraphQLField("clientMutationId")
    )
    invalid_topic_names: "UpdateTopicsPayloadGraphQLField" = (
        UpdateTopicsPayloadGraphQLField("invalidTopicNames")
    )

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self, *subfields: Union[UpdateTopicsPayloadGraphQLField, "RepositoryFields"]
    ) -> "UpdateTopicsPayloadFields":
        """Subfields should come from the UpdateTopicsPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateTopicsPayloadFields":
        self._alias = alias
        return self


class UpdateUserListPayloadFields(GraphQLField):
    client_mutation_id: "UpdateUserListPayloadGraphQLField" = (
        UpdateUserListPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def list(cls) -> "UserListFields":
        return UserListFields("list")

    def fields(
        self, *subfields: Union[UpdateUserListPayloadGraphQLField, "UserListFields"]
    ) -> "UpdateUserListPayloadFields":
        """Subfields should come from the UpdateUserListPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateUserListPayloadFields":
        self._alias = alias
        return self


class UpdateUserListsForItemPayloadFields(GraphQLField):
    client_mutation_id: "UpdateUserListsForItemPayloadGraphQLField" = (
        UpdateUserListsForItemPayloadGraphQLField("clientMutationId")
    )
    item: "UserListItemsUnion" = UserListItemsUnion("item")

    @classmethod
    def lists(cls) -> "UserListFields":
        return UserListFields("lists")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            UpdateUserListsForItemPayloadGraphQLField,
            "UserFields",
            "UserListFields",
            "UserListItemsUnion",
        ]
    ) -> "UpdateUserListsForItemPayloadFields":
        """Subfields should come from the UpdateUserListsForItemPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateUserListsForItemPayloadFields":
        self._alias = alias
        return self


class UserFields(GraphQLField):
    @classmethod
    def any_pinnable_items(
        cls, *, type: Optional[PinnableItemType] = None
    ) -> "UserGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "type": {"type": "PinnableItemType", "value": type}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserGraphQLField("any_pinnable_items", arguments=cleared_arguments)

    @classmethod
    def avatar_url(cls, *, size: Optional[int] = None) -> "UserGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserGraphQLField("avatar_url", arguments=cleared_arguments)

    bio: "UserGraphQLField" = UserGraphQLField("bio")
    bio_html: "UserGraphQLField" = UserGraphQLField("bioHTML")

    @classmethod
    def can_receive_organization_emails_when_notifications_restricted(
        cls, login: str
    ) -> "UserGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "login": {"type": "String!", "value": login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserGraphQLField(
            "can_receive_organization_emails_when_notifications_restricted",
            arguments=cleared_arguments,
        )

    @classmethod
    def commit_comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "CommitCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CommitCommentConnectionFields(
            "commit_comments", arguments=cleared_arguments
        )

    company: "UserGraphQLField" = UserGraphQLField("company")
    company_html: "UserGraphQLField" = UserGraphQLField("companyHTML")

    @classmethod
    def contributions_collection(
        cls,
        *,
        from_: Optional[Any] = None,
        organization_id: Optional[str] = None,
        to: Optional[Any] = None
    ) -> "ContributionsCollectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "from": {"type": "DateTime", "value": from_},
            "organizationID": {"type": "ID", "value": organization_id},
            "to": {"type": "DateTime", "value": to},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ContributionsCollectionFields(
            "contributions_collection", arguments=cleared_arguments
        )

    @classmethod
    def copilot_endpoints(cls) -> "CopilotEndpointsFields":
        return CopilotEndpointsFields("copilot_endpoints")

    created_at: "UserGraphQLField" = UserGraphQLField("createdAt")
    database_id: "UserGraphQLField" = UserGraphQLField("databaseId")
    email: "UserGraphQLField" = UserGraphQLField("email")

    @classmethod
    def enterprises(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        membership_type: Optional[EnterpriseMembershipType] = None,
        order_by: Optional[EnterpriseOrder] = None
    ) -> "EnterpriseConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "membershipType": {
                "type": "EnterpriseMembershipType",
                "value": membership_type,
            },
            "orderBy": {"type": "EnterpriseOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EnterpriseConnectionFields("enterprises", arguments=cleared_arguments)

    estimated_next_sponsors_payout_in_cents: "UserGraphQLField" = UserGraphQLField(
        "estimatedNextSponsorsPayoutInCents"
    )

    @classmethod
    def followers(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "FollowerConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FollowerConnectionFields("followers", arguments=cleared_arguments)

    @classmethod
    def following(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "FollowingConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FollowingConnectionFields("following", arguments=cleared_arguments)

    @classmethod
    def gist(cls, name: str) -> "GistFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GistFields("gist", arguments=cleared_arguments)

    @classmethod
    def gist_comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "GistCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GistCommentConnectionFields("gist_comments", arguments=cleared_arguments)

    @classmethod
    def gists(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[GistOrder] = None,
        privacy: Optional[GistPrivacy] = None
    ) -> "GistConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "GistOrder", "value": order_by},
            "privacy": {"type": "GistPrivacy", "value": privacy},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GistConnectionFields("gists", arguments=cleared_arguments)

    has_sponsors_listing: "UserGraphQLField" = UserGraphQLField("hasSponsorsListing")

    @classmethod
    def hovercard(
        cls, *, primary_subject_id: Optional[str] = None
    ) -> "HovercardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "primarySubjectId": {"type": "ID", "value": primary_subject_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HovercardFields("hovercard", arguments=cleared_arguments)

    id: "UserGraphQLField" = UserGraphQLField("id")

    @classmethod
    def interaction_ability(cls) -> "RepositoryInteractionAbilityFields":
        return RepositoryInteractionAbilityFields("interaction_ability")

    is_bounty_hunter: "UserGraphQLField" = UserGraphQLField("isBountyHunter")
    is_campus_expert: "UserGraphQLField" = UserGraphQLField("isCampusExpert")
    is_developer_program_member: "UserGraphQLField" = UserGraphQLField(
        "isDeveloperProgramMember"
    )
    is_employee: "UserGraphQLField" = UserGraphQLField("isEmployee")
    is_following_viewer: "UserGraphQLField" = UserGraphQLField("isFollowingViewer")
    is_git_hub_star: "UserGraphQLField" = UserGraphQLField("isGitHubStar")
    is_hireable: "UserGraphQLField" = UserGraphQLField("isHireable")
    is_site_admin: "UserGraphQLField" = UserGraphQLField("isSiteAdmin")

    @classmethod
    def is_sponsored_by(cls, account_login: str) -> "UserGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "accountLogin": {"type": "String!", "value": account_login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserGraphQLField("is_sponsored_by", arguments=cleared_arguments)

    is_sponsoring_viewer: "UserGraphQLField" = UserGraphQLField("isSponsoringViewer")
    is_viewer: "UserGraphQLField" = UserGraphQLField("isViewer")

    @classmethod
    def issue_comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueCommentOrder] = None
    ) -> "IssueCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueCommentOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueCommentConnectionFields(
            "issue_comments", arguments=cleared_arguments
        )

    @classmethod
    def issues(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        filter_by: Optional[IssueFilters] = None,
        first: Optional[int] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[IssueState] = None
    ) -> "IssueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "filterBy": {"type": "IssueFilters", "value": filter_by},
            "first": {"type": "Int", "value": first},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "IssueState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IssueConnectionFields("issues", arguments=cleared_arguments)

    @classmethod
    def item_showcase(cls) -> "ProfileItemShowcaseFields":
        return ProfileItemShowcaseFields("item_showcase")

    @classmethod
    def lifetime_received_sponsorship_values(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorAndLifetimeValueOrder] = None
    ) -> "SponsorAndLifetimeValueConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorAndLifetimeValueOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorAndLifetimeValueConnectionFields(
            "lifetime_received_sponsorship_values", arguments=cleared_arguments
        )

    @classmethod
    def lists(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserListConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserListConnectionFields("lists", arguments=cleared_arguments)

    location: "UserGraphQLField" = UserGraphQLField("location")
    login: "UserGraphQLField" = UserGraphQLField("login")
    monthly_estimated_sponsors_income_in_cents: "UserGraphQLField" = UserGraphQLField(
        "monthlyEstimatedSponsorsIncomeInCents"
    )
    name: "UserGraphQLField" = UserGraphQLField("name")

    @classmethod
    def organization(cls, login: str) -> "OrganizationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "login": {"type": "String!", "value": login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationFields("organization", arguments=cleared_arguments)

    @classmethod
    def organization_verified_domain_emails(cls, login: str) -> "UserGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "login": {"type": "String!", "value": login}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserGraphQLField(
            "organization_verified_domain_emails", arguments=cleared_arguments
        )

    @classmethod
    def organizations(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[OrganizationOrder] = None
    ) -> "OrganizationConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "OrganizationOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OrganizationConnectionFields(
            "organizations", arguments=cleared_arguments
        )

    @classmethod
    def packages(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        names: Optional[str] = None,
        order_by: Optional[PackageOrder] = None,
        package_type: Optional[PackageType] = None,
        repository_id: Optional[str] = None
    ) -> "PackageConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "names": {"type": "String", "value": names},
            "orderBy": {"type": "PackageOrder", "value": order_by},
            "packageType": {"type": "PackageType", "value": package_type},
            "repositoryId": {"type": "ID", "value": repository_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PackageConnectionFields("packages", arguments=cleared_arguments)

    @classmethod
    def pinnable_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        types: Optional[PinnableItemType] = None
    ) -> "PinnableItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "types": {"type": "PinnableItemType", "value": types},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnableItemConnectionFields(
            "pinnable_items", arguments=cleared_arguments
        )

    @classmethod
    def pinned_items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        types: Optional[PinnableItemType] = None
    ) -> "PinnableItemConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "types": {"type": "PinnableItemType", "value": types},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PinnableItemConnectionFields("pinned_items", arguments=cleared_arguments)

    pinned_items_remaining: "UserGraphQLField" = UserGraphQLField(
        "pinnedItemsRemaining"
    )

    @classmethod
    def project(cls, number: int) -> "ProjectFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields("project", arguments=cleared_arguments)

    @classmethod
    def project_v_2(cls, number: int) -> "ProjectV2Fields":
        arguments: Dict[str, Dict[str, Any]] = {
            "number": {"type": "Int!", "value": number}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2Fields("project_v_2", arguments=cleared_arguments)

    @classmethod
    def projects(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[ProjectOrder] = None,
        search: Optional[str] = None,
        states: Optional[ProjectState] = None
    ) -> "ProjectConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "ProjectOrder", "value": order_by},
            "search": {"type": "String", "value": search},
            "states": {"type": "ProjectState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectConnectionFields("projects", arguments=cleared_arguments)

    projects_resource_path: "UserGraphQLField" = UserGraphQLField(
        "projectsResourcePath"
    )
    projects_url: "UserGraphQLField" = UserGraphQLField("projectsUrl")

    @classmethod
    def projects_v_2(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        min_permission_level: Optional[ProjectV2PermissionLevel] = None,
        order_by: Optional[ProjectV2Order] = None,
        query: Optional[str] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "minPermissionLevel": {
                "type": "ProjectV2PermissionLevel",
                "value": min_permission_level,
            },
            "orderBy": {"type": "ProjectV2Order", "value": order_by},
            "query": {"type": "String", "value": query},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("projects_v_2", arguments=cleared_arguments)

    pronouns: "UserGraphQLField" = UserGraphQLField("pronouns")

    @classmethod
    def public_keys(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "PublicKeyConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublicKeyConnectionFields("public_keys", arguments=cleared_arguments)

    @classmethod
    def pull_requests(
        cls,
        *,
        after: Optional[str] = None,
        base_ref_name: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        head_ref_name: Optional[str] = None,
        labels: Optional[str] = None,
        last: Optional[int] = None,
        order_by: Optional[IssueOrder] = None,
        states: Optional[PullRequestState] = None
    ) -> "PullRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "baseRefName": {"type": "String", "value": base_ref_name},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "headRefName": {"type": "String", "value": head_ref_name},
            "labels": {"type": "String", "value": labels},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "IssueOrder", "value": order_by},
            "states": {"type": "PullRequestState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PullRequestConnectionFields("pull_requests", arguments=cleared_arguments)

    @classmethod
    def recent_projects(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "ProjectV2ConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectV2ConnectionFields("recent_projects", arguments=cleared_arguments)

    @classmethod
    def repositories(
        cls,
        *,
        affiliations: Optional[RepositoryAffiliation] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        has_issues_enabled: Optional[bool] = None,
        is_archived: Optional[bool] = None,
        is_fork: Optional[bool] = None,
        is_locked: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None,
        owner_affiliations: Optional[RepositoryAffiliation] = None,
        privacy: Optional[RepositoryPrivacy] = None,
        visibility: Optional[RepositoryVisibility] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "affiliations": {"type": "RepositoryAffiliation", "value": affiliations},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "hasIssuesEnabled": {"type": "Boolean", "value": has_issues_enabled},
            "isArchived": {"type": "Boolean", "value": is_archived},
            "isFork": {"type": "Boolean", "value": is_fork},
            "isLocked": {"type": "Boolean", "value": is_locked},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
            "ownerAffiliations": {
                "type": "RepositoryAffiliation",
                "value": owner_affiliations,
            },
            "privacy": {"type": "RepositoryPrivacy", "value": privacy},
            "visibility": {"type": "RepositoryVisibility", "value": visibility},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields("repositories", arguments=cleared_arguments)

    @classmethod
    def repositories_contributed_to(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        contribution_types: Optional[RepositoryContributionType] = None,
        first: Optional[int] = None,
        has_issues: Optional[bool] = None,
        include_user_repositories: Optional[bool] = None,
        is_locked: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None,
        privacy: Optional[RepositoryPrivacy] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "contributionTypes": {
                "type": "RepositoryContributionType",
                "value": contribution_types,
            },
            "first": {"type": "Int", "value": first},
            "hasIssues": {"type": "Boolean", "value": has_issues},
            "includeUserRepositories": {
                "type": "Boolean",
                "value": include_user_repositories,
            },
            "isLocked": {"type": "Boolean", "value": is_locked},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
            "privacy": {"type": "RepositoryPrivacy", "value": privacy},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields(
            "repositories_contributed_to", arguments=cleared_arguments
        )

    @classmethod
    def repository(
        cls, name: str, *, follow_renames: Optional[bool] = None
    ) -> "RepositoryFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "followRenames": {"type": "Boolean", "value": follow_renames},
            "name": {"type": "String!", "value": name},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryFields("repository", arguments=cleared_arguments)

    @classmethod
    def repository_discussion_comments(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        only_answers: Optional[bool] = None,
        repository_id: Optional[str] = None
    ) -> "DiscussionCommentConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "onlyAnswers": {"type": "Boolean", "value": only_answers},
            "repositoryId": {"type": "ID", "value": repository_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionCommentConnectionFields(
            "repository_discussion_comments", arguments=cleared_arguments
        )

    @classmethod
    def repository_discussions(
        cls,
        *,
        after: Optional[str] = None,
        answered: Optional[bool] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[DiscussionOrder] = None,
        repository_id: Optional[str] = None,
        states: Optional[DiscussionState] = None
    ) -> "DiscussionConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "answered": {"type": "Boolean", "value": answered},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "DiscussionOrder", "value": order_by},
            "repositoryId": {"type": "ID", "value": repository_id},
            "states": {"type": "DiscussionState", "value": states},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DiscussionConnectionFields(
            "repository_discussions", arguments=cleared_arguments
        )

    resource_path: "UserGraphQLField" = UserGraphQLField("resourcePath")

    @classmethod
    def saved_replies(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SavedReplyOrder] = None
    ) -> "SavedReplyConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SavedReplyOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SavedReplyConnectionFields("saved_replies", arguments=cleared_arguments)

    @classmethod
    def social_accounts(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "SocialAccountConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SocialAccountConnectionFields(
            "social_accounts", arguments=cleared_arguments
        )

    @classmethod
    def sponsoring(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorOrder] = None
    ) -> "SponsorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorConnectionFields("sponsoring", arguments=cleared_arguments)

    @classmethod
    def sponsors(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorOrder] = None,
        tier_id: Optional[str] = None
    ) -> "SponsorConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorOrder", "value": order_by},
            "tierId": {"type": "ID", "value": tier_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorConnectionFields("sponsors", arguments=cleared_arguments)

    @classmethod
    def sponsors_activities(
        cls,
        *,
        actions: Optional[SponsorsActivityAction] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_as_sponsor: Optional[bool] = None,
        include_private: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorsActivityOrder] = None,
        period: Optional[SponsorsActivityPeriod] = None,
        since: Optional[Any] = None,
        until: Optional[Any] = None
    ) -> "SponsorsActivityConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "actions": {"type": "SponsorsActivityAction", "value": actions},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includeAsSponsor": {"type": "Boolean", "value": include_as_sponsor},
            "includePrivate": {"type": "Boolean", "value": include_private},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorsActivityOrder", "value": order_by},
            "period": {"type": "SponsorsActivityPeriod", "value": period},
            "since": {"type": "DateTime", "value": since},
            "until": {"type": "DateTime", "value": until},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorsActivityConnectionFields(
            "sponsors_activities", arguments=cleared_arguments
        )

    @classmethod
    def sponsors_listing(cls) -> "SponsorsListingFields":
        return SponsorsListingFields("sponsors_listing")

    @classmethod
    def sponsorship_for_viewer_as_sponsor(
        cls, *, active_only: Optional[bool] = None
    ) -> "SponsorshipFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipFields(
            "sponsorship_for_viewer_as_sponsor", arguments=cleared_arguments
        )

    @classmethod
    def sponsorship_for_viewer_as_sponsorable(
        cls, *, active_only: Optional[bool] = None
    ) -> "SponsorshipFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipFields(
            "sponsorship_for_viewer_as_sponsorable", arguments=cleared_arguments
        )

    @classmethod
    def sponsorship_newsletters(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorshipNewsletterOrder] = None
    ) -> "SponsorshipNewsletterConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorshipNewsletterOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipNewsletterConnectionFields(
            "sponsorship_newsletters", arguments=cleared_arguments
        )

    @classmethod
    def sponsorships_as_maintainer(
        cls,
        *,
        active_only: Optional[bool] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        include_private: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[SponsorshipOrder] = None
    ) -> "SponsorshipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "includePrivate": {"type": "Boolean", "value": include_private},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "SponsorshipOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipConnectionFields(
            "sponsorships_as_maintainer", arguments=cleared_arguments
        )

    @classmethod
    def sponsorships_as_sponsor(
        cls,
        *,
        active_only: Optional[bool] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        maintainer_logins: Optional[str] = None,
        order_by: Optional[SponsorshipOrder] = None
    ) -> "SponsorshipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "activeOnly": {"type": "Boolean", "value": active_only},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "maintainerLogins": {"type": "String", "value": maintainer_logins},
            "orderBy": {"type": "SponsorshipOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SponsorshipConnectionFields(
            "sponsorships_as_sponsor", arguments=cleared_arguments
        )

    @classmethod
    def starred_repositories(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[StarOrder] = None,
        owned_by_viewer: Optional[bool] = None
    ) -> "StarredRepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "StarOrder", "value": order_by},
            "ownedByViewer": {"type": "Boolean", "value": owned_by_viewer},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StarredRepositoryConnectionFields(
            "starred_repositories", arguments=cleared_arguments
        )

    @classmethod
    def status(cls) -> "UserStatusFields":
        return UserStatusFields("status")

    @classmethod
    def suggested_list_names(cls) -> "UserListSuggestionFields":
        return UserListSuggestionFields("suggested_list_names")

    @classmethod
    def top_repositories(
        cls,
        order_by: RepositoryOrder,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        since: Optional[Any] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder!", "value": order_by},
            "since": {"type": "DateTime", "value": since},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields(
            "top_repositories", arguments=cleared_arguments
        )

    @classmethod
    def total_sponsorship_amount_as_sponsor_in_cents(
        cls,
        *,
        since: Optional[Any] = None,
        sponsorable_logins: Optional[str] = None,
        until: Optional[Any] = None
    ) -> "UserGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "since": {"type": "DateTime", "value": since},
            "sponsorableLogins": {"type": "String", "value": sponsorable_logins},
            "until": {"type": "DateTime", "value": until},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserGraphQLField(
            "total_sponsorship_amount_as_sponsor_in_cents", arguments=cleared_arguments
        )

    twitter_username: "UserGraphQLField" = UserGraphQLField("twitterUsername")
    updated_at: "UserGraphQLField" = UserGraphQLField("updatedAt")
    url: "UserGraphQLField" = UserGraphQLField("url")
    user_view_type: "UserGraphQLField" = UserGraphQLField("userViewType")
    viewer_can_change_pinned_items: "UserGraphQLField" = UserGraphQLField(
        "viewerCanChangePinnedItems"
    )
    viewer_can_create_projects: "UserGraphQLField" = UserGraphQLField(
        "viewerCanCreateProjects"
    )
    viewer_can_follow: "UserGraphQLField" = UserGraphQLField("viewerCanFollow")
    viewer_can_sponsor: "UserGraphQLField" = UserGraphQLField("viewerCanSponsor")
    viewer_is_following: "UserGraphQLField" = UserGraphQLField("viewerIsFollowing")
    viewer_is_sponsoring: "UserGraphQLField" = UserGraphQLField("viewerIsSponsoring")

    @classmethod
    def watching(
        cls,
        *,
        affiliations: Optional[RepositoryAffiliation] = None,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        has_issues_enabled: Optional[bool] = None,
        is_locked: Optional[bool] = None,
        last: Optional[int] = None,
        order_by: Optional[RepositoryOrder] = None,
        owner_affiliations: Optional[RepositoryAffiliation] = None,
        privacy: Optional[RepositoryPrivacy] = None,
        visibility: Optional[RepositoryVisibility] = None
    ) -> "RepositoryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "affiliations": {"type": "RepositoryAffiliation", "value": affiliations},
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "hasIssuesEnabled": {"type": "Boolean", "value": has_issues_enabled},
            "isLocked": {"type": "Boolean", "value": is_locked},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "RepositoryOrder", "value": order_by},
            "ownerAffiliations": {
                "type": "RepositoryAffiliation",
                "value": owner_affiliations,
            },
            "privacy": {"type": "RepositoryPrivacy", "value": privacy},
            "visibility": {"type": "RepositoryVisibility", "value": visibility},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RepositoryConnectionFields("watching", arguments=cleared_arguments)

    website_url: "UserGraphQLField" = UserGraphQLField("websiteUrl")

    def fields(
        self,
        *subfields: Union[
            UserGraphQLField,
            "CommitCommentConnectionFields",
            "ContributionsCollectionFields",
            "CopilotEndpointsFields",
            "DiscussionCommentConnectionFields",
            "DiscussionConnectionFields",
            "EnterpriseConnectionFields",
            "FollowerConnectionFields",
            "FollowingConnectionFields",
            "GistCommentConnectionFields",
            "GistConnectionFields",
            "GistFields",
            "HovercardFields",
            "IssueCommentConnectionFields",
            "IssueConnectionFields",
            "OrganizationConnectionFields",
            "OrganizationFields",
            "PackageConnectionFields",
            "PinnableItemConnectionFields",
            "ProfileItemShowcaseFields",
            "ProjectConnectionFields",
            "ProjectFields",
            "ProjectV2ConnectionFields",
            "ProjectV2Fields",
            "PublicKeyConnectionFields",
            "PullRequestConnectionFields",
            "RepositoryConnectionFields",
            "RepositoryFields",
            "RepositoryInteractionAbilityFields",
            "SavedReplyConnectionFields",
            "SocialAccountConnectionFields",
            "SponsorAndLifetimeValueConnectionFields",
            "SponsorConnectionFields",
            "SponsorsActivityConnectionFields",
            "SponsorsListingFields",
            "SponsorshipConnectionFields",
            "SponsorshipFields",
            "SponsorshipNewsletterConnectionFields",
            "StarredRepositoryConnectionFields",
            "UserListConnectionFields",
            "UserListSuggestionFields",
            "UserStatusFields",
        ]
    ) -> "UserFields":
        """Subfields should come from the UserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserFields":
        self._alias = alias
        return self


class UserBlockedEventFields(GraphQLField):
    @classmethod
    def actor(cls) -> "ActorInterface":
        return ActorInterface("actor")

    block_duration: "UserBlockedEventGraphQLField" = UserBlockedEventGraphQLField(
        "blockDuration"
    )
    created_at: "UserBlockedEventGraphQLField" = UserBlockedEventGraphQLField(
        "createdAt"
    )
    id: "UserBlockedEventGraphQLField" = UserBlockedEventGraphQLField("id")

    @classmethod
    def subject(cls) -> "UserFields":
        return UserFields("subject")

    def fields(
        self,
        *subfields: Union[UserBlockedEventGraphQLField, "ActorInterface", "UserFields"]
    ) -> "UserBlockedEventFields":
        """Subfields should come from the UserBlockedEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserBlockedEventFields":
        self._alias = alias
        return self


class UserConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserEdgeFields":
        return UserEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserFields":
        return UserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "UserConnectionGraphQLField" = UserConnectionGraphQLField("totalCount")

    def fields(
        self,
        *subfields: Union[
            UserConnectionGraphQLField, "PageInfoFields", "UserEdgeFields", "UserFields"
        ]
    ) -> "UserConnectionFields":
        """Subfields should come from the UserConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserConnectionFields":
        self._alias = alias
        return self


class UserContentEditFields(GraphQLField):
    created_at: "UserContentEditGraphQLField" = UserContentEditGraphQLField("createdAt")
    deleted_at: "UserContentEditGraphQLField" = UserContentEditGraphQLField("deletedAt")

    @classmethod
    def deleted_by(cls) -> "ActorInterface":
        return ActorInterface("deleted_by")

    diff: "UserContentEditGraphQLField" = UserContentEditGraphQLField("diff")
    edited_at: "UserContentEditGraphQLField" = UserContentEditGraphQLField("editedAt")

    @classmethod
    def editor(cls) -> "ActorInterface":
        return ActorInterface("editor")

    id: "UserContentEditGraphQLField" = UserContentEditGraphQLField("id")
    updated_at: "UserContentEditGraphQLField" = UserContentEditGraphQLField("updatedAt")

    def fields(
        self, *subfields: Union[UserContentEditGraphQLField, "ActorInterface"]
    ) -> "UserContentEditFields":
        """Subfields should come from the UserContentEditFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserContentEditFields":
        self._alias = alias
        return self


class UserContentEditConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserContentEditEdgeFields":
        return UserContentEditEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserContentEditFields":
        return UserContentEditFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "UserContentEditConnectionGraphQLField" = (
        UserContentEditConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            UserContentEditConnectionGraphQLField,
            "PageInfoFields",
            "UserContentEditEdgeFields",
            "UserContentEditFields",
        ]
    ) -> "UserContentEditConnectionFields":
        """Subfields should come from the UserContentEditConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserContentEditConnectionFields":
        self._alias = alias
        return self


class UserContentEditEdgeFields(GraphQLField):
    cursor: "UserContentEditEdgeGraphQLField" = UserContentEditEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "UserContentEditFields":
        return UserContentEditFields("node")

    def fields(
        self,
        *subfields: Union[UserContentEditEdgeGraphQLField, "UserContentEditFields"]
    ) -> "UserContentEditEdgeFields":
        """Subfields should come from the UserContentEditEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserContentEditEdgeFields":
        self._alias = alias
        return self


class UserEdgeFields(GraphQLField):
    cursor: "UserEdgeGraphQLField" = UserEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    def fields(
        self, *subfields: Union[UserEdgeGraphQLField, "UserFields"]
    ) -> "UserEdgeFields":
        """Subfields should come from the UserEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserEdgeFields":
        self._alias = alias
        return self


class UserEmailMetadataFields(GraphQLField):
    primary: "UserEmailMetadataGraphQLField" = UserEmailMetadataGraphQLField("primary")
    type: "UserEmailMetadataGraphQLField" = UserEmailMetadataGraphQLField("type")
    value: "UserEmailMetadataGraphQLField" = UserEmailMetadataGraphQLField("value")

    def fields(
        self, *subfields: UserEmailMetadataGraphQLField
    ) -> "UserEmailMetadataFields":
        """Subfields should come from the UserEmailMetadataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserEmailMetadataFields":
        self._alias = alias
        return self


class UserListFields(GraphQLField):
    created_at: "UserListGraphQLField" = UserListGraphQLField("createdAt")
    description: "UserListGraphQLField" = UserListGraphQLField("description")
    id: "UserListGraphQLField" = UserListGraphQLField("id")
    is_private: "UserListGraphQLField" = UserListGraphQLField("isPrivate")

    @classmethod
    def items(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "UserListItemsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserListItemsConnectionFields("items", arguments=cleared_arguments)

    last_added_at: "UserListGraphQLField" = UserListGraphQLField("lastAddedAt")
    name: "UserListGraphQLField" = UserListGraphQLField("name")
    slug: "UserListGraphQLField" = UserListGraphQLField("slug")
    updated_at: "UserListGraphQLField" = UserListGraphQLField("updatedAt")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[
            UserListGraphQLField, "UserFields", "UserListItemsConnectionFields"
        ]
    ) -> "UserListFields":
        """Subfields should come from the UserListFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserListFields":
        self._alias = alias
        return self


class UserListConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserListEdgeFields":
        return UserListEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserListFields":
        return UserListFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "UserListConnectionGraphQLField" = UserListConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            UserListConnectionGraphQLField,
            "PageInfoFields",
            "UserListEdgeFields",
            "UserListFields",
        ]
    ) -> "UserListConnectionFields":
        """Subfields should come from the UserListConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserListConnectionFields":
        self._alias = alias
        return self


class UserListEdgeFields(GraphQLField):
    cursor: "UserListEdgeGraphQLField" = UserListEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "UserListFields":
        return UserListFields("node")

    def fields(
        self, *subfields: Union[UserListEdgeGraphQLField, "UserListFields"]
    ) -> "UserListEdgeFields":
        """Subfields should come from the UserListEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserListEdgeFields":
        self._alias = alias
        return self


class UserListItemsConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserListItemsEdgeFields":
        return UserListItemsEdgeFields("edges")

    nodes: "UserListItemsUnion" = UserListItemsUnion("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "UserListItemsConnectionGraphQLField" = (
        UserListItemsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            UserListItemsConnectionGraphQLField,
            "PageInfoFields",
            "UserListItemsEdgeFields",
            "UserListItemsUnion",
        ]
    ) -> "UserListItemsConnectionFields":
        """Subfields should come from the UserListItemsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserListItemsConnectionFields":
        self._alias = alias
        return self


class UserListItemsEdgeFields(GraphQLField):
    cursor: "UserListItemsEdgeGraphQLField" = UserListItemsEdgeGraphQLField("cursor")
    node: "UserListItemsUnion" = UserListItemsUnion("node")

    def fields(
        self, *subfields: Union[UserListItemsEdgeGraphQLField, "UserListItemsUnion"]
    ) -> "UserListItemsEdgeFields":
        """Subfields should come from the UserListItemsEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserListItemsEdgeFields":
        self._alias = alias
        return self


class UserListSuggestionFields(GraphQLField):
    id: "UserListSuggestionGraphQLField" = UserListSuggestionGraphQLField("id")
    name: "UserListSuggestionGraphQLField" = UserListSuggestionGraphQLField("name")

    def fields(
        self, *subfields: UserListSuggestionGraphQLField
    ) -> "UserListSuggestionFields":
        """Subfields should come from the UserListSuggestionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserListSuggestionFields":
        self._alias = alias
        return self


class UserNamespaceRepositoryFields(GraphQLField):
    id: "UserNamespaceRepositoryGraphQLField" = UserNamespaceRepositoryGraphQLField(
        "id"
    )
    name: "UserNamespaceRepositoryGraphQLField" = UserNamespaceRepositoryGraphQLField(
        "name"
    )
    name_with_owner: "UserNamespaceRepositoryGraphQLField" = (
        UserNamespaceRepositoryGraphQLField("nameWithOwner")
    )

    @classmethod
    def owner(cls) -> "RepositoryOwnerInterface":
        return RepositoryOwnerInterface("owner")

    def fields(
        self,
        *subfields: Union[
            UserNamespaceRepositoryGraphQLField, "RepositoryOwnerInterface"
        ]
    ) -> "UserNamespaceRepositoryFields":
        """Subfields should come from the UserNamespaceRepositoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserNamespaceRepositoryFields":
        self._alias = alias
        return self


class UserNamespaceRepositoryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserNamespaceRepositoryEdgeFields":
        return UserNamespaceRepositoryEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserNamespaceRepositoryFields":
        return UserNamespaceRepositoryFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "UserNamespaceRepositoryConnectionGraphQLField" = (
        UserNamespaceRepositoryConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            UserNamespaceRepositoryConnectionGraphQLField,
            "PageInfoFields",
            "UserNamespaceRepositoryEdgeFields",
            "UserNamespaceRepositoryFields",
        ]
    ) -> "UserNamespaceRepositoryConnectionFields":
        """Subfields should come from the UserNamespaceRepositoryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserNamespaceRepositoryConnectionFields":
        self._alias = alias
        return self


class UserNamespaceRepositoryEdgeFields(GraphQLField):
    cursor: "UserNamespaceRepositoryEdgeGraphQLField" = (
        UserNamespaceRepositoryEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "UserNamespaceRepositoryFields":
        return UserNamespaceRepositoryFields("node")

    def fields(
        self,
        *subfields: Union[
            UserNamespaceRepositoryEdgeGraphQLField, "UserNamespaceRepositoryFields"
        ]
    ) -> "UserNamespaceRepositoryEdgeFields":
        """Subfields should come from the UserNamespaceRepositoryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserNamespaceRepositoryEdgeFields":
        self._alias = alias
        return self


class UserStatusFields(GraphQLField):
    created_at: "UserStatusGraphQLField" = UserStatusGraphQLField("createdAt")
    emoji: "UserStatusGraphQLField" = UserStatusGraphQLField("emoji")
    emoji_html: "UserStatusGraphQLField" = UserStatusGraphQLField("emojiHTML")
    expires_at: "UserStatusGraphQLField" = UserStatusGraphQLField("expiresAt")
    id: "UserStatusGraphQLField" = UserStatusGraphQLField("id")
    indicates_limited_availability: "UserStatusGraphQLField" = UserStatusGraphQLField(
        "indicatesLimitedAvailability"
    )
    message: "UserStatusGraphQLField" = UserStatusGraphQLField("message")

    @classmethod
    def organization(cls) -> "OrganizationFields":
        return OrganizationFields("organization")

    updated_at: "UserStatusGraphQLField" = UserStatusGraphQLField("updatedAt")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self,
        *subfields: Union[UserStatusGraphQLField, "OrganizationFields", "UserFields"]
    ) -> "UserStatusFields":
        """Subfields should come from the UserStatusFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserStatusFields":
        self._alias = alias
        return self


class UserStatusConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserStatusEdgeFields":
        return UserStatusEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "UserStatusFields":
        return UserStatusFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "UserStatusConnectionGraphQLField" = UserStatusConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            UserStatusConnectionGraphQLField,
            "PageInfoFields",
            "UserStatusEdgeFields",
            "UserStatusFields",
        ]
    ) -> "UserStatusConnectionFields":
        """Subfields should come from the UserStatusConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserStatusConnectionFields":
        self._alias = alias
        return self


class UserStatusEdgeFields(GraphQLField):
    cursor: "UserStatusEdgeGraphQLField" = UserStatusEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "UserStatusFields":
        return UserStatusFields("node")

    def fields(
        self, *subfields: Union[UserStatusEdgeGraphQLField, "UserStatusFields"]
    ) -> "UserStatusEdgeFields":
        """Subfields should come from the UserStatusEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserStatusEdgeFields":
        self._alias = alias
        return self


class VerifiableDomainFields(GraphQLField):
    created_at: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField(
        "createdAt"
    )
    database_id: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField(
        "databaseId"
    )
    dns_host_name: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField(
        "dnsHostName"
    )
    domain: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField("domain")
    has_found_host_name: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField(
        "hasFoundHostName"
    )
    has_found_verification_token: "VerifiableDomainGraphQLField" = (
        VerifiableDomainGraphQLField("hasFoundVerificationToken")
    )
    id: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField("id")
    is_approved: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField(
        "isApproved"
    )
    is_required_for_policy_enforcement: "VerifiableDomainGraphQLField" = (
        VerifiableDomainGraphQLField("isRequiredForPolicyEnforcement")
    )
    is_verified: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField(
        "isVerified"
    )
    owner: "VerifiableDomainOwnerUnion" = VerifiableDomainOwnerUnion("owner")
    punycode_encoded_domain: "VerifiableDomainGraphQLField" = (
        VerifiableDomainGraphQLField("punycodeEncodedDomain")
    )
    token_expiration_time: "VerifiableDomainGraphQLField" = (
        VerifiableDomainGraphQLField("tokenExpirationTime")
    )
    updated_at: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField(
        "updatedAt"
    )
    verification_token: "VerifiableDomainGraphQLField" = VerifiableDomainGraphQLField(
        "verificationToken"
    )

    def fields(
        self,
        *subfields: Union[VerifiableDomainGraphQLField, "VerifiableDomainOwnerUnion"]
    ) -> "VerifiableDomainFields":
        """Subfields should come from the VerifiableDomainFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VerifiableDomainFields":
        self._alias = alias
        return self


class VerifiableDomainConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "VerifiableDomainEdgeFields":
        return VerifiableDomainEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "VerifiableDomainFields":
        return VerifiableDomainFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "VerifiableDomainConnectionGraphQLField" = (
        VerifiableDomainConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            VerifiableDomainConnectionGraphQLField,
            "PageInfoFields",
            "VerifiableDomainEdgeFields",
            "VerifiableDomainFields",
        ]
    ) -> "VerifiableDomainConnectionFields":
        """Subfields should come from the VerifiableDomainConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VerifiableDomainConnectionFields":
        self._alias = alias
        return self


class VerifiableDomainEdgeFields(GraphQLField):
    cursor: "VerifiableDomainEdgeGraphQLField" = VerifiableDomainEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "VerifiableDomainFields":
        return VerifiableDomainFields("node")

    def fields(
        self,
        *subfields: Union[VerifiableDomainEdgeGraphQLField, "VerifiableDomainFields"]
    ) -> "VerifiableDomainEdgeFields":
        """Subfields should come from the VerifiableDomainEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VerifiableDomainEdgeFields":
        self._alias = alias
        return self


class VerifyVerifiableDomainPayloadFields(GraphQLField):
    client_mutation_id: "VerifyVerifiableDomainPayloadGraphQLField" = (
        VerifyVerifiableDomainPayloadGraphQLField("clientMutationId")
    )

    @classmethod
    def domain(cls) -> "VerifiableDomainFields":
        return VerifiableDomainFields("domain")

    def fields(
        self,
        *subfields: Union[
            VerifyVerifiableDomainPayloadGraphQLField, "VerifiableDomainFields"
        ]
    ) -> "VerifyVerifiableDomainPayloadFields":
        """Subfields should come from the VerifyVerifiableDomainPayloadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VerifyVerifiableDomainPayloadFields":
        self._alias = alias
        return self


class VotableInterface(GraphQLField):
    upvote_count: "VotableGraphQLField" = VotableGraphQLField("upvoteCount")
    viewer_can_upvote: "VotableGraphQLField" = VotableGraphQLField("viewerCanUpvote")
    viewer_has_upvoted: "VotableGraphQLField" = VotableGraphQLField("viewerHasUpvoted")

    def fields(self, *subfields: VotableGraphQLField) -> "VotableInterface":
        """Subfields should come from the VotableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VotableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "VotableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class WorkflowFields(GraphQLField):
    created_at: "WorkflowGraphQLField" = WorkflowGraphQLField("createdAt")
    database_id: "WorkflowGraphQLField" = WorkflowGraphQLField("databaseId")
    id: "WorkflowGraphQLField" = WorkflowGraphQLField("id")
    name: "WorkflowGraphQLField" = WorkflowGraphQLField("name")
    resource_path: "WorkflowGraphQLField" = WorkflowGraphQLField("resourcePath")

    @classmethod
    def runs(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None,
        order_by: Optional[WorkflowRunOrder] = None
    ) -> "WorkflowRunConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
            "orderBy": {"type": "WorkflowRunOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkflowRunConnectionFields("runs", arguments=cleared_arguments)

    state: "WorkflowGraphQLField" = WorkflowGraphQLField("state")
    updated_at: "WorkflowGraphQLField" = WorkflowGraphQLField("updatedAt")
    url: "WorkflowGraphQLField" = WorkflowGraphQLField("url")

    def fields(
        self, *subfields: Union[WorkflowGraphQLField, "WorkflowRunConnectionFields"]
    ) -> "WorkflowFields":
        """Subfields should come from the WorkflowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowFields":
        self._alias = alias
        return self


class WorkflowFileReferenceFields(GraphQLField):
    path: "WorkflowFileReferenceGraphQLField" = WorkflowFileReferenceGraphQLField(
        "path"
    )
    ref: "WorkflowFileReferenceGraphQLField" = WorkflowFileReferenceGraphQLField("ref")
    repository_id: "WorkflowFileReferenceGraphQLField" = (
        WorkflowFileReferenceGraphQLField("repositoryId")
    )
    sha: "WorkflowFileReferenceGraphQLField" = WorkflowFileReferenceGraphQLField("sha")

    def fields(
        self, *subfields: WorkflowFileReferenceGraphQLField
    ) -> "WorkflowFileReferenceFields":
        """Subfields should come from the WorkflowFileReferenceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowFileReferenceFields":
        self._alias = alias
        return self


class WorkflowRunFields(GraphQLField):
    @classmethod
    def check_suite(cls) -> "CheckSuiteFields":
        return CheckSuiteFields("check_suite")

    created_at: "WorkflowRunGraphQLField" = WorkflowRunGraphQLField("createdAt")
    database_id: "WorkflowRunGraphQLField" = WorkflowRunGraphQLField("databaseId")

    @classmethod
    def deployment_reviews(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DeploymentReviewConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentReviewConnectionFields(
            "deployment_reviews", arguments=cleared_arguments
        )

    event: "WorkflowRunGraphQLField" = WorkflowRunGraphQLField("event")

    @classmethod
    def file(cls) -> "WorkflowRunFileFields":
        return WorkflowRunFileFields("file")

    id: "WorkflowRunGraphQLField" = WorkflowRunGraphQLField("id")

    @classmethod
    def pending_deployment_requests(
        cls,
        *,
        after: Optional[str] = None,
        before: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> "DeploymentRequestConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "before": {"type": "String", "value": before},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentRequestConnectionFields(
            "pending_deployment_requests", arguments=cleared_arguments
        )

    resource_path: "WorkflowRunGraphQLField" = WorkflowRunGraphQLField("resourcePath")
    run_number: "WorkflowRunGraphQLField" = WorkflowRunGraphQLField("runNumber")
    updated_at: "WorkflowRunGraphQLField" = WorkflowRunGraphQLField("updatedAt")
    url: "WorkflowRunGraphQLField" = WorkflowRunGraphQLField("url")

    @classmethod
    def workflow(cls) -> "WorkflowFields":
        return WorkflowFields("workflow")

    def fields(
        self,
        *subfields: Union[
            WorkflowRunGraphQLField,
            "CheckSuiteFields",
            "DeploymentRequestConnectionFields",
            "DeploymentReviewConnectionFields",
            "WorkflowFields",
            "WorkflowRunFileFields",
        ]
    ) -> "WorkflowRunFields":
        """Subfields should come from the WorkflowRunFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowRunFields":
        self._alias = alias
        return self


class WorkflowRunConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WorkflowRunEdgeFields":
        return WorkflowRunEdgeFields("edges")

    @classmethod
    def nodes(cls) -> "WorkflowRunFields":
        return WorkflowRunFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "WorkflowRunConnectionGraphQLField" = (
        WorkflowRunConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            WorkflowRunConnectionGraphQLField,
            "PageInfoFields",
            "WorkflowRunEdgeFields",
            "WorkflowRunFields",
        ]
    ) -> "WorkflowRunConnectionFields":
        """Subfields should come from the WorkflowRunConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowRunConnectionFields":
        self._alias = alias
        return self


class WorkflowRunEdgeFields(GraphQLField):
    cursor: "WorkflowRunEdgeGraphQLField" = WorkflowRunEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "WorkflowRunFields":
        return WorkflowRunFields("node")

    def fields(
        self, *subfields: Union[WorkflowRunEdgeGraphQLField, "WorkflowRunFields"]
    ) -> "WorkflowRunEdgeFields":
        """Subfields should come from the WorkflowRunEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowRunEdgeFields":
        self._alias = alias
        return self


class WorkflowRunFileFields(GraphQLField):
    id: "WorkflowRunFileGraphQLField" = WorkflowRunFileGraphQLField("id")
    path: "WorkflowRunFileGraphQLField" = WorkflowRunFileGraphQLField("path")
    repository_file_url: "WorkflowRunFileGraphQLField" = WorkflowRunFileGraphQLField(
        "repositoryFileUrl"
    )
    repository_name: "WorkflowRunFileGraphQLField" = WorkflowRunFileGraphQLField(
        "repositoryName"
    )
    resource_path: "WorkflowRunFileGraphQLField" = WorkflowRunFileGraphQLField(
        "resourcePath"
    )

    @classmethod
    def run(cls) -> "WorkflowRunFields":
        return WorkflowRunFields("run")

    url: "WorkflowRunFileGraphQLField" = WorkflowRunFileGraphQLField("url")
    viewer_can_push_repository: "WorkflowRunFileGraphQLField" = (
        WorkflowRunFileGraphQLField("viewerCanPushRepository")
    )
    viewer_can_read_repository: "WorkflowRunFileGraphQLField" = (
        WorkflowRunFileGraphQLField("viewerCanReadRepository")
    )

    def fields(
        self, *subfields: Union[WorkflowRunFileGraphQLField, "WorkflowRunFields"]
    ) -> "WorkflowRunFileFields":
        """Subfields should come from the WorkflowRunFileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowRunFileFields":
        self._alias = alias
        return self


class WorkflowsParametersFields(GraphQLField):
    do_not_enforce_on_create: "WorkflowsParametersGraphQLField" = (
        WorkflowsParametersGraphQLField("doNotEnforceOnCreate")
    )

    @classmethod
    def workflows(cls) -> "WorkflowFileReferenceFields":
        return WorkflowFileReferenceFields("workflows")

    def fields(
        self,
        *subfields: Union[
            WorkflowsParametersGraphQLField, "WorkflowFileReferenceFields"
        ]
    ) -> "WorkflowsParametersFields":
        """Subfields should come from the WorkflowsParametersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowsParametersFields":
        self._alias = alias
        return self
